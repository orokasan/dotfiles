"" クリップボードにコピー（GUI)

set clipboard=unnamed
"=========================================================================================
" 見た目系
"!!!!!!!!!!!!!colorscheme!!!!!!!!!!!!!!!
syntax on
colorscheme one
set t_Co=256   " This is may or may not needed.
set background=light
call one#highlight('Search','4b0082','f0e68c','bold')
call one#highlight('IncSearch','4b0082','f0e68c','bold')
call one#highlight('PreProc','e7609e','fafafa','')
call one#highlight('Type','e7609e','fafafa','')

"ツールバー非表示
  set guioptions-=T
  set guioptions-=m
  set guioptions-=r
  set guioptions-=R
  set guioptions-=l
  set guioptions-=L
  set guioptions-=b
" gVimでもテキストベースのタブページを使う
set guioptions-=e
" ウィンドウの縦幅
set lines=50
" ウィンドウの横幅
set columns=150
" ウィンドウの起動時の位置
winpos 10 30
"" 行番号を表示
set number
"コマンドライン行数の設定
set cmdheight=1
set cursorline
hi clear CursorLine
" 'cursorline' を必要な時にだけ有効にする
" http://d.hatena.ne.jp/thinca/20090530/1243615055
" を少し改造、number の highlight は常に有効にする
augroup vimrc-auto-cursorline
  autocmd!
  autocmd CursorMoved,CursorMovedI * call s:auto_cursorline('CursorMoved')
  autocmd CursorHold,CursorHoldI * call s:auto_cursorline('CursorHold')
  autocmd WinEnter * call s:auto_cursorline('WinEnter')
  autocmd WinLeave * call s:auto_cursorline('WinLeave')

  setlocal cursorline
  hi clear CursorLine

  let s:cursorline_lock = 0
  function! s:auto_cursorline(event)
    if a:event ==# 'WinEnter'
      setlocal cursorline
      hi CursorLine term=underline cterm=underline guibg=Grey90 " ADD
      let s:cursorline_lock = 2
    elseif a:event ==# 'WinLeave'
      setlocal nocursorline
      hi clear CursorLine " ADD
    elseif a:event ==# 'CursorMoved'
      if s:cursorline_lock
        if 1 < s:cursorline_lock
          let s:cursorline_lock = 1
        else
          " setlocal nocursorline
          hi clear CursorLine " ADD
          let s:cursorline_lock = 0
        endif
      endif
    elseif a:event ==# 'CursorHold'
      " setlocal cursorline
      hi CursorLine term=underline cterm=underline guibg=Grey90 " ADD
      let s:cursorline_lock = 1
    endif
  endfunction
augroup END
" インデントはスマートインデント
set smartindent
" ビープ音を可視化
set visualbell
" コマンドラインの補完
"set wildmode=list:longest
""N秒後にカーソル点滅開始
set guicursor=n:blinkwait2000
""Insertでは高速点滅
"set guicursor=i:blinkwait500-blinkon300-blinkoff150
"cygwinとvimのターミナルが干渉するのを防ぐ
set shell=cmd.exe
set shellcmdflag=/C
"=========================================================================================
"lightline
"powerlineフォント対応（Doubleが適正のはずがsingleで動作する)
set ambiwidth=single
"=======================================================================================
"フォント
"ConsolasにPowerlineSymbolsをパッチしてある
"https://qiita.com/s_of_p/items/b7ab2e4a9e484ceb9ee7
set guifont=Consolas:h11:cDEFAULT
"全角文字の設定
set guifontwide=MS_Gothic:h12:cDEFAULT
".gvimrc カラー設定
"IME状態でカーソルカラー変更
if has('multi_byte_ime')
  highlight CursorIM guifg=NONE guibg=Purple
endif
"=========================================================================================
"全角スペースを表示
"コメント以外で全角スペースを指定しているので scriptencodingと、
"このファイルのエンコードが一致するよう注意！
"デフォルトのZenkakuSpaceを定義
function! ZenkakuSpace()
  highlight ZenkakuSpace cterm=underline ctermfg=darkgrey gui=underline guifg=darkgrey
endfunction

if has('syntax')
  augroup ZenkakuSpace
    autocmd!
    " ZenkakuSpaceをカラーファイルで設定するなら次の行は削除
    autocmd ColorScheme       * call ZenkakuSpace()
    " 全角スペースのハイライト指定
    autocmd VimEnter,WinEnter * match ZenkakuSpace /　/
    autocmd VimEnter,WinEnter * match ZenkakuSpace '\%u3000'
  augroup END
  call ZenkakuSpace()
endif
