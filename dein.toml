[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if has('win32')
    let cmd = 'tools\\update-dll-mingw'
  elseif has('win32unix') " for Cygwin
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo =  'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]]
repo =  'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'

[[plugins]]
on_if = '!has("kaoriya")'
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
on_if = '!has("kaoriya")'
repo = 'deton/jasentence.vim'

[[plugins]]
repo =  'deton/jasegment.vim'
#TODO:qitta
hook_add = ''' "{{{
let g:jasegment#model='knbc_bunsetu'
let g:jasegment#highlight = 1
'''# }}} 

[plugins.ftplugin]
markdown = '''" {{{
nmap <silent> e <Plug>JaSegmentMoveNE
nmap <silent> w <Plug>JaSegmentMoveNW
nmap <silent> b <Plug>JaSegmentMoveNB
omap <silent> e <Plug>JaSegmentMoveOE
omap <silent> w <Plug>JaSegmentMoveOW
omap <silent> b <Plug>JaSegmentMoveOB
xmap <silent> e <Plug>JaSegmentMoveVE
xmap <silent> w <Plug>JaSegmentMoveVW
xmap <silent> b <Plug>JaSegmentMoveVB
nnoremap W w
onoremap W w
xnoremap W w
nnoremap B b
onoremap B b
xnoremap B b
nnoremap E e
onoremap E e
xnoremap E e
omap <silent> aW <Plug>JaSegmentTextObjA
omap <silent> iW <Plug>JaSegmentTextObjI
xmap <silent> aW <Plug>JaSegmentTextObjVA
xmap <silent> iW <Plug>JaSegmentTextObjVI
''' # }}}

#[[plugins]]
#repo =  'kshenoy/vim-signature' {{{
#hook_add = '''
#let g:SignatureMap = {
#    \ 'Leader'             :  "M",
#    \ 'PlaceNextMark'      :  "M,",
#    \ 'ToggleMarkAtLine'   :  "M.",
#    \ 'PurgeMarksAtLine'   :  "M-",
#    \ 'DeleteMark'         :  "dM",
#    \ 'PurgeMarks'         :  "M<Space>",
#    \ 'PurgeMarkers'       :  "M<BS>",
#    \ 'GotoNextLineAlpha'  :  "']",
#    \ 'GotoPrevLineAlpha'  :  "'[",
#    \ 'GotoNextSpotAlpha'  :  "`]",
#    \ 'GotoPrevSpotAlpha'  :  "`[",
#    \ 'GotoNextLineByPos'  :  "]'",
#    \ 'GotoPrevLineByPos'  :  "['",
#    \ 'GotoNextSpotByPos'  :  "]`",
#    \ 'GotoPrevSpotByPos'  :  "[`",
#    \ 'GotoNextMarker'     :  "]-",
#    \ 'GotoPrevMarker'     :  "[-",
#    \ 'GotoNextMarkerAny'  :  "]=",
#    \ 'GotoPrevMarkerAny'  :  "[=",
#    \ 'ListBufferMarks'    :  "M/",
#    \ 'ListBufferMarkers'  :  "M?"
#\ }
#
#''' }}}

[[plugins]]
repo =  'Shougo/neomru.vim'
hook_add =''' " {{{
"denite-neomruでginaを無視
let g:neomru#do_validate = 1
"let g:neomru#file_mru_ignore_pattern = 
"      \'\~$\|\.\%(o\|exe\|dll\|bak\|zwc\|pyc\|sw[po]\)$'.
"      \'\|\%(^\|/\)\.\%(hg\|git\|bzr\|svn\)\%($\|/\)'.
"      \'\|^\%(\\\\\|/mnt/\|/media/\|/temp/\|/tmp/\|\%(/private\)\=/var/folders/\)'.
"      \'\|\%(^\%(gina\)://\)'.
"      \'\|\%(^\%(term\)://\)'
let g:neomru#file_mru_ignore_pattern = 'gina://'
let g:neomru#time_format = '%m/%d %H:%M'
let g:neomru#file_mru_limit = 100
let g:neomru#file_mru_path= '~/.cache/neomru/file'
''' # }}}

[[plugins]]
repo =  'basyura/twibill.vim'

[[plugins]]
repo =  'mattn/webapi-vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo =  'itchyny/lightline.vim'

[[plugins]]
repo =  'mengelbrecht/lightline-bufferline'
depends = ['lightline.vim']

[[plugins]]
repo =  'itchyny/vim-gitbranch'
depends = ['lightline.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo =  'w0ng/vim-hybrid'

[[plugins]]
repo ='ayu-theme/ayu-vim'

[[plugins]]
repo = 'yarisgutierrez/ayu-lightline'
depends = ['lightline.vim']

[[plugins]]
repo =  'morhetz/gruvbox'
hook_add = ''' " {{{
let g:gruvbox_contrast_dark = 'medium'
let g:gruvbox_italicize_comments = 0
let g:gruvbox_invert_selection = 0
let g:gruvbox_guisp_fallback = 'bg'
''' # }}}
[[plugins]]
repo = 'markonm/traces.vim'
hook_add ='''
let g:traces_num_range_preview = 1
nnoremap S :<C-u>%s/
vnoremap S :%s/
nnoremap gs :%s///g<Left><Left><Left>
vnoremap gs :<C-u>%s///g<Left><Left><Left>
'''

[[plugins]]
repo = 'Shougo/neco-syntax'
hook_add = '''
'''

[[plugins]]
repo = 'hrsh7th/vim-neco-calc'
on_source = ['deoplete','neocomplete']

[[plugins]]
repo = 'ujihisa/neco-look'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'haya14busa/is.vim'
#TODO:qitta
hook_add = ''' " {{{
let g:is#do_default_mapping = 0
''' # }}}

[[plugins]]
repo = 'orokasan/clever-f.vim'
merge = '0'
hook_add = ''' " {{{
let g:clever_f_mark_cursor = 0
let g:clever_f_mark_char_color = "Underlined"
let g:clever_f_hide_cursor_on_cmdline = 0
let g:clever_f_smart_case = 1
let g:clever_f_across_no_line = 1
let g:clever_f_chars_match_any_signs = ':;'
let g:clever_f_use_migemo = 1
let g:clever_f_sings_match_any_signs =
    \ '\[!"#$%&''()=~|\-^\\@`[\]{};:+*<>,.?_/、。「」（）『』！？]'
''' # }}}

[[plugins]]
repo = 'rhysd/vim-color-spring-night'
hook_add = ''' " {{{
let g:spring_night_kill_bold = 1
let g:spring_night_kill_italic = 1
let g:spring_night_high_contrast = 0
''' # }}}

[[plugins]]
repo = 'haya14busa/incsearch.vim'
hook_add = '''
let g:incsearch#auto_nohlsearch = 1
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = ''' " {{{
"nnoremap <silent><expr> <Plug>(anzu-n-zzzv) anzu#mode#mapexpr("n", "", "zzzv")
"nnoremap <silent><expr> <Plug>(anzu-N-zzzv) anzu#mode#mapexpr("N", "", "zzzv")
"nmap n <Plug>(is-nohl)<Plug>(anzu-n-zzzv)
"nmap N <Plug>(is-nohl)<Plug>(anzu-N-zzzv)
    nmap n <Plug>(is-nohl)<Plug>(anzu-n)zvzz
    nmap N <Plug>(is-nohl)<Plug>(anzu-N)zvzz
    nmap * <Plug>(is-nohl)<Plug>(anzu-star)zvzz
    nmap # <Plug>(is-nohl)<Plug>(anzu-sharp)zvzz
let g:airline#extensions#anzu#enabled = 0
''' # }}}

[[plugins]]
repo = 'sainnhe/vim-color-forest-night'

[[plugins]]
repo = 'moznion/hateblo.vim'
depends = 'webapi-vim'

[[plugins]]
repo =  'iyuuya/denite-ale'
on_source = ['denite.nvim']

[[plugins]]
repo =  'kana/vim-operator-user'

[[plugins]]
repo = 'deoplete-plugins/deoplete-zsh'

[[plugins]]
repo =  'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'orokasan/denite-anzu'
merge = '0'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo =  'kmnk/denite-dirmark'
on_source = ['denite.nvim','defx.nvim']

# [[plugins]]
# repo = 'skanehira/translate.vim'

#[[plugins]]
#repo = 'kana/vim-smartinput'
#lazy = '1'
#hook_add = '''
#'''
#[[plugins]]
#repo = 'junegunn/fzf.vim'

[[plugins]]
repo = 'fuenor/JpFormat.vim'

#[[plugins]]
#repo = 'SidOfc/mkdx' {{{
#on_ft = ['markdown','md']
#hook_source = '''
#" :h mkdx-settings
#let g:mkdx#settings = {
#      \ 'image_extension_pattern': 'a\?png\|jpe\?g\|gif',
#      \ 'restore_visual':          1,
#      \ 'enter':                   { 'enable': 1, 'malformed': 1, 'o': 1,
#      \                              'shifto': 1, 'shift': 0 },
#      \ 'map':                     { 'prefix': '<leader>', 'enable': 1 },
#      \ 'tokens':                  { 'enter': ['-', '*', '>'],
#      \                              'bold': '**', 'italic': '*', 'strike': '',
#      \                              'list': '-', 'fence': '',
#      \                              'header': '#' },
#      \ 'checkbox':                { 'toggles': [' ', '-', 'x'],
#      \                              'update_tree': 2,
#      \                              'initial_state': ' ' },
#      \ 'toc':                     { 'text': "Table of Contents", 'list_token': '-',
#      \                              'update_on_write': 1,
#      \                              'position': 0,
#      \                              'details': {
#      \                                 'enable': 0,
#      \                                 'summary': 'Click to expand {{toc.text}}',
#      \                                 'nesting_level': -1,
#      \                                 'child_count': 5,
#      \                                 'child_summary': 'show {{count}} items'
#      \                              }
#      \                            },
#      \ 'table':                   { 'divider': '|',
#      \                              'header_divider': '-',
#      \                              'align': {
#      \                                 'left':    [],
#      \                                 'center':  [],
#      \                                 'right':   [],
#      \                                 'default': 'center'
#      \                              }
#      \                            },
#      \ 'links':                   { 'external': {
#      \                                 'enable': 1, 'timeout': 3, 'host': '', 'relative': 1
#      \                              },
#      \                              'fragment': {
#      \                                 'jumplist': 1,
#      \                                 'complete': 1
#      \                              }
#      \                            },
#      \ 'highlight':               { 'enable': 1 },
#      \ 'auto_update':             { 'enable': 0 },
#      \ 'fold': { 'enable': 1 }
#    \ }
#''' }}}

[[plugins]]
repo = 'nixprime/cpsm'

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
build = 'cd app & yarn install'

[[plugins]]
repo = 'deoplete-plugins/deoplete-jedi'
hook_add = '''
let g:deoplete#sources#jedi#statement_length = 30
let g:deoplete#sources#jedi#show_docstring = 1
'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 't9md/vim-textmanip'
hook_add = ''' " {{{
xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-l> <Plug>(textmanip-move-right)
" toggle insert/replace with <F10>
" nmap <F10> <Plug>(textmanip-toggle-mode)
" xmap <F10> <Plug>(textmanip-toggle-mode)
''' # }}}

[[plugins]]
repo = 'Shougo/unite-outline'

[[plugins]]
repo = 'lifepillar/vim-solarized8'
hook_add =''' " {{{
let g:solarized_old_cursor_style = 1
let g:solarized_italics = 0
let g:solarized_statusline = 'flat'
''' # }}}

[[plugins]]
repo = 'mhartington/oceanic-next'

[[plugins]]
repo = 'orokasan/vim-quack-lightline'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add = '''
let g:parenmatch_highlight = 0
hi! link ParenMatch MatchParen
'''

[[plugins]]
repo =  'maximbaz/lightline-ale'
depends = ['lightline.vim']
hook_add = ''' " {{{
if has('mac')
    let g:lightline#ale#indicator_checking = "\uf110"
    let g:lightline#ale#indicator_warnings = ''
    let g:lightline#ale#indicator_errors = ''
    let g:lightline#ale#indicator_ok = ""
else
    let g:lightline#ale#indicator_checking = "\uf110"
    let g:lightline#ale#indicator_warnings = "\uf48f"
    let g:lightline#ale#indicator_errors = "\uf484"
    let g:lightline#ale#indicator_ok = "\uf43a"
endif
''' # }}}

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = ''' " {{{
let g:EasyMotion_do_mapping = 0
nmap , <Plug>(easymotion-s2)
imap <C-z> <ESC><Plug>(easymotion-s2)
xmap , <Plug>(easymotion-s2)
omap , <Plug>(easymotion-s2)
" Jump to first match with enter & space
let g:EasyMotion_use_upper = 1
let g:EasyMotion_keys = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ;'
let g:EasyMotion_smartcase = 1
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1
let g:EasyMotion_use_migemo = 1
let g:EasyMotion_prompt = '{n}>>> '
let g:EasyMotion_off_screen_search = 1
let g:EasyMotion_verbose = 0
hi link EasyMotionTarget Title
hi link EasyMotionShade  Comment
hi link EasyMotionTarget2First MatchParen
hi link EasyMotionTarget2Second MatchParen
hi link EasyMotionMoveHL Search
hi link EasyMotionIncSearch Search
''' # }}}

[[plugins]]
repo = 'haya14busa/vim-asterisk'
depends = 'is.vim'
hook_add = ''' "{{{
 " let g:asterisk#keeppos = 1
 map *  <Plug>(asterisk-z*)<Plug>(is-nohl-1)
 map g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1)
 map #  <Plug>(asterisk-z#)<Plug>(is-nohl-1)
 map g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1)
''' # }}}

[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = ''' " {{{
let g:startify_files_number = 5
let g:startify_list_order = [
        \ ['♻  Most Recently Used Files :'],
        \ 'files',
        \ ['♲  MRU in current directory :'],
        \ 'dir',
        \ ['⚑  Sessions :'],
        \ 'sessions',
        \ ['☺  Bookmark :'],
        \ 'bookmarks',
        \ ]
let g:startify_bookmarks = ["~/dotfiles/_vimrc", "~/dotfiles/dein.toml", "~/dotfiles/dein_lazy.toml"]
autocmd User Startified for key in ['b','s','t','v'] |
          \ execute 'nunmap <buffer>' key | endfor
''' # }}}

[[plugins]]
repo = 'ncm2/float-preview.nvim'
#TODO:qitta
hook_add = '''
let g:float_preview#docked = 0
let g:float_preview#max_height = 5
'''

# vim:set foldmethod=marker:
