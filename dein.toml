[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if has('win32')
    let cmd = 'tools\\update-dll-mingw'
  elseif has('win32unix') " for Cygwin
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo =  'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]]
repo =  'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'

[[plugins]]
on_if = '!has("kaoriya")'
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
on_if = '!has("kaoriya")'
repo = 'deton/jasentence.vim'
hook_add = '''
let g:jasentence_endpat = '[、。，．？！]\+'
'''

[[plugins]]
repo =  'deton/jasegment.vim'
#TODO:qitta
hook_add = ''' "{{{
let g:jasegment#model='knbc_bunsetu'
let g:jasegment#highlight = 1
'''# }}} 

[plugins.ftplugin]
markdown = '''" {{{
nmap <silent> e <Plug>JaSegmentMoveNE
nmap <silent> w <Plug>JaSegmentMoveNW
nmap <silent> b <Plug>JaSegmentMoveNB
omap <silent> e <Plug>JaSegmentMoveOE
omap <silent> w <Plug>JaSegmentMoveOW
omap <silent> b <Plug>JaSegmentMoveOB
xmap <silent> e <Plug>JaSegmentMoveVE
xmap <silent> w <Plug>JaSegmentMoveVW
xmap <silent> b <Plug>JaSegmentMoveVB
nnoremap <buffer> W w
onoremap <buffer> W w
xnoremap <buffer> W w
nnoremap <buffer> B b
onoremap <buffer> B b
xnoremap <buffer> B b
nnoremap <buffer> E e
onoremap <buffer> E e
xnoremap <buffer> E e
omap <silent><buffer> aW <Plug>JaSegmentTextObjA
omap <silent><buffer> iW <Plug>JaSegmentTextObjI
xmap <silent><buffer> aW <Plug>JaSegmentTextObjVA
xmap <silent><buffer> iW <Plug>JaSegmentTextObjVI
''' # }}}

#[[plugins]]
#repo =  'ksh <buffer>enoy/vim-signature' {{{
#hook_add = ' <buffer>''
#let g:SignatureMap = {
#    \ 'Leader'             :  "M",
#    \ 'PlaceNextMark'      :  "M,",
#    \ 'ToggleMarkAtLine'   :  "M.",
#    \ 'PurgeMarksAtLine'   :  "M-",
#    \ 'DeleteMark'         :  "dM",
#    \ 'PurgeMarks'         :  "M<Space>",
#    \ 'PurgeMarkers'       :  "M<BS>",
#    \ 'GotoNextLineAlpha'  :  "']",
#    \ 'GotoPrevLineAlpha'  :  "'[",
#    \ 'GotoNextSpotAlpha'  :  "`]",
#    \ 'GotoPrevSpotAlpha'  :  "`[",
#    \ 'GotoNextLineByPos'  :  "]'",
#    \ 'GotoPrevLineByPos'  :  "['",
#    \ 'GotoNextSpotByPos'  :  "]`",
#    \ 'GotoPrevSpotByPos'  :  "[`",
#    \ 'GotoNextMarker'     :  "]-",
#    \ 'GotoPrevMarker'     :  "[-",
#    \ 'GotoNextMarkerAny'  :  "]=",
#    \ 'GotoPrevMarkerAny'  :  "[=",
#    \ 'ListBufferMarks'    :  "M/",
#    \ 'ListBufferMarkers'  :  "M?"
#\ }
#
#''' }}}

[[plugins]]
repo =  'Shougo/neomru.vim'
hook_add =''' " {{{
"denite-neomruでginaを無視
let g:neomru#do_validate = 1
"let g:neomru#file_mru_ignore_pattern = 
"      \'\~$\|\.\%(o\|exe\|dll\|bak\|zwc\|pyc\|sw[po]\)$'.
"      \'\|\%(^\|/\)\.\%(hg\|git\|bzr\|svn\)\%($\|/\)'.
"      \'\|^\%(\\\\\|/mnt/\|/media/\|/temp/\|/tmp/\|\%(/private\)\=/var/folders/\)'.
"      \'\|\%(^\%(gina\)://\)'.
"      \'\|\%(^\%(term\)://\)'
let g:neomru#file_mru_ignore_pattern = 'term://'
let g:neomru#time_format = '%m/%d %H:%M'
let g:neomru#file_mru_limit = 100
let g:neomru#file_mru_path= '~/.cache/neomru/file'
''' # }}}

[[plugins]]
repo =  'basyura/twibill.vim'

[[plugins]]
repo =  'mattn/webapi-vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo =  'itchyny/lightline.vim'
depends = ['lightline-bufferline']
hook_add = ''' " {{{
let g:lightline = {
\ 'colorscheme': 'quack',
    \ 'active': {
        \ 'left': [ ['mode', 'paste'],['eskk','denitebuf','git'], [ 'readonly', 'path'] ],
        \ 'right': [
            \ ['lineinfo'],
            \ ['charcount'],
            \ [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok', 'percent','IMEstatus']
        \ ]
    \ },
    \ 'inactive': {
        \ 'left': [['inactivefn']],
        \ 'right': [[ 'percent' ]]
    \ },
    \ 'tabline' : {
        \ 'left': [['buffers'], ['denitesource']],
        \ 'right': [['tab'],['fileencoding','filetype'] ]
    \ },
    \ 'component':{
    \},
    \ 'component_function': {
        \ 'readonly':'LLReadonly',
        \ 'inactivefn':'LLInactiveFilename',
        \ 'path':'LLMyFilepath',
        \ 'mode': 'LLMode',
        \ 'charcount':'LLCharcount',
        \ 'eskk': 'LLeskk',
        \ 'tab': 'LLtabnr',
        \ 'git':'LLgit',
        \ 'lineinfo':'LLlineinfo',
        \ 'denitebuf': 'LLDeniteBuffer',
        \ 'denitesource' : 'LLDeniteSource'
    \ },
    \ 'component_expand': {
        \ 'buffers': 'LLmybufferline',
        \ 'denitesource' : 'LLDeniteSource',
        \ 'linter_checking': 'lightline#ale#checking',
        \ 'linter_warnings': 'lightline#ale#warnings',
        \ 'linter_errors': 'lightline#ale#errors'
    \ },
   \ 'component_type' : {
        \ 'buffers': 'tabsel',
        \ 'linter_checking': 'middle',
        \ 'linter_warnings': 'warning',
        \ 'linter_errors': 'error',
        \ 'linter_ok': 'middle'
    \ }
\ }

if !has('nvim')
    let g:lightline.subseparator= { 'left': '', 'right': '' }
    let g:lightline.separator= { 'left': '', 'right': '' }
endif
"   let g:lightline.separator= { 'left': '', 'right': '' }
"   let g:lightline.subseparator= { 'left': '', 'right': '' }
"    let g:lightline.separator =  { 'left': '⮀', 'right': '⮂' }
"    let g:lightline.subseparator = { 'left': '⮁', 'right': '⮃' }
function! LLmybufferline() abort
    if &filetype ==# 'denite' || &filetype ==# 'denite-filter'
        return LLDeniteBuffer()
    else
        return lightline#bufferline#buffers()
    endif
endfunction
let g:component_function_visible_condition = {
        \ 'readonly': 1,
        \ 'denitebuf': 1,
        \ 'inactivefn': 1,
        \ 'path': 1,
        \ 'mode': 1,
        \ 'charcount': 1,
        \ 'eskk': 1,
        \ 'git': 1,
        \ 'lineinfo': 1
        \ }

let g:lightline.tabline_subseparator= { 'left': '', 'right': '' }
let g:lightline.tabline_separator= { 'left': '', 'right': '' }

if !exists('g:disable_IM_Control') && g:disable_IM_Control == 1
    let g:lightline.component += {
        \'IMEstatus':'%{IMStatus("-JP-")}'
        \}
endif

let g:lightline#bufferline#unnamed = '[unnamed]'
let g:lightline#bufferline#filename_modifier = ':t'
let g:lightline#bufferline#show_number = 2
let g:lightline#bufferline#number_map = {
\ 0: '⁰', 1: '¹', 2: '²', 3: '³', 4: '⁴',
\ 5: '⁵', 6: '⁶', 7: '⁷', 8: '⁸', 9: '⁹'}

function! LLMode()
    return &filetype ==# 'unite' ? 'Unite' :
        \ &filetype ==# 'help' ? 'Help' :
        \ &filetype ==# 'denite' ? 'Denite' :
        \ &filetype ==# 'defx' ? 'Defx' :
        \ &filetype ==# 'gundo' ? 'Gundo' :
        \ &filetype ==# 'tweetvim' ? 'Tweetvim' :
        \ lightline#mode()
endfunction

function! LLMyFilepath()
    if &filetype ==# 'denite'
        return LLDeniteSource()
    elseif exists('*anzu#search_status') && strlen(anzu#search_status())
        return s:llanzu()
    elseif &filetype !~# s:ignore_filetype
        let l:ll_filepath = expand('%:~')
        let l:ll_filename = expand('%:t')
        if winwidth(0) > 80
            let l:ll_fn =  strlen(l:ll_filepath) < 40 ? l:ll_filepath :
            \ l:ll_filename
        else
            let l:ll_fn = l:ll_filename
        endif
            let l:ll_modified = &modified ? '[+]' : ''
            return l:ll_fn . l:ll_modified
    else
        return ''
    endif
endfunction

"例外filetype
let s:ignore_filetype = '\v(vimfiler|gundo|defx|tweetvim|denite|denite-filter)'

function! LLInactiveFilename()
    return &filetype !~# s:ignore_filetype ? expand('%:t') : LLMode()
endfunction

function! LLeskk() abort
    if &filetype ==# 'denite-filter'
        return exists('*LLmyeskk') ? LLmyeskk() : '[  ]'
    else
        return &filetype !~# s:ignore_filetype && exists('*LLmyeskk') ? LLmyeskk() : ''
    endif
endfunction

function! LLlineinfo() abort
    let l:col = col('.')
    let l:fixedcol = l:col <10 ? '  ' . l:col :
        \ l:col <100 ? ' ' . l:col : l:col
    if &filetype !~# s:ignore_filetype
        return winwidth(0) > 65 ?
            \  printf('%s:%d#%d', l:fixedcol , line('.') , line('$') ) :
            \  printf('%s:%d', l:fixedcol , line('.') )
        else
            return printf('%d:%d', col('.') , line('.') )
        endif
endfunction

" 文字数カウント {{{
" lightlineに渡す変数の設定
augroup CharCounter
    autocmd!
    autocmd BufNew,BufEnter,TextChanged,CursorMoved,CursorMovedI * call <SID>llvarCharCount()
    autocmd BufNew,BufEnter,FileWritePre,BufWrite,InsertLeave * call <SID>llvarCharAllCount()
augroup END

let s:llcharcount = ''
let s:llcharallcount = ''

function! s:llvarCharAllCount()
    let l:count = 0
    for l in range(0, line('$'))
        let l:count += strchars(getline(l))
    endfor
    let s:llcharallcount = l:count == 0 ?   '***' :
        \ l:count <10 ? '   ' . l:count :
        \ l:count <100 ? '  ' . l:count :
        \ l:count <1000 ? ' ' . l:count : l:count
endfunction

function! s:llvarCharCount()
    let l:count = strchars(getline('.'))
    let s:llcharcount = l:count < 10 ? '**' . l:count :
        \ l:count <100 ? '*' . l:count :
        \ l:count
endfunction

function! LLCharcount()
    if &filetype =~# s:ignore_filetype | return | endif
        return winwidth(0) > 70 ? '[' . s:llcharcount . ']' . s:llcharallcount . 'w' :
            \ winwidth(0) > 65 ? '[' . s:llcharcount . ']w' : ''
endfunction
"}}}

function! LLReadonly()
"    return &readonly ? '⭤' : ''
    return &readonly ? '' : ''
endfunction

function! LLtabnr() abort
    return tabpagenr('$') > 1 ? tabpagenr().':'.tabpagenr('$').'«' : '«'
endfunction

function! LLgit() abort
        return s:llgitbranch
endfunction

" 重いのでキャッシュする
autocmd vimrc BufNew,BufEnter,FileWritePre,BufWrite * call <SID>llgitcache()
function! s:llgitcache()
    let s:llgitbranch = ''
    if !exists('*gitbranch#name') | return | endif
    let l:git = gitbranch#name()
    if &filetype !~# s:ignore_filetype && len(l:git)
        let s:llgitbranch =  winwidth(0) > 100  ? ' '. l:git :''
    else
        let s:llgitbranch = ''
"    return strlen(_) && winwidth(0) > 100  ? '⭠ '._ :
"      \strlen(_) ? ' ⭠': ''
    endif
endfunction

" 検索ステータスを表示 (vim-anzuを利用) {{{
autocmd vimrc InsertEnter,BufEnter,CursorMoved * if exists('*anzu#clear_search_status') 
    \| call anzu#clear_search_status() | endif

autocmd vimrc CmdlineLeave /,\? :call timer_start(0, {-> execute('AnzuUpdateSearchStatus') } )
autocmd vimrc User IncSearchExecute if exists(':AnzuUpdateSearchStatus') | call execute('AnzuUpdateSearchStatus') | endif

function! s:llanzu()
    let s:anzu = anzu#search_status()
    return strlen(s:anzu) < 30 ? s:anzu : matchstr(s:anzu,'(\d\+\/\d\+)')
endfunction "}}}

" Deniteステータス {{{
function! LLDeniteBuffer()
    if &filetype ==#  'denite-filter' || &filetype ==# 'denite'
        let l:buffer = denite#get_status('buffer_name')
        return l:buffer
    else
        return ''
    endif
endfunction

function! LLDeniteSource()
    if &filetype !=# 'denite-filter' && &filetype !=# 'denite'
        return ''
    endif
    let l:linenr = denite#get_status('linenr')
    let l:sources = denite#get_status('sources')
    let l:p =denite#get_status('path')
    let l:path = substitute(l:p, '[', '', 'g')
    let l:path = substitute(l:path, ']', '', 'g')
    let l:path = fnamemodify(l:path,':~')
    if strlen(l:path) > 50
        let l:path = fnamemodify(l:path,':t')
    endif
    if strlen(l:sources) > 60
        let l:sources = matchstr(l:sources, '.\+\ze:[') .
            \ matchstr(l:sources, ']\zs.\+') 
    endif
    let denitesource = l:sources . ' - [' . l:path . ']'
    "if strlen(denitesource) > 100
        return denitesource
    "endif
endfunction
" }}}
''' # }}}

[[plugins]]
repo =  'mengelbrecht/lightline-bufferline'
depends = ['lightline.vim']

[[plugins]]
repo =  'itchyny/vim-gitbranch'
depends = ['lightline.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
autocmd vimrc ColorScheme iceberg highlight PmenuSel ctermbg=236 guibg=#3d425b
autocmd vimrc ColorScheme iceberg highlight Pmenu  ctermfg=252 ctermbg=236 guifg=#c6c8d1 guibg=#272c42
autocmd vimrc ColorScheme iceberg highlight NormalFloat ctermfg=252 ctermbg=236 guifg=#c6c8d1 guibg=#272c42
autocmd vimrc ColorScheme iceberg highlight clear Search
autocmd vimrc ColorScheme iceberg highligh Search gui=underline
'''

# [[plugins]]
# repo =  'w0ng/vim-hybrid'

# [[plugins]]
# repo ='ayu-theme/ayu-vim'

# [[plugins]]
# repo = 'yarisgutierrez/ayu-lightline'
# depends = ['lightline.vim']

[[plugins]]
repo =  'morhetz/gruvbox'
hook_add = ''' " {{{
let g:gruvbox_contrast_dark = 'medium'
let g:gruvbox_italicize_comments = 0
let g:gruvbox_invert_selection = 0
let g:gruvbox_guisp_fallback = 'bg'
''' # }}}

[[plugins]]
repo = 'markonm/traces.vim'
hook_add ='''
let g:traces_num_range_preview = 1
nnoremap S :<C-u>%s/
vnoremap S :%s/
nnoremap gs :%s///g<Left><Left><Left>
vnoremap gs :<C-u>%s///g<Left><Left><Left>
'''

[[plugins]]
repo = 'Shougo/neco-syntax'
hook_add = '''
'''

[[plugins]]
repo = 'hrsh7th/vim-neco-calc'
on_source = ['deoplete','neocomplete']

[[plugins]]
repo = 'ujihisa/neco-look'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'haya14busa/is.vim'
#TODO:qitta
hook_add = ''' " {{{
let g:is#do_default_mapping = 0
''' # }}}

[[plugins]]
repo = 'orokasan/clever-f.vim'
merge = '0'
hook_add = ''' " {{{
let g:clever_f_mark_cursor = 0
let g:clever_f_mark_char_color = "Underlined"
let g:clever_f_hide_cursor_on_cmdline = 0
let g:clever_f_smart_case = 1
let g:clever_f_across_no_line = 1
let g:clever_f_chars_match_any_signs = ':;'
let g:clever_f_use_migemo = 1
let g:clever_f_sings_match_any_signs =
    \ '\[!"#$%&''()=~|\-^\\@`[\]{};:+*<>,.?_/、。「」（）『』！？]'
''' # }}}

[[plugins]]
repo = 'haya14busa/incsearch.vim'
hook_add = '''
let g:incsearch#auto_nohlsearch = 1
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = ''' " {{{
"nnoremap <silent><expr> <Plug>(anzu-n-zzzv) anzu#mode#mapexpr("n", "", "zzzv")
"nnoremap <silent><expr> <Plug>(anzu-N-zzzv) anzu#mode#mapexpr("N", "", "zzzv")
"nmap n <Plug>(is-nohl)<Plug>(anzu-n-zzzv)
"nmap N <Plug>(is-nohl)<Plug>(anzu-N-zzzv)
    nmap n <Plug>(is-nohl)<Plug>(anzu-n)zvzz
    nmap N <Plug>(is-nohl)<Plug>(anzu-N)zvzz
    nmap * <Plug>(is-nohl)<Plug>(anzu-star)zvzz
    nmap # <Plug>(is-nohl)<Plug>(anzu-sharp)zvzz
let g:airline#extensions#anzu#enabled = 0
''' # }}}

[[plugins]]
repo = 'moznion/hateblo.vim'
depends = 'webapi-vim'

[[plugins]]
#repo =  'iyuuya/denite-ale'
repo =  'orokasan/denite-ale'
on_source = ['denite.nvim']

[[plugins]]
repo =  'kana/vim-operator-user'

[[plugins]]
repo = 'deoplete-plugins/deoplete-zsh'

[[plugins]]
repo =  'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'orokasan/denite-anzu'
merge = '0'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo =  'kmnk/denite-dirmark'
on_source = ['denite.nvim','defx.nvim']

#[[plugins]]
#repo = 'junegunn/fzf.vim'

[[plugins]]
repo = 'fuenor/JpFormat.vim'

#[[plugins]]
#repo = 'SidOfc/mkdx' {{{
#on_ft = ['markdown','md']
#hook_source = '''
#" :h mkdx-settings
#let g:mkdx#settings = {
#      \ 'image_extension_pattern': 'a\?png\|jpe\?g\|gif',
#      \ 'restore_visual':          1,
#      \ 'enter':                   { 'enable': 1, 'malformed': 1, 'o': 1,
#      \                              'shifto': 1, 'shift': 0 },
#      \ 'map':                     { 'prefix': '<leader>', 'enable': 1 },
#      \ 'tokens':                  { 'enter': ['-', '*', '>'],
#      \                              'bold': '**', 'italic': '*', 'strike': '',
#      \                              'list': '-', 'fence': '',
#      \                              'header': '#' },
#      \ 'checkbox':                { 'toggles': [' ', '-', 'x'],
#      \                              'update_tree': 2,
#      \                              'initial_state': ' ' },
#      \ 'toc':                     { 'text': "Table of Contents", 'list_token': '-',
#      \                              'update_on_write': 1,
#      \                              'position': 0,
#      \                              'details': {
#      \                                 'enable': 0,
#      \                                 'summary': 'Click to expand {{toc.text}}',
#      \                                 'nesting_level': -1,
#      \                                 'child_count': 5,
#      \                                 'child_summary': 'show {{count}} items'
#      \                              }
#      \                            },
#      \ 'table':                   { 'divider': '|',
#      \                              'header_divider': '-',
#      \                              'align': {
#      \                                 'left':    [],
#      \                                 'center':  [],
#      \                                 'right':   [],
#      \                                 'default': 'center'
#      \                              }
#      \                            },
#      \ 'links':                   { 'external': {
#      \                                 'enable': 1, 'timeout': 3, 'host': '', 'relative': 1
#      \                              },
#      \                              'fragment': {
#      \                                 'jumplist': 1,
#      \                                 'complete': 1
#      \                              }
#      \                            },
#      \ 'highlight':               { 'enable': 1 },
#      \ 'auto_update':             { 'enable': 0 },
#      \ 'fold': { 'enable': 1 }
#    \ }
#''' }}}

[[plugins]]
repo = 'nixprime/cpsm'

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
build = 'cd app & yarn install'

[[plugins]]
repo = 'deoplete-plugins/deoplete-jedi'
hook_add = '''
let g:deoplete#sources#jedi#statement_length = 30
let g:deoplete#sources#jedi#show_docstring = 1
'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 't9md/vim-textmanip'
hook_add = ''' " {{{
xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-l> <Plug>(textmanip-move-right)
" toggle insert/replace with <F10>
" nmap <F10> <Plug>(textmanip-toggle-mode)
" xmap <F10> <Plug>(textmanip-toggle-mode)
''' # }}}

[[plugins]]
repo = 'Shougo/unite-outline'

[[plugins]]
repo = 'lifepillar/vim-solarized8'
hook_add =''' " {{{
let g:solarized_old_cursor_style = 1
let g:solarized_italics = 0
let g:solarized_statusline = 'flat'
autocmd vimrc ColorScheme solarized8_flat highlight! VertSplit guifg=#05252C guibg=#05252C
autocmd vimrc ColorScheme solarized8_flat highlight! link EndOfBuffer Comment
autocmd vimrc ColorScheme solarized8_flat highlight! NormalFloat guibg=#05252C
autocmd vimrc ColorScheme solarized8_flat highlight clear Underlined
autocmd vimrc ColorScheme solarized8_flat highlight! Underlined gui=underline,bold
colorscheme solarized8_flat
''' # }}}

# [[plugins]]
# repo = 'mhartington/oceanic-next'

[[plugins]]
repo = 'orokasan/vim-quack-lightline'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add = '''
let g:parenmatch_highlight = 0
hi! link ParenMatch MatchParen
'''

[[plugins]]
repo =  'maximbaz/lightline-ale'
depends = ['lightline.vim']
hook_add = ''' " {{{
if has('mac')
    let g:lightline#ale#indicator_checking = "\uf110"
    let g:lightline#ale#indicator_warnings = ''
    let g:lightline#ale#indicator_errors = ''
    let g:lightline#ale#indicator_ok = ""
else
    let g:lightline#ale#indicator_checking = "\uf110"
    let g:lightline#ale#indicator_warnings = "\uf48f"
    let g:lightline#ale#indicator_errors = "\uf484"
    let g:lightline#ale#indicator_ok = "\uf43a"
endif

''' # }}}

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = ''' " {{{
let g:EasyMotion_do_mapping = 0
nmap m <Plug>(easymotion-s2)
nmap M <Plug>(easymotion-overwin-f2)
imap <C-z> <ESC><Plug>(easymotion-s2)
xmap m <Plug>(easymotion-s2)
omap m <Plug>(easymotion-s2)
map gj <Plug>(easymotion-sol-j)
map gk <Plug>(easymotion-sol-k)

" Jump to first match with enter & space
let g:EasyMotion_use_upper = 1
let g:EasyMotion_keys = 'ASDFGHJKLQWERTYUIOPZXCVBNM'
let g:EasyMotion_smartcase = 1
let g:EasyMotion_space_jump_first = 1
let g:EasyMotion_use_migemo = 1
let g:EasyMotion_prompt = '{n}>>> '
let g:EasyMotion_verbose = 0
hi link EasyMotionTarget Type
hi link EasyMotionShade  Comment
hi link EasyMotionTarget2First MatchParen
hi link EasyMotionTarget2Second MatchParen
hi link EasyMotionMoveHL Search
hi link EasyMotionIncSearch Search
''' # }}}

[[plugins]]
repo = 'haya14busa/vim-asterisk'
depends = 'is.vim'
hook_add = ''' "{{{
 " let g:asterisk#keeppos = 1
 map *  <Plug>(asterisk-z*)<Plug>(is-nohl-1)
 map g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1)
 map #  <Plug>(asterisk-z#)<Plug>(is-nohl-1)
 map g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1)
''' # }}}

[[plugins]]
repo = 'mhinz/vim-startify'
hook_add = ''' " {{{
let g:startify_files_number = 5
let g:startify_list_order = [
        \ ['♻  Most Recently Used Files :'],
        \ 'files',
        \ ['♲  MRU in current directory :'],
        \ 'dir',
        \ ['⚑  Sessions :'],
        \ 'sessions',
        \ ['☺  Bookmark :'],
        \ 'bookmarks',
        \ ['Commands :'],
        \ 'commands'
        \ ]
let g:startify_bookmarks = ["~/dotfiles/_vimrc", "~/dotfiles/dein.toml", "~/dotfiles/dein_lazy.toml"]
let g:startify_commands = [
    \ {'di': ['DeinInstall', 'DeinInstall']},
    \ {'du': ['DeinUpdate', 'DeinUpdate']},
    \ {'dr': ['DeinRecache', 'DeinRecache']}
    \ ]
autocmd User Startified for key in ['b','s','t','v'] |
          \ execute 'nunmap <buffer>' key | endfor
''' # }}}

[[plugins]]
repo = 'ncm2/float-preview.nvim'
#TODO:qitta
hook_add = '''
let g:float_preview#docked = 0
let g:float_preview#max_height = 5
'''
[[plugins]]
repo = 'orokasan/denite-my-source'

[[plugins]]
repo = 'N0nki/denite-markdown'

# vim:set foldmethod=marker:
