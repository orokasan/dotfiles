[[plugin]]
repo = 'Shougo/dein.vim'
hook_add = '''
augroup dein
    autocmd!
augroup END
'''

# [[plugins]]
# repo = 'rebelot/heirline.nvim'
# hook_post_source = '''
# lua <<EOF
# local conditions = require("heirline.conditions")

# local utils = require("heirline.utils")
# EOF
# '''

[[plugins]]
repo = 'tyru/skkdict.vim'

 # [[plugins]]
 # repo = 'Shougo/context_filetype.vim'
 # lazy = 1
 # hook_add = '''
 # let g:context_filetype#search_offset = 100
# '''

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
autocmd dein ColorScheme iceberg call My_iceberg_highlight()
function! My_iceberg_highlight()
highlight! PmenuSel ctermbg=236 guibg=#3d425b blend=0
highlight! Pmenu  ctermfg=252 ctermbg=236 guifg=#c6c8d1 guibg=#272c42
highlight! NormalFloat ctermfg=252 ctermbg=236 guifg=#c6c8d1 guibg=#272c42
highlight! clear Search
highlight! link Search Title
highlight! link Conceal Title
highlight! link WinBarNC Comment
highlight! Underlined cterm=underline gui=underline guifg=NONE guisp=#84a0c6
highlight! PmenuSelected gui=bold guifg=#e2a478 guibg=#3d425b blend=0
highlight! link WhiteSpace Comment

highlight! link @text.diff.add DiffAdd
highlight! link @text.diff.change DiffChange
highlight! link @text.diff.delete DiffDelete
hi! GitsignsAdd guifg=#8a8a67 guibg=#1e2132
hi! GitsignsChange guifg=#54909c guibg=#1e2132
hi! GitSignsDelete guifg=#9c4848 guibg=#1e2132
hi! link Winbar Title
hi! link DiagnosticUnderlineError Error
highlight! link @punctuation.special Comment
hi! FloatBorder guifg=#c6c8d1 guibg=#272c42
hi! NormalNC ctermfg=252 guifg=#c6c8d1

endfunction
'''

[[plugins]]
repo =  'kmnk/denite-dirmark'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add = '''
hi! link ParenMatch MatchParen
'''

# [[plugins]]
# repo = 'glacambre/firenvim'
# if = 'has("nvim")'
# # hook_post_update = 'call firenvim#install(0)'
# hook_post_source = '''
# if exists('g:started_by_firenvim')
# let g:firenvim_config = {
#     \ 'globalSettings': {
#         \ 'alt': 'all',
#     \  },
#     \ 'localSettings': {
#         \ '.*': {
#                 \ 'cmdline': 'neovim',
#                 \ 'takeover': 'never',
#             \ },
#         \ 'mail.google.com*': {
#             \ 'cmdline': 'neovim',
#             \ 'takeover': 'once',
#             \ 'priority': 1,
#         \ },
#     \ }
# \ }
# set showtabline=0
# set winbar=
# set background=light
# set guifont:HackGen\ Console\ NFJ:h12
# set laststatus=0
# nnoremap <Esc><Esc> :call firenvim#focus_page()<CR>
# nnoremap <C-z> <Cmd>write<CR><Cmd>call firenvim#hide_frame()<CR>
# inoremap <C-z> <Cmd>write<CR><Cmd>call firenvim#hide_frame()<CR>
# colorscheme one
# startinsert
# endif
# '''

[[plugins]]
repo = 'thinca/vim-jautil'

[[plugins]]
repo = 'https://github.com/vim-jp/autofmt'
# merged = 0
hook_add = '''
set formatexpr=autofmt#japanese#formatexpr()
set textwidth=42

set formatexpr=myfmt.format_normal_mode()

let s:compat = autofmt#compat#import()

let myfmt = {}
call extend(myfmt, s:compat)

function! myfmt.format_normal_mode(lnum, count) abort
  let self.textwidth = self.comp_textwidth(1)

  if self.textwidth == 0
    return
  endif

  let offset = 0

  let para = []
  call map(getline(a:lnum, a:lnum + a:count - 1),{ idx, val -> extend(para, [[idx, [val]]]) } )
  for [i, lines] in para
    let lnum = a:lnum + i + offset
    call setline(lnum, self.retab(getline(lnum)))

    let offset += self.format_lines(lnum, len(lines))

    if self.is_comment_enabled()
      " " * */" -> " */"
      let lnum = a:lnum + i + (len(lines) - 1) + offset
      let line = getline(lnum)
      let [indent, com_str, mindent, text, com_flags] = self.parse_leader(line)
      if com_flags =~# 'm'
        let [s, m, e] = self.find_three_piece_comments(&comments, com_flags, com_str)
        if text == e[1]
          let line = indent . e[1]
          call setline(lnum, line)
        endif
      endif
    endif

  endfor

  " The cursor is left on the first non-blank of the last formatted line.
  let lnum = a:lnum + (a:count - 1) + offset
  execute printf('keepjumps normal! %dG', lnum)
endfunction
'''

[[plugins]]
if = '!has("nvim")'
merged = 0
repo = 'thinca/vim-singleton'
hook_post_source = '''
call singleton#enable()
'''

[[plugins]]
repo = 'machakann/vim-colorscheme-snowtrek'

[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'

[[plugins]]
repo = 'lambdalisue/mr.vim'
hook_add = '''
let g:mr#threshold = 300
let g:mr_mrw_disabled = v:true
let g:mr_mrr_disabled = v:true
let g:mr#mru#predicates = [{ filename -> filename !~# '\(doc[\\\/].*txt\|COMMIT_EDITMSG\|mail.google.*\)' }]
'''

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'
hook_post_source = '''
if !has('nvim')
au dein VimEnter * call nerdfont#find()
au dein VimEnter * let g:glyph_palette#palette = copy(g:glyph_palette#defaults#palette)
au dein VimEnter * let g:glyph_palette#palette['GlyphPaletteDirectory'] += ['','', '']
au dein VimEnter * call nerdfont#find('.')
endif
let g:glyph_palette#palette = copy(g:glyph_palette#defaults#palette)
let g:glyph_palette#palette['GlyphPaletteDirectory'] += ['','', '']
let g:nerdfont#directory#customs = {
    \ '': '',
    \ 'open': '',
    \ 'close': '',
    \ 'symlink': '',
    \}
let g:nerdfont#path#extension#customs = {
    \'txt' :  '',
    \'pdf' :  '',
    \'docx' :  '',
    \'doc' :  '',
    \'xlsx' :  '',
    \'xlsm' :  '',
    \'pptx' :  '',
    \'ppt' :  '',
    \'tex' :  '',
    \'zip': ''
    \}
augroup my-glyph-palette
  autocmd! *
  autocmd FileType ddu-ff,ddu-filer call glyph_palette#apply()
augroup END

'''

[[plugins]]
repo='Shougo/junkfile.vim'
hook_add = '''
nnoremap <silent> <C-T> <Cmd>tabnew<bar>JunkfileOpen txt<CR>
nnoremap <silent> g<C-T> <Cmd>JunkfileOpen<CR>
nnoremap <C-S> <Cmd>JunkfileOpen<CR>
'''

[ftplugin]
typescript = '''
setlocal tabstop=2
'''

json = '''
setlocal conceallevel=0
'''

markdown = '''
'''

tsv = '''
setlocal comments=b:*,b:-,b:+,b:1.,nb:>
setlocal formatoptions-=c formatoptions+=jro
setlocal nowrap
nnoremap <buffer> <tab> f<TAB>
nnoremap <buffer> <S-tab> F<TAB>
'''

txt = '''
setlocal textwidth=42
setlocal noexpandtab
nnoremap ]] <Cmd>call search('^\s*\(■\)', "W")<CR>
nnoremap [[ <Cmd>call search('^\s*\(■\)', "bW")<CR>
'''

[[plugins]]
repo = 'eihigh/vim-aomi-grayscale'

[[plugins]]
repo = 'farmergreg/vim-lastplace'

# [[plugins]]
# repo = 'theHamsta/nvim-treesitter-pairs'
# lua_post_source = '''
# '''

[[plugins]]
repo = "rcarriga/nvim-notify"

[[plugins]]
repo = "IwasakiYuuki/ai-assistant.nvim"
lua_add = '''
vim.keymap.set('n', '<leader>c', "<cmd>AIAssistantToggle<cr>")
'''

[[plugins]]
lazy = 1
on_cmd = ['Ask', 'Review']
repo ='CoderCookE/vim-chatgpt'


# vim:set foldmethod=marker:'
