# [[plugin]]
# repo = 'Shougo/dein.vim'
# hook_add = '''
# augroup dein
#     autocmd!
# augroup END
# '''

[[plugins]]
repo =  'itchyny/lightline.vim'
hook_add = 'source ~/dotfiles/nvim/rc/config/lightline.rc.vim'

[[plugins]]
depends = ['lightline.vim', 'nvim-lspconfig']
if = 'has("nvim")'
repo = 'josa42/nvim-lightline-lsp'
merged=1
hook_add = '''
    "autocmd DiagnosticChanged * call lightline#update()
    function! LLLspProgress() abort
        " let p = luaeval('vim.lsp.util.get_progress_messages()')
        " if empty(p)
        "     return ''
        " endif
        " let p = p[0]
        " let title = get(p, 'title', '')
        " let perc = get(p, 'percentage', '')
        " let mes = get(p, 'message', '')
        " return title .. '(' .. perc .. '%)' .. ':' .. mes
        return ''
    endfunction

    let g:lightline#lsp#indicator_warnings = ' '
    let g:lightline#lsp#indicator_errors = ' '
    let g:lightline#lsp#indicator_hints = ' '
    call lightline#lsp#register()
'''

[[plugins]]
repo = 'tyru/skkdict.vim'

# [[plugins]]
# repo =  'orokasan/jasegment.vim'
# hook_add = ''' "{{{
# let g:jasegment#model='knbc_bunsetu'
# let g:jasegment_no_default_key_mappings = 1
# let g:jasegment#highlight = 1
# nmap <silent> E <Plug>JaSegmentMoveNE
# nmap <silent> W <Plug>JaSegmentMoveNW
# nmap <silent> B <Plug>JaSegmentMoveNB
# xmap <silent> E <Plug>JaSegmentMoveVE
# xmap <silent> W <Plug>JaSegmentMoveVW
# xmap <silent> B <Plug>JaSegmentMoveVB
# "omap <silent><buffer> aW <Plug>JaSegmentTextObjA
# "omap <silent><buffer> iW <Plug>JaSegmentTextObjI
# "xmap <silent><buffer> aW <Plug>JaSegmentTextObjVA
# "xmap <silent><buffer> iW <Plug>JaSegmentTextObjVI
# '''# }}} 

# [[plugins]]
# repo =  'mengelbrecht/lightline-bufferline'
# depends = ['lightline.vim']

[[plugins]]
repo =  'itchyny/vim-gitbranch'
depends = ['lightline.vim']

 # [[plugins]]
 # repo = 'Shougo/context_filetype.vim'
 # lazy = 1
 # hook_add = '''
 # let g:context_filetype#search_offset = 100
# '''

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
autocmd dein ColorScheme iceberg highlight! PmenuSel ctermbg=236 guibg=#3d425b
autocmd dein ColorScheme iceberg highlight! Pmenu  ctermfg=252 ctermbg=236 guifg=#c6c8d1 guibg=#272c42
autocmd dein ColorScheme iceberg highlight! NormalFloat ctermfg=252 ctermbg=236 guifg=#c6c8d1 guibg=#272c42
autocmd dein ColorScheme iceberg highlight! clear Search
autocmd dein ColorScheme iceberg highlight! link Search Title
autocmd dein ColorScheme iceberg highlight! link Conceal Title
autocmd dein ColorScheme iceberg highlight! Underlined cterm=underline gui=underline guifg=NONE guisp=#84a0c6
autocmd dein ColorScheme iceberg highlight! link WhiteSpace Comment
if has('nvim')
autocmd dein ColorScheme iceberg highlight! link @punctuation.special Comment
autocmd dein ColorScheme iceberg highlight! link @text.title Title
autocmd dein ColorScheme iceberg highlight! link @text.literal String
autocmd dein ColorScheme iceberg highlight! @punctuation.delimiter gui=bold guifg=#a093c7
autocmd dein ColorScheme iceberg highlight! link @punctuation.special Comment
autocmd dein ColorScheme iceberg highlight! link @text.uri String
endif
"autocmd dein ColorScheme iceberg highlight! clear CursorLine
"autocmd dein ColorScheme iceberg highlight! CursorLine gui=underline guisp=#c6c8d1
" autocmd dein ColorScheme iceberg highlight CursorLine guibg=#1e2132

" autocmd dein Colorscheme iceberg hi link TSInclude Special
" autocmd dein Colorscheme iceberg hi link TSProperty String

" autocmd dein Colorscheme iceberg hi link TSConstant Constant
" autocmd dein Colorscheme iceberg hi link TSConstructor Define
" autocmd dein Colorscheme iceberg hi link TSLavel Number
" autocmd dein Colorscheme iceberg hi link TSLabel Number
" autocmd dein Colorscheme iceberg hi link TSNamespace Number
" autocmd dein Colorscheme iceberg hi link TSOperator Number
" autocmd dein Colorscheme iceberg hi link TSKeyword Keyword
" autocmd dein Colorscheme iceberg hi link TSType Define
" autocmd dein Colorscheme iceberg hi link LspDiagnosticsUnderlineError Error
" autocmd dein Colorscheme iceberg hi link LspDiagnosticsUnderlineWarning Warning
'''

[[plugins]]
repo =  'kana/vim-operator-user'

[[plugins]]
repo =  'kmnk/denite-dirmark'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add = '''
hi! link ParenMatch MatchParen
'''

# [[plugins]]
# repo = 'glacambre/firenvim'
# on_event = ['VimEnter']
# on_if = 'has("nvim")'
# # hook_post_update = 'call firenvim#install(0)'
# hook_add = '''
# if exists('g:started_by_firenvim')
# let g:firenvim_config = { 
#     \ 'globalSettings': {
#         \ 'alt': 'all',
#     \  },
#     \ 'localSettings': {
#         \ '.*': {
#             \ 'cmdline': 'neovim',
#             \ 'content': 'text',
#             \ 'priority': 0,
#             \ 'selector': 'textarea',
#             \ 'takeover': 'always',
#         \ },
#     \ }
# \ }
# set showtabline=0
# set background=light
# startinsert
# set guifont:HackGen\ Console\ NFJ:h12
# endif
# '''

# [[plugins]]
# repo = 'raghur/vim-ghost'

# [[plugins]]
# rtp = 'vim'
# merged = 0
# repo = 'soywod/himalaya'

[[plugins]]
repo = 'thinca/vim-jautil'

# [[plugins]]
# repo = 'junegunn/vim-easy-align'
# hook_add = '''
# vmap ga <Plug>(EasyAlign)
# nmap ga <Plug>(EasyAlign)
# '''

[[plugins]]
repo = 'https://github.com/vim-jp/autofmt'
merged = 0
hook_add = '''
set formatexpr=autofmt#japanese#formatexpr()
set textwidth=42

set formatexpr=myfmt.format_normal_mode()

let s:compat = autofmt#compat#import()

let myfmt = {}
call extend(myfmt, s:compat)

function! myfmt.format_normal_mode(lnum, count) abort
  let self.textwidth = self.comp_textwidth(1)

  if self.textwidth == 0
    return
  endif

  let offset = 0

  let para = []
  call map(getline(a:lnum, a:lnum + a:count - 1),{ idx, val -> extend(para, [[idx, [val]]]) } )
  for [i, lines] in para
    let lnum = a:lnum + i + offset
    call setline(lnum, self.retab(getline(lnum)))

    let offset += self.format_lines(lnum, len(lines))

    if self.is_comment_enabled()
      " " * */" -> " */"
      let lnum = a:lnum + i + (len(lines) - 1) + offset
      let line = getline(lnum)
      let [indent, com_str, mindent, text, com_flags] = self.parse_leader(line)
      if com_flags =~# 'm'
        let [s, m, e] = self.find_three_piece_comments(&comments, com_flags, com_str)
        if text == e[1]
          let line = indent . e[1]
          call setline(lnum, line)
        endif
      endif
    endif

  endfor

  " The cursor is left on the first non-blank of the last formatted line.
  let lnum = a:lnum + (a:count - 1) + offset
  execute printf('keepjumps normal! %dG', lnum)
endfunction
'''

[[plugins]]
if = '!has("nvim")'
merged = 0
repo = 'thinca/vim-singleton'

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'
hook_add = '''
if !has('nvim')
au dein VimEnter * call nerdfont#find()
au dein VimEnter * let g:glyph_palette#palette = copy(g:glyph_palette#defaults#palette)
au dein VimEnter * let g:glyph_palette#palette['GlyphPaletteDirectory'] += ['','', '']
au dein VimEnter * call nerdfont#find('.')
endif
let g:glyph_palette#palette = copy(g:glyph_palette#defaults#palette)
let g:glyph_palette#palette['GlyphPaletteDirectory'] += ['','', '']
let g:nerdfont#directory#customs = {
    \ '': '',
    \ 'open': '',
    \ 'close': '',
    \ 'symlink': '',
    \}
let g:nerdfont#path#extension#customs = {
    \'txt' :  '',
    \'pdf' :  '',
    \'docx' :  '',
    \'doc' :  '',
    \'xlsx' :  '',
    \'xlsm' :  '',
    \'pptx' :  '',
    \'ppt' :  '',
    \'tex' :  '',
    \'zip': ''
    \}
augroup my-glyph-palette
  autocmd! *
  autocmd FileType ddu-ff,ddu-filer call glyph_palette#apply()
augroup END
'''

[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'

# [[plugins]]
# merged = 0
# repo = 'rbtnn/vim-ambiwidth'

# [[plugins]]
# repo = 'svermeulen/vim-macrobatics'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'lambdalisue/mr.vim'
hook_add = '''
let g:mr#threshold = 300
let g:mr_mrw_disabled = v:true
let g:mr_mrr_disabled = v:true
let g:mr#mru#exclude = '\(doc[\\\/].*txt\|COMMIT_EDITMSG\)'
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
hook_add = '''
"let g:asterisk#keeppos = 1
"map <silent> *  <Plug>(asterisk-*)
"map <silent> g* <Plug>(asterisk-g*)
"map <silent> #  <Plug>(asterisk-#)
"map <silent> g# <Plug>(asterisk-g#)
'''

[ftplugin]

typescript = '''
setlocal tabstop=2

'''
json = '''
setlocal conceallevel=0
'''
markdown = '''
inoremap <buffer><silent><expr> <C-d> getcurpos()[2] ==# 1 ? "- " :
    \ match(getline('.'), '^-\s') >=0 ? "<C-u>" : "\<C-d>"
inoremap <buffer><silent><expr> <C-t> getcurpos()[2] ==# 1 ? "- " : "\<C-t>"
nnoremap <buffer><silent><expr> o match(getline('.'), '\*\s') >=0 ? "o- " : "o"

setlocal comments=b:*,b:-,b:+,b:1.,nb:>
setlocal formatoptions-=c formatoptions+=jro
'''

json = '''
setlocal nowrap
nnoremap <buffer> <tab> f<TAB>
nnoremap <buffer> <S-tab> F<TAB>
'''

# vim:set foldmethod=marker:'
