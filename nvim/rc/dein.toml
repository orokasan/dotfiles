# [[plugin]]
# repo = 'Shougo/dein.vim'
# hook_add = '''
# augroup dein
#     autocmd!
# augroup END
# '''

[[plugins]]
repo =  'itchyny/lightline.vim'
hook_add = 'source ~/dotfiles/nvim/rc/config/lightline.rc.vim'

[[plugins]]
depends = ['lightline.vim', 'nvim-lspconfig']
on_source = ['nvim-lspconfig']
lazy = 1
if = 'has("nvim")'
repo = 'josa42/nvim-lightline-lsp'
hook_source = '''
    "autocmd DiagnosticChanged * call lightline#update()
    let g:lightline#lsp#indicator_warnings = ' '
    let g:lightline#lsp#indicator_errors = ' '
    let g:lightline#lsp#indicator_hints = ' '
    call lightline#lsp#register()
'''

[[plugins]]
repo = 'tyru/skkdict.vim'

# [[plugins]]
# repo =  'orokasan/jasegment.vim'
# hook_add = ''' "{{{
# let g:jasegment#model='knbc_bunsetu'
# let g:jasegment_no_default_key_mappings = 1
# let g:jasegment#highlight = 1
# nmap <silent> E <Plug>JaSegmentMoveNE
# nmap <silent> W <Plug>JaSegmentMoveNW
# nmap <silent> B <Plug>JaSegmentMoveNB
# xmap <silent> E <Plug>JaSegmentMoveVE
# xmap <silent> W <Plug>JaSegmentMoveVW
# xmap <silent> B <Plug>JaSegmentMoveVB
# "omap <silent><buffer> aW <Plug>JaSegmentTextObjA
# "omap <silent><buffer> iW <Plug>JaSegmentTextObjI
# "xmap <silent><buffer> aW <Plug>JaSegmentTextObjVA
# "xmap <silent><buffer> iW <Plug>JaSegmentTextObjVI
# '''# }}} 

# [[plugins]]
# repo =  'mengelbrecht/lightline-bufferline'
# depends = ['lightline.vim']

[[plugins]]
repo =  'itchyny/vim-gitbranch'
depends = ['lightline.vim']

 # [[plugins]]
 # repo = 'Shougo/context_filetype.vim'
 # lazy = 1
 # hook_add = '''
 # let g:context_filetype#search_offset = 100
# '''

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
autocmd dein ColorScheme iceberg call My_iceberg_highlight()
function! My_iceberg_highlight()
highlight! PmenuSel ctermbg=236 guibg=#3d425b
highlight! Pmenu  ctermfg=252 ctermbg=236 guifg=#c6c8d1 guibg=#272c42
highlight! NormalFloat ctermfg=252 ctermbg=236 guifg=#c6c8d1 guibg=#272c42
highlight! clear Search
highlight! link Search Title
highlight! link Conceal Title
highlight! link WinBarNC Comment
highlight! Underlined cterm=underline gui=underline guifg=NONE guisp=#84a0c6
highlight! PmenuSelected gui=bold guifg=#e2a478 guibg=#3d425b blend=0
highlight! link WhiteSpace Comment

highlight! link @text.diff.add DiffAdd
highlight! link @text.diff.change DiffChange
highlight! link @text.diff.delete DiffDelete
hi! GitsignsAdd guifg=#8a8a67 guibg=#1e2132
hi! GitsignsChange guifg=#54909c guibg=#1e2132
hi! GitSignsDelete guifg=#9c4848 guibg=#1e2132
"autocmd dein ColorScheme iceberg highlight! @punctuation.delimiter gui=bold guifg=#a093c7
"autocmd dein ColorScheme iceberg highlight! link @punctuation.special Comment
"autocmd dein ColorScheme iceberg highlight! link @text.uri String
endfunction
"autocmd dein ColorScheme iceberg highlight! clear CursorLine
"autocmd dein ColorScheme iceberg highlight! CursorLine gui=underline guisp=#c6c8d1
" autocmd dein ColorScheme iceberg highlight CursorLine guibg=#1e2132

" autocmd dein Colorscheme iceberg hi link TSInclude Special
" autocmd dein Colorscheme iceberg hi link TSProperty String

" autocmd dein Colorscheme iceberg hi link TSConstant Constant
" autocmd dein Colorscheme iceberg hi link TSConstructor Define
" autocmd dein Colorscheme iceberg hi link TSLavel Number
" autocmd dein Colorscheme iceberg hi link TSLabel Number
" autocmd dein Colorscheme iceberg hi link TSNamespace Number
" autocmd dein Colorscheme iceberg hi link TSOperator Number
" autocmd dein Colorscheme iceberg hi link TSKeyword Keyword
" autocmd dein Colorscheme iceberg hi link TSType Define
" autocmd dein Colorscheme iceberg hi link LspDiagnosticsUnderlineError Error
" autocmd dein Colorscheme iceberg hi link LspDiagnosticsUnderlineWarning Warning
'''

[[plugins]]
repo =  'kmnk/denite-dirmark'

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add = '''
hi! link ParenMatch MatchParen
'''

# [[plugins]]
# repo = 'glacambre/firenvim'
# if = 'has("nvim")'
# # hook_post_update = 'call firenvim#install(0)'
# hook_add = '''
# '''

# [[plugins]]
# repo = 'raghur/vim-ghost'

# [[plugins]]
# rtp = 'vim'
# merged = 0
# repo = 'soywod/himalaya'

[[plugins]]
repo = 'thinca/vim-jautil'

# [[plugins]]
# repo = 'junegunn/vim-easy-align'
# hook_add = '''
# vmap ga <Plug>(EasyAlign)
# nmap ga <Plug>(EasyAlign)
# '''

[[plugins]]
repo = 'https://github.com/vim-jp/autofmt'
# merged = 0
hook_add = '''
set formatexpr=autofmt#japanese#formatexpr()
set textwidth=42

set formatexpr=myfmt.format_normal_mode()

let s:compat = autofmt#compat#import()

let myfmt = {}
call extend(myfmt, s:compat)

function! myfmt.format_normal_mode(lnum, count) abort
  let self.textwidth = self.comp_textwidth(1)

  if self.textwidth == 0
    return
  endif

  let offset = 0

  let para = []
  call map(getline(a:lnum, a:lnum + a:count - 1),{ idx, val -> extend(para, [[idx, [val]]]) } )
  for [i, lines] in para
    let lnum = a:lnum + i + offset
    call setline(lnum, self.retab(getline(lnum)))

    let offset += self.format_lines(lnum, len(lines))

    if self.is_comment_enabled()
      " " * */" -> " */"
      let lnum = a:lnum + i + (len(lines) - 1) + offset
      let line = getline(lnum)
      let [indent, com_str, mindent, text, com_flags] = self.parse_leader(line)
      if com_flags =~# 'm'
        let [s, m, e] = self.find_three_piece_comments(&comments, com_flags, com_str)
        if text == e[1]
          let line = indent . e[1]
          call setline(lnum, line)
        endif
      endif
    endif

  endfor

  " The cursor is left on the first non-blank of the last formatted line.
  let lnum = a:lnum + (a:count - 1) + offset
  execute printf('keepjumps normal! %dG', lnum)
endfunction
'''

[[plugins]]
if = '!has("nvim")'
merged = 0
repo = 'thinca/vim-singleton'

[[plugins]]
repo = 'machakann/vim-colorscheme-snowtrek'

[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'

# [[plugins]]
# merged = 0
# repo = 'rbtnn/vim-ambiwidth'

# [[plugins]]
# repo = 'svermeulen/vim-macrobatics'


[[plugins]]
repo = 'lambdalisue/mr.vim'
hook_add = '''
let g:mr#threshold = 300
let g:mr_mrw_disabled = v:true
let g:mr_mrr_disabled = v:true
let g:mr#mru#predicates = [{ filename -> filename !~# '\(doc[\\\/].*txt\|COMMIT_EDITMSG\|mail.google.*\)' }]
'''

[[plugins]]
repo='Shougo/junkfile.vim'
hook_add = '''
nnoremap <silent> <C-T> <Cmd>tabnew<bar>JunkfileOpen txt<CR>
nnoremap <silent> g<C-T> <Cmd>JunkfileOpen<CR>
nnoremap <C-S> <Cmd>JunkfileOpen<CR>
'''

[ftplugin]
typescript = '''
setlocal tabstop=2
'''

json = '''
setlocal conceallevel=0
'''
markdown = '''
inoremap <buffer><silent><expr> <C-d> getcurpos()[2] ==# 1 ? "- " :
    \ match(getline('.'), '^-\s') >=0 ? "<C-u>" : "\<C-d>"
inoremap <buffer><silent><expr> <C-t> getcurpos()[2] ==# 1 ? "- " : "\<C-t>"
nnoremap <buffer><silent><expr> o match(getline('.'), '\*\s') >=0 ? "o- " : "o"
'''

tsv = '''
setlocal comments=b:*,b:-,b:+,b:1.,nb:>
setlocal formatoptions-=c formatoptions+=jro
setlocal nowrap
nnoremap <buffer> <tab> f<TAB>
nnoremap <buffer> <S-tab> F<TAB>
'''

txt = '''
setlocal textwidth=42
setlocal noexpandtab
'''

# [[plugins]]
# repo = 'rakr/vim-one'

# [[plugins]]
# merged = 0
# repo = 'simnalamburt/vim-mundo'
# vim:set foldmethod=marker:'
