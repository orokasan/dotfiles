[[plugins]]
# repo = 'orokasan/vim-lsp'
merged = 0
repo = 'prabirshrestha/vim-lsp'
# lazy = 1'
# on_ft = ['markdown', 'tex', 'python', 'go']
hook_add = '''
let g:lsp_highlight_references_enabled = 1
" let lsp_log_verbose = 1
" let lsp_log_file = 'C:\Users\t_kuriki\temp\lsp.log'
let g:lsp_auto_enable = 0
let s:pyls_config = {'pyls': {'plugins': {
    \   'pycodestyle': {'enabled': v:true},
    \   'pydocstyle': {'enabled': v:false},
    \   'pylint': {'enabled': v:false},
    \   'flake8': {'enabled': v:true},
    \   'jedi_definition': {
    \     'follow_imports': v:true,
    \     'follow_builtin_imports': v:true,
    \   },
    \ }
    \ }
    \}
autocmd dein BufAdd * call lsp#enable()
function! s:lsp_local_setting()
    " setlocal omnifunc=lsp#complete
    nmap <buffer> <C-]> <plug>(lsp-definition)
    nmap <buffer> gd <plug>(lsp-declaration)
    nmap <buffer> <C-x> <plug>(lsp-signature_help)
    nmap <buffer> ,n <plug>(lsp-next-error)
    nmap <buffer> ,p <plug>(lsp-previous-error)
    nmap <buffer> sa <plug>(lsp-document-diagnostics)

    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <Plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <Plug>(lsp-next-diagnostic)
    nmap <buffer> ,, <Plug>(lsp-document-diagnostics)
    if &ft !=# 'vim'
    nmap <buffer> K <plug>(lsp-hover)
    endif
    
    call lsp#enable()
endfunction
function! s:lsp_setup()
    let g:lsp_auto_enable = 1
    let g:lsp_insert_text_enabled = 1
    let g:lsp_virtual_text_enabled = 1
    let g:lsp_diagnostics_enabled = 1
    let g:lsp_highlights_enabled = 1
    let g:lsp_diagnostics_echo_cursor = 1
    let g:lsp_semantic_enabled = 1
    let g:lsp_signs_enabled = 1
    " let g:lsp_diagnostics_float_cursor = 1
    let g:lsp_signs_error = {'text': ''}
    let g:lsp_signs_warning = {'text': ''}
    let g:lsp_signs_information = {'text': '!'}
    let g:lsp_signs_hint = {'text': '?'}
    let g:lsp_virtual_text_prefix = "■ "
endfunction

let s:efm_config_path = '-c=' .. expand('~/.config/efm-langserver/config.yaml')
" let s:efm_config_path = '-c=' .. expand('~\AppData\Roaming\efm-langserver\config.yaml')
let s:efm_log_path = '-log=' .. expand('~/efmlog')
augroup VimLsp
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:lsp_local_setting()
    autocmd User lsp_setup call s:lsp_setup()
    " if executable('pyls')
    "     " pip install python-language-server
    "     au User lsp_setup call lsp#register_server({
    "         \ 'name': 'pyls',
    "         \ 'cmd': {server_info->['pyls']},
    "         \ 'whitelist': ['python'],
    "         \ 'workspace_config': {}
    "         \ })
        " autocmd vimrc BufWrite *.py call execute('LspDocumentFormatSync', 'silent')
    if executable('jedi-language-server')
        " pip install python-language-server
        au User lsp_setup call lsp#register_server({
            \ 'name': 'jedi-language-server',
            \ 'cmd': {server_info->['jedi-language-server']},
            \ 'whitelist': ['python'],
            \ 'workspace_config': {}
            \ })
    endif
    if executable('vim-language-server')
        au User lsp_setup call lsp#register_server({
            \ 'name': 'vimls',
            \ 'cmd': {server_info->['npx','vim-language-server','--stdio']},
            \ 'whitelist': ['vim'],
            \ 'initialization_options': { 'vimruntime': $VIMRUNTIME, 'runtimepath': &rtp },
            \ })
    endif
    if executable('texlab')
       au User lsp_setup call lsp#register_server({
          \ 'name': 'texlab',
          \ 'cmd': {server_info->['texlab']},
          \ 'whitelist': ['tex', 'bib', 'sty'],
          \ 'workspace_config': { 'texlab':{
          \ 'trace':{ 'server':'verbose' }
          \ }},
          \ })
    endif
    if executable('gopls')
        autocmd User lsp_setup call lsp#register_server({
            \ 'name': 'go-lang',
            \ 'cmd': {server_info->['gopls']},
            \ 'whitelist': ['go'],
            \ 'workspace_config': {'gopls': {
            \     'watchFileChanges': v:true,
            \     'completeUnimported': v:true,
            \     'caseSensitiveCompletion': v:true,
            \     'hoverKind': 'SynopsisDocumentation',
            \     'usePlaceholders': v:true,
            \     'deepCompletion': v:true,
            \     'completionDocumentation': v:true,
            \   }},
            \ })
    endif
    if executable('efm-langserver')
    autocmd User lsp_setup call lsp#register_server({
      \ 'name': 'efm-langserver',
      \ 'cmd': {server_info->['efm-langserver']},
      \ 'whitelist': ['tex','eruby', 'markdown', 'yaml', 'text'],
      \ })
    endif
augroup END

autocmd vimrc ColorScheme * highlight link PopupWindow DiffText
	augroup lsp_float_colours
	    autocmd!
	    if !has('nvim')
		autocmd User lsp_float_opened
		    \ call win_execute(lsp#ui#vim#output#getpreviewwinid(),
		    \		       'setlocal wincolor=PopupWindow')
	    else
		autocmd User lsp_float_opened
		    \ call nvim_win_set_option(
		    \   lsp#ui#vim#output#getpreviewwinid(),
		    \   'winhighlight', 'Normal:PopupWindow')
	    endif
	augroup end
''' # }}}

# [[plugins]]
# repo = 'prabirshrestha/async.vim'

# [[plugins]]
# on_if = '!has("nvim")'
# depends = ['asyncomplete.vim', 'vim-lsp']
# repo = 'prabirshrestha/asyncomplete-lsp.vim'

# [[plugins]]
# repo = 'hrsh7th/vim-vsnip'
# lazy = '1'
# on_source = ['deoplete.nvim']
# depends = ['vim-lsp']
# hook_add = '''
# imap <expr> <C-k>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-k>'
# smap <expr> <C-k>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-k>'
# imap <expr> <Tab>   vsnip#available(1)  ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
# smap <expr> <Tab>   vsnip#available(1)  ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
# imap <expr> <S-Tab> vsnip#available(-1) ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
# smap <expr> <S-Tab> vsnip#available(-1) ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
# '''

# [[plugins]]
# lazy = '1'
# on_source = ['deoplete.nvim']
# depends = ['vim-lsp']
# repo = 'hrsh7th/vim-vsnip-integ'

# [[plugins]]
# repo = 'microsoft/vscode-python'
# merged = '0'

# [[plugins]]
# repo = 'microsoft/vscode-go'
# merged = '0'

[[plugins]]
lazy = 1'
on_source = ['deoplete.nvim']
repo = 'thomasfaingnaert/vim-lsp-snippets'

[[plugins]]
lazy = 1'
on_source = ['deoplete.nvim']
repo = 'thomasfaingnaert/vim-lsp-neosnippet'

# [[plugins]]
# # on_if = '!has("nvim")'
# merged = '0'
[[plugins]]
on_if = 'has("windows")'
merged = '0'
repo = 'mattn/vim-lsp-settings'

[[plugins]]
lazy = '1'
on_source = ['deoplete.nvim']
depends = ['vim-lsp']
repo = 'lighttiger2505/deoplete-vim-lsp'
hook_source ='''
call deoplete#custom#option('sources', {
    \ 'python': ['lsp','eskk','neosnippet', 'buffer'],
    \ 'go': ['lsp','eskk','neosnippet', 'buffer'],
    \ 'tex' :['lsp','eskk','look','neosnippet', 'buffer'],
    \ })
'''

[[plugins]]
lazy = '1'
repo =  'Shougo/neosnippet'
on_event = 'InsertEnter'
on_ft = 'snippet'
hook_source = '''
let g:neosnippet#disable_runtime_snippets = {
\   '_' : 1,
\ }
let g:neosnippet#enable_completed_snippet = 1
let g:neosnippet#enable_complete_done = 1
if has('conceal')
    set conceallevel=2 concealcursor=niv
endif
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
" imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''

# repo = 'prabirshrestha/asyncomplete-lsp.vim'
