[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
lazy = 1
depends = ['context_filetype.vim', 'denops.vim']
on_event = ['InsertEnter', 'CmdlineEnter']
hook_source = '''
" Use around source.
" https://github.com/Shougo/ddc-around
" Use matcher_head and sorter_rank.
" https://github.com/Shougo/ddc-matcher_head
" https://github.com/Shougo/ddc-sorter_rank

call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
          \ 'matchers': ['matcher_fuzzy'],
          \  'sorters': ['sorter_fuzzy'],
          \   'converters': ['converter_remove_overlap', 'converter_truncate'],
          \ 'ignoreCase': v:true,
          \ },
      \ 'skkeleton': {'mark': 'skk', 'matchers': ['skkeleton'], 'sorters': []},
      \ })

call ddc#custom#patch_global('sourceOptions', {
      \ 'nvim-lsp': {
      \   'mark': 'lsp',
      \   'forceCompletionPattern': '\.\w*|:\w*|->\w*' },
      \ })
" Change source options

call ddc#custom#patch_global('sourceOptions', {
      \ 'around': {'mark': 'A'},
      \ 'buffer': {'mark': 'B'},
      \ })

call ddc#custom#patch_global('sourceParams', {
    \ 'buffer': {'requireSameFiletype': v:false,
            \ 'fromAltBuf': v:true},
    \ })
call ddc#custom#patch_global('sourceParams', {
      \ 'around': {'maxSize': 500},
      \ })


" Customize settings on a filetype
call ddc#custom#patch_global('sources', [
\'nvim-lsp',
\ 'deoppet',
\ 'file',
\ 'buffer',
\ 'around',
\ 'skkeleton',
\ ])
" if dein#tap('pum.vim')
" call ddc#custom#patch_global({
" \ 'completionMenu': 'pum.vim',
" \ })
" endif
" inoremap <silent><expr> <C-h> <SID>ddc_smart_close_popup()."\<C-h>"
" inoremap <silent><expr> <BS> <SID>ddc_smart_close_popup()."\<BS>"
" function! s:ddc_smart_close_popup() abort
"   return pumvisible()  ? "\<C-e>" : ''
" endfunction
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>

function! s:my_cr_function() abort "{{{
  return pumvisible()  ? "\<CR>": lexima#expand('<CR>', 'i')
endfunction

inoremap <silent> <BS> <C-r>=<SID>my_bs_function()<CR>
inoremap <silent> <C-h> <C-r>=<SID>my_bs_function()<CR>

function! s:my_bs_function() abort "{{{
  return lexima#expand('<BS>', 'i')
endfunction "}}}

" <TAB>: completion.
inoremap <silent><expr> <TAB> pumvisible()  ? "\<C-n>" : lexima#expand('<TAB>', 'i')
inoremap <silent><expr> <S-TAB>
\ pumvisible()  ? "\<C-p>" :
\ "\<BS>"

call ddc#custom#patch_global('filterParams', {
      \ 'converter_truncate': {'maxMenuWidth': 35},
      \ })
call ddc#custom#patch_global('sourceOptions', {
    \ 'file': {
    \   'mark': 'F',
    \   'isVolatile': v:true,
    \ 'minAutoCompleteLength': 3,
    \   'forceCompletionPattern': '/\S*',
    \ }})
call ddc#custom#patch_global('sourceParams', {
      \ 'file': {
        \   'trailingSlashAbbr': v:true,
        \ }})

call ddc#custom#patch_filetype(
    \ ['ps1', 'dosbatch', 'autohotkey', 'registry'], {
    \ 'sourceOptions': {
    \   'file': {
    \     'forceCompletionPattern': '\S\\\S*',
    \   },
    \ },
    \ 'sourceParams': {
    \   'file': {
    \     'mode': 'win32',
    \   },
    \ }})

" call ddc#custom#patch_global('autoCompleteEvents', [
"     \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
"     \ 'CmdlineEnter', 'CmdlineChanged',
"     \ ])
" 
" nnoremap :       <Cmd>call CommandlinePre()<CR>:
" 
" function! CommandlinePre() abort
"   " Note: It disables default command line completion!
"   cnoremap <expr> <Tab>
"   \ pumvisible()  ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
"   \ ddc#manual_complete()
"   cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
"   cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
"   cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
" 
"   " Overwrite sources
"   let s:prev_buffer_config = ddc#custom#get_buffer()
"   call ddc#custom#patch_buffer('sources',
"           \ ['file', 'cmdline', 'necovim', ])
" call ddc#custom#patch_buffer('sourceOptions', {
"       \ '_': {
"           \ 'matchers': ['matcher_length', 'matcher_fuzzy'],
"           \ 'sorters': [],
"           \ },
"     \})
" 
"   autocmd User DDCCmdlineLeave ++once call CommandlinePost()
" 
"   " Enable command line completion
"   call ddc#enable_cmdline_completion()
"   call ddc#enable()
" endfunction
" function! CommandlinePost() abort
"   " Restore sources
"   call ddc#custom#set_buffer(s:prev_buffer_config)
"   cunmap <Tab>
" endfunction
" 
call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = ['ddc.vim']

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = ['ddc.vim']

# [[plugins]]
# repo = 'matsui54/ddc-matcher_fuzzy'
# on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = ['ddc.vim']

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = ['ddc.vim']
# [[plugins]]
# repo =  'Shougo/deoplete.nvim'
# # on_if = 'has("nvim")'
# on_event = 'InsertEnter'
# hook_source = 'source ~/dotfiles/nvim/rc/config/deoplete.rc.vim'
[[plugins]]
repo = 'Shougo/deoppet.nvim'
on_source = ['ddc.vim']

[[plugins]]
repo = 'kuuote/denops-skkeleton.vim'
# repo = 'orokasan/denops-skkeleton.vim'
lazy = 1
on_event = ['InsertEnter','CmdlineEnter']
depends = ['denops.vim']
hook_source = '''
call skkeleton#config({
    \ 'globalJisyo': expand('~/.skk/SKK-JISYO.L'),
    \ 'userJisyo': expand('~/.skk/.skk-jisyo'),
    \ 'eggLikeNewline': v:true,
    \ 'registerConvertResult': v:true,
    \ 'showCandidatesCount': 3,
    \ 'immediatelyCancel': v:false,
    \ 'keepState': v:true,
    \})

" \ 'completionRankFile': expand('~/temp/.skkeleton'),
call skkeleton#register_kanatable('rom', {
    \ '\<C-w>': 'deleteChar',
       \ "z\<Space>": ["\u3000", ''],
	\ 'va': ['ゔぁ', ''],
	\ 'vi': ['ゔぃ', ''],
	\ 'vu': ['ゔ', ''],
	\ 've': ['ゔぇ', ''],
	\ 'vo': ['ゔぉ', ''],
	\ 'ca': ['か', ''],
	\ 'ci': ['し', ''],
	\ 'cu': ['く', ''],
	\ 'ce': ['せ', ''],
	\ 'co': ['こ', ''],
	\ 'xn': ['ん', ''],
	\ '~': ['〜', ''],
	\ 'zk': ['■', ''],
	\ 'zm': ['●', ''],
	\ 'zss': ['▼', ''],
	\ 'zsu': ['▲', ''],
	\ 'zds': ['◇', ''],
	\ 'zdk': ['◆', ''],
	\ 'z1': ['１', ''],
	\ 'z2': ['２', ''],
	\ 'z3': ['３', ''],
	\ 'z4': ['４', ''],
	\ 'z5': ['５', ''],
	\ 'z6': ['６', ''],
	\ 'z7': ['７', ''],
	\ 'z8': ['８', ''],
	\ 'z9': ['９', ''],
	\ 'z0': ['０', ''],
	\ 'zz0': ['⓪ ', ''],
	\ 'zz1': ['①', ''],
	\ 'zz2': ['②', ''],
	\ 'zz3': ['③', ''],
	\ 'zz4': ['④', ''],
	\ 'zz5': ['⑤', ''],
	\ 'zz6': ['⑥', ''],
	\ 'zz7': ['⑦', ''],
	\ 'zz8': ['⑧', ''],
	\ 'zz9': ['⑨', ''],
	\ 'z-': ['-', ''],
	\ 'z(': ['（', ''],
	\ 'z)': ['）', ''],
	\ 'zz{': ['【', ''],
	\ 'zz}': ['】', ''],
	\ 'z%': ['％', ''],
	\ 'z.': ['…', ''],
	\ 'z/': ['・', ''],
	\ 'z,': ['●', ''],
      \ })
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-enable)
autocmd vimrc User skkeleton-enable-post call s:highlight_imesign_on()
autocmd vimrc User skkeleton-disable-post call s:highlight_imesign_off()

function! s:highlight_imesign_off()
if mode() is# 'c' | return | endif
    call sign_unplace('Ins',{'id': 15})
endfunction

function! s:insert_highlight() abort
    call sign_unplace('Ins')
    if skkeleton#is_enabled()
        call sign_place( 15,'Ins','InEskkKana','%',{'lnum':line('.')} )
    else
        call sign_place( 10,'Ins','InInsert','%',{'lnum':line('.')} )
    endif
endfunction

let s:insertpos = 0

au vimrc InsertEnter * let s:insertpos = line('.') | call s:insert_highlight()
au vimrc CursorMovedI * if s:insertpos != line('.') | call s:insert_highlight() | let s:insertpos = line('.') | endif
if has('nvim')
    au vimrc InsertLeavePre * call sign_unplace('Ins')
else
    au vimrc InsertLeave * call sign_unplace('Ins')
endif

function! s:highlight_imesign_on()
    if mode() is# 'c' | return | endif
    call sign_place( 15,'Ins','InEskkKana','%',{'lnum':line('.')} )
endfunction
" au InsertLeave * call sign_unplace('Ins')
let s:insert_icon = '▶'
hi InInsertSign gui=bold guifg=#84a0c6
hi InEskkKanaSign gui=bold guifg=#e2a478
call sign_define('InInsert',{'text':s:insert_icon,'texthl':'InInsertSign' ,'priority': 50 })
call sign_define('InEskkKana',{'text':s:insert_icon,'texthl':'InEskkKanaSign', 'priority': 50 })
call sign_define('InEskkKat',{'text':s:insert_icon,'texthl':"Constant" ,'priority': 51 })
'''

[[plugins]]
repo = 'LumaKernel/ddc-file'

# [[plugins]]
# repo = 'Shougo/pum.vim'
# on_event = 'InsertEnter'
# hook_source = '''
# inoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
# inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
# inoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
# inoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
# inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
# inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
# inoremap <PageDown> <Cmd>call pum#map#insert_relative_page(+1)<CR>
# inoremap <PageUp>   <Cmd>call pum#map#insert_relative_page(-1)<CR>
# '''

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = ['ddc.vim']

[[plugins]]
repo = 'matsui54/ddc-converter_truncate'
