
# [[plugins]]
# repo = 'prabirshrestha/vim-lsp'
# hook_add = ''' " {{{
# let s:pyls_config = {'pyls': {'plugins': {
#     \   'pycodestyle': {'enabled': v:true},
#     \   'pydocstyle': {'enabled': v:false},
#     \   'pylint': {'enabled': v:false},
#     \   'flake8': {'enabled': v:true},
#     \   'jedi_definition': {
#     \     'follow_imports': v:true,
#     \     'follow_builtin_imports': v:true,
#     \   },
#     \ 
# if executable('pyls')
#     " pip install python-language-server
#     au User lsp_setup call lsp#register_server({
#         \ 'name': 'pyls',
#         \ 'cmd': {server_info->['pyls']},
#         \ 'whitelist': ['python'],
#         \ })
#     autocmd vimrc BufWrite *.py call execute('LspDocumentFormatSync', 'silent')
# endif
# if executable('texlab')
#    au User lsp_setup call lsp#register_server({
#       \ 'name': 'texlab',
#       \ 'cmd': {server_info->['texlab']},
#       \ 'whitelist': ['tex', 'bib', 'sty'],
#       \ })
# endif
# if executable('gopls')
#   augroup LspGo
#     au!
#     autocmd User lsp_setup call lsp#register_server({
#         \ 'name': 'go-lang',
#         \ 'cmd': {server_info->['gopls']},
#         \ 'whitelist': ['go'],
#         \ 'workspace_config': {'gopls': {
#         \     'watchFileChanges': v:true,
#         \     'completeUnimported': v:true,
#         \     'caseSensitiveCompletion': v:true,
#         \     'hoverKind': 'SynopsisDocumentation',
#         \     'usePlaceholders': v:true,
#         \     'deepCompletion': v:true,
#         \     'completionDocumentation': v:true,
#         \   }},
#         \ })
#   augroup END
# endif
# let s:efm_config_path = '-c=' .. expand('~/.config/efm-langserver/config.yaml')
# augroup LspEFM
#   au!
#   autocmd User lsp_setup call lsp#register_server({
#       \ 'name': 'efm-langserver',
#       \ 'cmd': {server_info->['efm-langserver', s:efm_config_path]},
#       \ 'whitelist': ['eruby', 'markdown', 'yaml'],
#       \ })
# augroup END

# function! s:lsp_local_setting()
#     " setlocal omnifunc=lsp#complete
#     nmap <buffer> <C-]> <plug>(lsp-definition)
#     nmap <buffer> gd <plug>(lsp-declaration)
#     nmap <buffer> K <plug>(lsp-hover)
#     nmap <buffer> <C-k> <plug>(lsp-signature_help)
#     nmap <buffer> ,n <plug>(lsp-next-error)
#     nmap <buffer> ,p <plug>(lsp-previous-error)
#     nmap <buffer> sa <plug>(lsp-document-diagnostics)
# endfunction

# augroup lsp_install
#     au!
#     " call s:on_lsp_buffer_enabled only for languages that has the server registered.
#     autocmd User lsp_buffer_enabled call s:lsp_local_setting()
# augroup END

# function! s:lsp_setup()
#     let g:lsp_auto_enable = 1
#     " let g:lsp_insert_text_enabled = 1
#     let g:lsp_virtual_text_enabled = 0
#     let g:lsp_diagnostics_enabled = 1
#     let g:lsp_highlights_enabled = 0
#     let g:lsp_diagnostics_echo_cursor = 1
#     let g:lsp_semantic_enabled = 0
#     let g:lsp_signs_enabled = 1
#     let g:lsp_signs_error = {'text': ''}
#     let g:lsp_signs_warning = {'text': ''}
#     let g:lsp_signs_information = {'text': '!'}
#     let g:lsp_signs_hint = {'text': '?'}
# endfunction

# augroup vimrc_lsp_icons
#   au!
#   autocmd User lsp_setup call s:lsp_setup()
# augroup END

# autocmd vimrc ColorScheme * highlight link PopupWindow DiffText
# 	augroup lsp_float_colours
# 	    autocmd!
# 	    if !has('nvim')
# 		autocmd User lsp_float_opened
# 		    \ call win_execute(lsp#ui#vim#output#getpreviewwinid(),
# 		    \		       'setlocal wincolor=PopupWindow')
# 	    else
# 		autocmd User lsp_float_opened
# 		    \ call nvim_win_set_option(
# 		    \   lsp#ui#vim#output#getpreviewwinid(),
# 		    \   'winhighlight', 'Normal:PopupWindow')
# 	    endif
# 	augroup end
# ''' # }}}

[[plugins]]
repo = 'prabirshrestha/async.vim'

# [[plugins]]
# repo = 'hrsh7th/vim-vsnip'
# hook_add = '''
# imap <expr> <C-k>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-k>'
# smap <expr> <C-k>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-k>'
# imap <expr> <Tab>   vsnip#available(1)  ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
# smap <expr> <Tab>   vsnip#available(1)  ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
# imap <expr> <S-Tab> vsnip#available(-1) ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
# smap <expr> <S-Tab> vsnip#available(-1) ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
# '''

# [[plugins]]
# repo = 'hrsh7th/vim-vsnip-integ'

# [[plugins]]
# repo = 'microsoft/vscode-python'
# merged = '0'

# [[plugins]]
# repo = 'microsoft/vscode-go'
# merged = '0'

[[plugins]]
merged = '0'
repo = 'thomasfaingnaert/vim-lsp-snippets'

[[plugins]]
merged = '0'
repo = 'thomasfaingnaert/vim-lsp-neosnippet'

# [[plugins]]
# # on_if = '!has("nvim")'
# merged = '0'
# repo = 'prabirshrestha/asyncomplete.vim'

# rev= 'next',
# build = 'bash install.sh'

# [[plugins]]
# on_source = ['deoplete.nvim']
# depends = ['vim-lsp']
# repo = 'lighttiger2505/deoplete-vim-lsp'
# repo = 'prabirshrestha/asyncomplete-lsp.vim'
