[[plugins]]
repo = 'neovim/nvim-lsp'
hook_add = '''
" can't load nvim-lsp modules when it is not merged in dein repo.
" so set rtp manually.
lua << EOF
local nvim_lsp = require'nvim_lsp'
local configs = require'nvim_lsp/configs'

local util = require 'nvim_lsp/util'

local server_name = "efm_ls"
local bin_name = "efm-langserver"

configs[server_name] = {
  default_config = {
    cmd = {bin_name};
      root_dir = function(fname)
        return nvim_lsp.util.find_git_ancestor(fname) or vim.loop.os_homedir()
      end;
  };
}
nvim_lsp.efm_ls.setup{}

vim.api.nvim_set_var("enable_nvim_lsp_diagnostics", true)

require'nvim_lsp'.gopls.setup{
    capabilities = {
      textDocument = {
        completion = {
            completionItem = {
            snippetSupport = true
          }
        }
      }
    },
    init_options = {
      usePlaceholders=true;
      linkTarget="pkg.go.dev";
      completionDocumentation=true;
      completeUnimported=true;
      deepCompletion=true;
      fuzzyMatching=true;
    };
  }

require'nvim_lsp'.texlab.setup{}
    -- settings = {
    --   latex = {
    --     build = {
    --       executable = "latexmk";
    --       args = {"uplatex", "-kanji=utf-8", "-halt-on-error", "-synctex=1", "-interaction=nonstopmode", "-file-line-error"};
    --       onSave = false;
    --         };
    --     };
    -- };
-- }

-- require'nvim_lsp'.pyls_ms.setup{}
require'nvim_lsp'.pyls.setup{}
-- require'nvim_lsp'.sumneko_lua.setup{}
-- require'nvim_lsp'.vimls.setup{}


do
  local method = 'textDocument/publishDiagnostics'
  local default_callback = vim.lsp.callbacks[method]
  vim.lsp.callbacks[method] = function(err, method, result, client_id)
    default_callback(err, method, result, client_id)
    if result and result.diagnostics then
      for _, v in ipairs(result.diagnostics) do
        v.uri = v.uri or result.uri
      end
      vim.lsp.util.set_loclist(result.diagnostics)
    end
  end
end

EOF

"lsp.txtそのまま
"set omnifunc=v:lua.vim.lsp.omnifunc
nnoremap <silent> <c-]>      <cmd>lua vim.lsp.buf.definition()<CR>
" nnoremap <silent> <c-k>      <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> <c-k>          <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gd         <cmd>lua vim.lsp.buf.declaration()<CR>
nnoremap <silent> gD         <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> 1gD        <cmd>lua vim.lsp.buf.type_definition()<CR>
nnoremap <silent><Leader>fmt <cmd>lua vim.lsp.buf.formatting()<CR>
nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent> g0    <cmd>lua vim.lsp.buf.document_symbol()<CR>
nnoremap <silent> <C-k> <cmd>lua vim.lsp.util.show_line_diagnostics()<CR>
"let g:tex_flavor = "latex"
"set updatetime=1000
"function! s:vimenter() abort
""augroup nvim_lsp
"au!
"autocmd CursorHold <buffer> lua vim.lsp.util.show_line_diagnostics()
"autocmd CursorHoldI <buffer> lua vim.lsp.util.show_line_diagnostics()
"autocmd CursorMoved <buffer> lua vim.lsp.util.show_line_diagnostics()
"autocmd CursorMovedI <buffer> lua vim.lsp.util.show_line_diagnostics()
"endfunction
"autocmd dein BufEnter * call s:vimenter()
sign define LspDiagnosticsErrorSign text= texthl=LspDiagnosticsError linehl= numhl=
sign define LspDiagnosticsWarningSign text= texthl=LspDiagnosticsWarning linehl= numhl=
sign define LspDiagnosticsInformationSign text=! texthl=LspDiagnosticsInformation linehl= numhl=
sign define LspDiagnosticsHintSign text=? texthl=LspDiagnosticsHint linehl= numhl=

autocmd ColorScheme * highlight LspReferenceText guifg=Red
autocmd ColorScheme * highlight LspReferenceWrite guifg=Red
autocmd ColorScheme * highlight LspReferenceRead guifg=Red
autocmd ColorScheme * highlight LspDiagnosticsError guifg=Red
autocmd ColorScheme * highlight LspDiagnosticsWarning guifg=Green
autocmd ColorScheme * highlight LspDiagnosticsUnderline guifg=Magenta
'''

[[plugins]]
# lazy = '1'
repo = 'hrsh7th/vim-vsnip'
# on_source = ['deoplete.nvim']
hook_add = '''
imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
imap <expr> <Tab>   pumvisible() ? "\<C-n>" : vsnip#available(1)  ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
smap <expr> <Tab>   vsnip#available(1)  ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
imap <expr> <S-Tab> pumvisible() ? "\<C-p>" : vsnip#available(-1) ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab> vsnip#available(-1) ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
'''

[[plugins]]
lazy = '1'
on_source = ['deoplete.nvim']
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'Shougo/deoplete-lsp'
hook_add = '''
'''
