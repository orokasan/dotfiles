[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = ['nvim-lspconfig']

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = ['nvim-lspconfig']

[[plugins]]
on_event = ['BufRead','BufNew']
repo = 'neovim/nvim-lspconfig'
# depend = ['mason.nvim', 'mason-lspconfig.nvim']
# plugins = ['mason.nvim', 'mason-lspconfig.nvim', 'nvim-lspconfig']
hook_post_source = '''
let s:lsptoggle_switch = v:false
let s:bufnr = 0
command! -nargs=? -complete=command LspToggle call s:lspdefinetoggleaucmd()
function! s:lspdefinetoggleaucmd() abort
    if s:bufnr != bufnr('%')
      let s:lsptoggle_switch = v:false
      let s:bufnr = bufnr('%')
    endif
    if !s:lsptoggle_switch
        let s:lsptoggle_switch = v:true
        augroup lsptoggle
            au!
            au BufEnter * LspStop
        augroup END
        edit %
        echom "Lsp OFF"
    else
        augroup lsptoggle
            au!
        augroup END
        LspStart
        let s:lsptoggle_switch = v:false
        echom "Lsp ON"
    endif
endfunction
lua require("lsp_rc")
'''

# [[plugins]]
# repo = 'nvim-lua/popup.nvim'
# on_lua = 'popup'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
on_lua = ["plenary"]


[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
on_event = ["BufRead"]
hook_add = '''
'''
lua_source = '''
require("ibl").setup {
    indent = { highlight = highlight, char = "┊" },
    exclude = {
      buftypes = {'defx', 'denite', 'denite-filter','fern', 'help','voomtree','ddu-ff', 'toml','markdown'}
    },
    scope = {
      enabled = true,
    },
  }
'''

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
on_cmd = ['ColorizerToggle']

# [[plugins]]
# repo = 'bfredl/nvim-miniyank'
# on_map = {nxo = '<Plug>(miniyank-'}
# on_event = ["FocusLost"]
# hook_add = '''
# let g:miniyank_maxitems = 100
# map p <Plug>(miniyank-autoput)
# map P <Plug>(miniyank-autoPut)
# map <leader>n <Plug>(miniyank-cycle)
# map <leader>N <Plug>(miniyank-cycleback)
# " doesnt work
# " map <Leader>pc <Plug>(miniyank-tochar)
# " map <Leader>pl <Plug>(miniyank-toline)
# " map <Leader>pb <Plug>(miniyank-toblock)
# function! To_miniyank_on_focused() abort
#     let data = {}
#     let data = {
# 		\ 'regcontents': [getreg('*')],
# 		\ 'visual': v:false,
# 		\ 'inclusive': v:false,
# 		\ 'regname': '',
# 		\ 'operator': 'y',
# 		\ 'regtype': 'V',
# 		\ }
#     call miniyank#on_yank(data)
# endfunction
# au dein FocusGained * call To_miniyank_on_focused()
# '''

[[plugins]]
lazy = 0
repo = 'gbprod/yanky.nvim'
# on_event = ['BufRead','BufNew']
lua_add = '''
-- Lua
vim.keymap.set({"n","x"}, "p", "<Plug>(YankyPutAfter)")
vim.keymap.set({"n","x"}, "P", "<Plug>(YankyPutBefore)")
vim.keymap.set({"n","x"}, "gp", "<Plug>(YankyGPutAfter)")
vim.keymap.set({"n","x"}, "gP", "<Plug>(YankyGPutBefore)")
vim.keymap.set("n", "<Leader>pl", "<Plug>(YankyPutIndentAfterLinewise)")
vim.keymap.set("n", "<Leader>pc", "<Plug>(YankyPutIndentAfterCharwise)")
vim.keymap.set("n", "<Leader>Pl", "<Plug>(YankyPutIndentBeforeLinewise)")
vim.keymap.set("n", "<Leader>Pc", "<Plug>(YankyPutIndentBeforeCharwise)")
require("yanky").setup({
  ring = {
    history_length = 100,
    storage = "shada",
    sync_with_numbered_registers = true,
    cancel_event = "update",
    ignore_registers = { "_" },
  },
  system_clipboard = {
    sync_with_ring = true,
  },
  highlight = {
    on_put = false,
    on_yank = false,
    timer = 500,
  },
})
'''

# [[plugins]]
# repo = "sindrets/diffview.nvim"

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
lazy = 0
# frozen = 1
# on_event = ['BufRead','BufNew']
lua_add = '''
vim.opt.runtimepath:prepend(vim.fn.stdpath("data") .. '/site' )
require 'nvim-treesitter.configs'.setup {
  ensure_installed = { "c", "lua", "vim", "vimdoc", "query", "markdown", "markdown_inline" },
  parser_install_dir = vim.fn.stdpath("data") .. '/site',
-- tree_docs = { enable = false },
    -- [options]
  highlight = {
    enable = true,
    additional_vim_regex_highlighting = { "php" },
    disable = { "cpp", "toml", "help","vimdoc", "python", "gitcommit"},
  },
  indent = {
    enable = true
  },
}
''''
lua_post_source= '''
'''

# [[plugins]]
# repo = 'nvim-lua/lsp-status.nvim'

# [[plugins]]
# repo = 'delphinus/hop.nvim'
# rev = 'feature/migemo'
# on_cmd = ["HopChar2"]
# hook_add = '''
# nnoremap  sa :HopChar2<CR>
# "highlight! clear HopUnmatched
# "highlight! HopNextKey1 gui=bold guifg=#ff007c guibg=#c6c8d1
# "highlight! HopNextKey2 gui=bold guifg=#2b8db3 guibg=#c6c8d1
# "highlight! HopNextKey gui=bold guifg=#ff007c guibg=#c6c8d1
# '''
# lua_source = '''
# require 'hop'.setup {
#   use_migemo = true;
#   migemo_dict = vim.g.migemo_dict;
#   migemo_debug = false;
# }
# '''

[[plugins]]
repo = 'kevinhwang91/nvim-hlslens'
on_lua = ['hlslens']
hook_add = '''
hi! default link HlSearchNear Title
hi! default link HlSearchLens Function
hi! default link HlSearchLensNear Constant
au dein ColorScheme * hi! default link HlSearchNear Title
au dein ColorScheme * hi! default link HlSearchLens Function
au dein ColorScheme * hi! default link HlSearchLensNear Constant
'''
lua_source = '''
if vim.call('has','mac') == 0 then
require('hlslens').setup({
  calm_down = true,
  nearest_only = true,
  nearest_float_when = 'auto',
})
end
'''
[[plugins]]
on_cmd = ["Linediff"]
repo = 'AndrewRadev/linediff.vim'

[[plugins]]
on_event = ['CmdlineEnter']
repo = 'yutkat/history-ignore.vim'
lua_source = '''
require('history-ignore').setup{}
'''

[[plugins]]
on_source = ['nvim-treesitter']
repo = 'nvim-treesitter/nvim-treesitter-context'
lua_source = '''
require'treesitter-context'.setup{
  enable = true, -- Enable this plugin (Can be enabled/disabled later via commands)
  multiwindow = false, -- Enable multiwindow support.
  max_lines = 0, -- How many lines the window should span. Values <= 0 mean no limit.
  min_window_height = 0, -- Minimum editor window height to enable context. Values <= 0 mean no limit.
  line_numbers = true,
  multiline_threshold = 20, -- Maximum number of lines to show for a single context
  trim_scope = 'outer', -- Which context lines to discard if `max_lines` is exceeded. Choices: 'inner', 'outer'
  mode = 'cursor',  -- Line used to calculate context. Choices: 'cursor', 'topline'
  -- Separator between context and content. Should be a single character string, like '-'.
  -- When separator is set, the context will only show up when there are at least 2 lines above cursorline.
  separator = nil,
  zindex = 20, -- The Z-index of the context window
  on_attach = nil, -- (fun(buf: integer): boolean) return false to disable attaching
}
'''

# [[plugins]]
# on_source = ['nvim-lspconfig']
# repo = 'lvimuser/lsp-inlayhints.nvim'

# [[plugins]]
# repo = 'nvim-treesitter/nvim-treesitter-textobjects'
# on_source = ['nvim-treesitter']
# lua_source = '''
# require'nvim-treesitter.configs'.setup {
#   textobjects = {
#     select = {
#       enable = true,
#       -- Automatically jump forward to textobj, similar to targets.vim
#       lookahead = true,
#       keymaps = {
#         -- You can use the capture groups defined in textobjects.scm
#         -- ["af"] = "@function.outer",
#         -- ["if"] = "@function.inner",
#         -- ["ac"] = "@class.outer",
#         -- -- You can optionally set descriptions to the mappings (used in the desc parameter of
#         -- -- nvim_buf_set_keymap) which plugins like which-key display
#         -- ["ic"] = { query = "@class.inner", desc = "Select inner part of a class region" },
#         -- -- You can also use captures from other query groups like `locals.scm`
#         -- ["as"] = { query = "@local.scope", query_group = "locals", desc = "Select language scope" },
#       },
#       -- You can choose the select mode (default is charwise 'v')
#       --
#       -- Can also be a function which gets passed a table with the keys
#       -- * query_string: eg '@function.inner'
#       -- * method: eg 'v' or 'o'
#       -- and should return the mode ('v', 'V', or '<c-v>') or a table
#       -- mapping query_strings to modes.
#       selection_modes = {
#         ['@parameter.outer'] = 'v', -- charwise
#         ['@function.outer'] = 'V', -- linewise
#         ['@class.outer'] = '<c-v>', -- blockwise
#       },
#       -- If you set this to `true` (default is `false`) then any textobject is
#       -- extended to include preceding or succeeding whitespace. Succeeding
#       -- whitespace has priority in order to act similarly to eg the built-in
#       -- `ap`.
#       --
#       -- Can also be a function which gets passed a table with the keys
#       -- * query_string: eg '@function.inner'
#       -- * selection_mode: eg 'v'
#       -- and should return true or false
#       include_surrounding_whitespace = true,
#     },
#   },
# }
# '''

[[plugins]]
repo = 'David-Kunz/treesitter-unit'
on_lua = ['treesitter-unit']
hook_add = '''
xnoremap iu :lua require"treesitter-unit".select()<CR>
xnoremap au :lua require"treesitter-unit".select(true)<CR>
onoremap iu :<c-u>lua require"treesitter-unit".select()<CR>
onoremap au :<c-u>lua require"treesitter-unit".select(true)<CR>
'''

[[plugins]]
# on_cmd = ["AerialOpen"]
lazy = 1
on_lua = ["aerial", "aerial.ddu"]
on_event = ['BufRead','BufNew']
repo = 'stevearc/aerial.nvim'
hook_source = '''
function! AerialCall() abort
lua << EOF
local ext_config = {
  show_nesting = {
    ["_"] = false,
    json = true,
    yaml = true,
  },
}
  require("aerial").sync_load()
  local backends = require("aerial.backends")
  local config = require("aerial.config")
  local data = require("aerial.data")
  local highlight = require("aerial.highlight")
  local util = require("aerial.util")

  local bufnr = vim.api.nvim_get_current_buf()
  local filename = vim.api.nvim_buf_get_name(0)
  local filetype = vim.api.nvim_buf_get_option(bufnr, "filetype")
  local show_nesting = ext_config.show_nesting[filetype]
  if show_nesting == nil then
    show_nesting = ext_config.show_nesting["_"]
  end
  local backend = backends.get()

  if not backend then
    backends.log_support_err()
    return
  elseif not data.has_symbols(0) then
    backend.fetch_symbols_sync(0, opts)
  end
  print(vim.inspect(data.get()))
EOF
-- vim.api.nvim_set_keymap('n', '-', '<cmd>AerialOpen<CR>', { noremap = true, silent = true })
endfunction
'''
lua_source = '''
vim.api.nvim_create_autocmd({ "Filetype" }, {
  pattern = { "aerial" },
  command = "setlocal winbar=Outline",
  group = 'vimrc'

})
local aerial = require("aerial")
require('aerial').setup({
    icons = {},
    nerd_font = "false",
  layout = {
    width = 40,
    min_width = 30,
    default_direction = "right",
  placement = "edge",
  },
    attach_mode = "global",
  show_guides = true,
   guides = {
    -- When the child item has a sibling below it
    mid_item = "├─",
    -- When the child item is the last in the list
    last_item = "└─",
    -- When there are nested child guides to the right
    nested_top = "│ ",
    -- Raw indentation
    whitespace = "  ",
  }, -- Customize the characters used when show_guides = true
  lsp = {
    -- Fetch document symbols when LSP diagnostics update.
    -- If false, will update on buffer changes.
    diagnostics_trigger_update = false,

    -- Set to false to not update the symbols when there are LSP errors
    update_when_errors = false,
    -- How long to wait (in ms) after a buffer change before updating
    -- Only used when diagnostics_trigger_update = false
    update_delay = 300,
  },
  txt = {
    update_delay = 300
  },
  backends = {
    ['_']      = { "lsp",  "txt"},
    markdown = { "markdown"},
    typescript = { "lsp" },
    lua = { "treesitter" },
  },
  disable_max_lines = 100000,
  filter_kind = {
    "Class",
    "Type",
    "Constructor",
    "Enum",
    "Function",
    "Interface",
    "Property",
    "Parameter",
    "Module",
    "Method",
    "Struct",
  },
  close_automatic_events = { 'unsupported', 'switch_buffer' },

  open_automatic = function(bufnr)
    return false
    end,
-- Keymaps in aerial window. Can be any value that `vim.keymap.set` accepts OR a table of keymap
  -- options with a `callback` (e.g. { callback = function() ... end, desc = "", nowait = true })
  -- Additionally, if it is a string that matches "actions.<name>",
  -- it will use the mapping at require("aerial.actions").<name>
  -- Set to `false` to remove a keymap
  keymaps = {
    ["?"] = "actions.show_help",
    ["-"] = "<C-w>p",
    ["g?"] = "actions.show_help",
    ["<CR>"] = "actions.jump",
    ["<2-LeftMouse>"] = "actions.jump",
    ["<C-v>"] = "actions.jump_vsplit",
    ["<C-s>"] = "actions.jump_split",
    ["p"] = "actions.scroll",
    ["<space>"] = { callback = function() require('aerial.actions').scroll() end, desc = "", nowait = true },
    ["<C-j>"] = "actions.down_and_scroll",
    ["<C-k>"] = "actions.up_and_scroll",
    ["{"] = "actions.prev",
    ["}"] = "actions.next",
    ["[["] = "actions.prev_up",
    ["]]"] = "actions.next_up",
    ["q"] = "actions.close",
    ["o"] = "actions.tree_toggle",
    ["za"] = "actions.tree_toggle",
    ["O"] = "actions.tree_toggle_recursive",
    ["zA"] = "actions.tree_toggle_recursive",
    ["l"] = "actions.tree_open",
    ["zo"] = "actions.tree_open",
    ["L"] = "actions.tree_open_recursive",
    ["zO"] = "actions.tree_open_recursive",
    ["h"] = "actions.tree_close",
    ["zc"] = "actions.tree_close",
    ["H"] = "actions.tree_close_recursive",
    ["zC"] = "actions.tree_close_recursive",
    ["zr"] = "actions.tree_increase_fold_level",
    ["zR"] = "actions.tree_open_all",
    ["zm"] = "actions.tree_decrease_fold_level",
    ["zM"] = "actions.tree_close_all",
    ["zx"] = "actions.tree_sync_folds",
    ["zX"] = "actions.tree_sync_folds",
  },
})
'''

[[plugins]]
repo = 'ray-x/lsp_signature.nvim'
on_source = ['nvim-lspconfig']
lua_source = '''
local cfg = {
  debug = false, -- set to true to enable debug logging
  log_path = vim.fn.stdpath("cache") .. "/lsp_signature.log", -- log dir when debug is on
  -- default is  ~/.cache/nvim/lsp_signature.log
  verbose = false, -- show debug line number

  bind = true, -- This is mandatory, otherwise border config won't get registered.
  -- If you want to hook lspsaga or other signature handler, pls set to false
  doc_lines = 10, -- will show two lines of comment/doc(if there are more than two lines in doc, will be truncated);
  -- set to 0 if you DO NOT want any API comments be shown
  -- This setting only take effect in insert mode, it does not affect signature help in normal
  -- mode, 10 by default

  max_height = 12, -- max height of signature floating_window
  max_width = 80, -- max_width of signature floating_window
  wrap = true, -- allow doc/signature text wrap inside floating_window, useful if your lsp return doc/sig is too long

  floating_window = false, -- show hint in a floating window, set to false for virtual text only mode

  floating_window_above_cur_line = false, -- try to place the floating above the current line when possible Note:
  -- will set to true when fully tested, set to false will use whichever side has more space
  -- this setting will be helpful if you do not want the PUM and floating win overlap

  floating_window_off_x = 1, -- adjust float windows x position.
  floating_window_off_y = 0, -- adjust float windows y position. e.g -2 move window up 2 lines; 2 move down 2 lines

  close_timeout = 4000, -- close floating window after ms when laster parameter is entered
  fix_pos = false, -- set to true, the floating window will not auto-close until finish all parameters
  hint_enable = true, -- virtual hint enable
  hint_prefix = "", -- Panda for parameter, NOTE: for the terminal not support emoji, might crash
  hint_scheme = "String",
  hi_parameter = "LspSignatureActiveParameter", -- how your parameter will be highlight
  handler_opts = {
    border = "single" -- double, rounded, single, shadow, none
  },

  always_trigger = false, -- sometime show signature on new line or in middle of parameter can be confusing, set it to false for #58

  auto_close_after = nil, -- autoclose signature float win after x sec, disabled if nil.
  extra_trigger_chars = {}, -- Array of extra characters that will trigger signature completion, e.g., {"(", ","}
  zindex = 200, -- by default it will be on top of all floating windows, set to <= 50 send it to bottom

  padding = '', -- character to pad on left and right of signature can be ' ', or '|'  etc

  transparency = nil, -- disabled by default, allow floating win transparent value 1~100
  shadow_blend = 36, -- if you using shadow as border use this set the opacity
  shadow_guibg = 'Black', -- if you using shadow as border use this set the color e.g. 'Green' or '#121315'
  timer_interval = 200, -- default timer check interval set to lower value if you want to reduce latency
  toggle_key = nil, -- toggle signature on and off in insert mode,  e.g. toggle_key = '<M-x>'

  select_signature_key = nil, -- cycle to next signature, e.g. '<M-n>' function overloading
  move_cursor_key = nil, -- imap, use nvim_set_current_win to move cursor between current win and floating
}

-- recommended:
require 'lsp_signature'.setup(cfg) -- no need to specify bufnr if you don't use toggle_key
'''

[[plugins]]
repo = 'delphinus/cellwidths.nvim'
on_event = ['BufRead','BufNew']
lua_source = '''
require("cellwidths").setup {
  name = "user/custom",
  fallback = function(cw)
    -- 特定のテンプレートから追加・削除を行いたい場合は最初に load() を呼んで下さい。
    -- cw.load "default"
    -- 好きな設定を追加します。以下のどの書式でも構いません。
    cw.add {
      -- { 0x00d7, 0x00d7, 2 },
      -- { 0x03b1, 0x03c9, 2 },
      { 0x201c, 0x201d, 2 },
      { 0x2015, 0x2015, 2 },
      { 0x2018, 0x2018, 2 },
      { 0x2020, 0x2020, 2 },
      { 0x2024, 0x203f, 2 },
      { 0x2100, 0x2103, 2 },
      { 0x2120, 0x2123, 2 },
      { 0x2160, 0x2169, 2 },
      { 0x2170, 0x2179, 2 },
      { 0x2190, 0x2193, 2 },
      { 0x21d2, 0x21d2, 2 },
      { 0x21d4, 0x21d4, 2 },
      { 0x2212, 0x2212, 2 },
      { 0x2252, 0x2252, 2 },
      { 0x2266, 0x2267, 2 },
      { 0x2460, 0x24ff, 2 },
      { 0x25a0, 0x25a1, 2 },
      { 0x25b2, 0x25b3, 2 },
      { 0x25bc, 0x25bd, 2 },
      { 0x25c6, 0x25c7, 2 },
      { 0x25cb, 0x25cf, 2 },
      { 0x25ef, 0x25ef, 2 },
      { 0x2600, 0x267f, 2 },
      { 0x2690, 0x269c, 2 },
      { 0x26a0, 0x26ad, 2 },
      { 0x26b0, 0x26b1, 2 },
      { 0x26b9, 0x26b9, 2 },
      { 0x2701, 0x2709, 2 },
      { 0x270c, 0x2712, 2 },
      { 0x2714, 0x2727, 2 },
      { 0x2729, 0x274d, 2 },
      { 0x274f, 0x2752, 2 },
      { 0x2756, 0x2756, 2 },
      { 0x2758, 0x275e, 2 },
      { 0x2761, 0x2794, 2 },
      { 0x2798, 0x279f, 2 },
      { 0x27f5, 0x27f7, 2 },
      { 0x2b05, 0x2b0d, 2 },
      { 0x303f, 0x303f, 2 },
      { 0xe62e, 0xe62e, 2 },
      { 0xf315, 0xf316, 2 },
      { 0xf31b, 0xf31c, 2 },
      { 0xf62e, 0xf62e, 2 },
      { 0xe0a0, 0xe0a3, 2 },
      { 0xe0b0, 0xe0c8, 2 },
      { 0xe0ca, 0xe0ca, 2 },
      { 0xe0cc, 0xe0d2, 2 },
      { 0xe0d4, 0xe0d4, 2 },
      { 0xe725, 0xe725, 2 },
    }
    -- 削除も出来ます。設定に存在しないコードポイントを指定してもエラーになりません。
    -- cw.delete(0x2103)
  end,
}
'''

[[plugins]]
repo = 'onsails/lspkind.nvim'
on_lua = ['lspkind']
lua_source = '''
require('lspkind').init({
  mode = 'symbol_text',
  preset = 'codicons',
  symbol_map = {
    Text = "",
    Method = "",
    Function = "",
    Constructor = "",
    Field = "ﰠ",
    Variable = "",
    Class = "ﴯ",
    Interface = "",
    Module = "",
    Property = "ﰠ",
    Unit = "塞",
    Value = "",
    Enum = "",
    Keyword = "",
    Snippet = "",
    Color = "",
    File = "",
    Reference = "",
    Folder = "",
    EnumMember = "",
    Constant = "",
    Struct = "פּ",
    Event = "",
    Operator = "",
    TypeParameter = ""
  },
})
'''

[[plugins]]
repo = 'monaqa/dial.nvim'
on_lua = ["dial"]
lua_add = '''
vim.keymap.set("n", "<C-a>", function()
	require("dial.map").manipulate("increment", "normal")
end)
vim.keymap.set("n", "<C-x>", function()
	require("dial.map").manipulate("decrement", "normal")
end)
vim.keymap.set("n", "g<C-a>", function()
  require("dial.map").manipulate("increment", "gnormal")
end)
vim.keymap.set("n", "g<C-x>", function()
  require("dial.map").manipulate("decrement", "gnormal")
end)
vim.keymap.set("v", "<C-a>", function()
	require("dial.map").manipulate("increment", "visual")
end)
vim.keymap.set("v", "<C-x>", function()
	require("dial.map").manipulate("decrement", "visual")
end)
vim.keymap.set("v", "g<C-a>", function()
	require("dial.map").manipulate("increment", "gvisual")
end)
vim.keymap.set("v", "g<C-x>", function()
	require("dial.map").manipulate("decrement", "gvisual")
end)
'''
lua_source = '''
local augend = require("dial.augend")
local date = require("dial.augend.date")
date.alias["%Y年%-m月%-d日（%ja）"] = date.new {
    pattern = "%Y年%-m月%-d日（%J）",
    default_kind = "day",
    only_valid = true,
}

-- date.alias["%-m月%-d日（%ja）"] = date.new {
--     pattern = "%-m月%-d日（%J）",
--     default_kind = "day",
--     only_valid = true,
-- }

require("dial.config").augends:register_group{
  default = {
    augend.integer.alias.decimal,
   augend.integer.alias.hex,
   augend.date.alias["%Y/%m/%d"],
   -- augend.date.alias["%Y年%-m月%-d日(%ja)"],
   augend.date.alias["%Y年%-m月%-d日"],
   -- augend.date.alias["%Y年%-m月%-d日（%ja）"],
   -- augend.date.alias["%-m月%-d日（%ja）"],
    augend.constant.alias.ja_weekday,
    augend.constant.alias.ja_weekday_full,
    augend.constant.alias.bool,
    augend.misc.alias.markdown_header,
    augend.constant.new{
        elements = {"[ ]", "[x]"},
        word = false,
        cyclic = true,
        },},
}
'''

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
on_event = ['BufRead','BufNew']
hook_source = '''
'''
lua_source = '''
require('gitsigns').setup{
  signcolumn = false,  -- Toggle with `:Gitsigns toggle_signs`
  numhl      = true, -- Toggle with `:Gitsigns toggle_numhl`
  linehl     = false, -- Toggle with `:Gitsigns toggle_linehl`
  word_diff  = false, -- Toggle with `:Gitsigns toggle_word_diff`
  preview_config = {
          border = "none",
          col = 1,
          relative = "cursor",
          row = 0,
          height = 10,
          -- footer = true,
          -- fixed = true,
          --footer_pos = true,
          style = "minimal"
    },
on_attach = function(bufnr)
    local gs = package.loaded.gitsigns

    local function map(mode, l, r, opts)
      opts = opts or {}
      opts.buffer = bufnr
      vim.keymap.set(mode, l, r, opts)
    end

    -- Navigation
    map('n', ']c', function()
      if vim.wo.diff then return ']c' end
      vim.schedule(function() gs.next_hunk() end)
      return '<Ignore>'
    end, {expr=true})

    map('n', '[c', function()
      if vim.wo.diff then return '[c' end
      vim.schedule(function() gs.prev_hunk() end)
      return '<Ignore>'
    end, {expr=true})

    -- Actions
    map({'n', 'v'}, '<leader>xa', gs.stage_hunk)
    map({'n', 'v'}, '<leader>xu', gs.reset_hunk)
    map('n', '<leader>xS', gs.stage_buffer)
    map('n', '<leader>xA', gs.undo_stage_hunk)
    map('n', '<leader>xR', gs.reset_buffer)
    map('n', '<leader>xp', gs.preview_hunk)
    map('n', '<leader>xb', function() gs.blame_line{full=true} end)
    map('n', '<leader>xB', gs.toggle_current_line_blame)
    map('n', '<leader>xd', gs.diffthis)
    map('n', '<leader>xD', function() gs.diffthis('~') end)
    map('n', '<leader>xd', gs.toggle_deleted)

    map({'o', 'x'}, 'ih', ':<C-U>Gitsigns select_hunk<CR>')
  end
}
'''

# [[plugins]]
# repo = 'Decodetalkers/csv-tools.lua'
# on_ft = ['csv', 'tsv']
# lua_source = '''
# require("csvtools").setup({
#     before = 10,
#     after = 10,
#     clearafter = true,
#     -- this will clear the highlight of buf after move
#     showoverflow = false,
#     -- this will provide a overflow show
#     titelflow = true,
#     -- add an alone title

# })
# '''

# [[plugins]]
# repo = 'gen740/SmoothCursor.nvim'
# lazy = 1
# on_event = ['BufRead','BufNew']
# lua_source = '''
# vim.o.signcolumn = 'number'
# vim.api.nvim_set_hl(0, 'SmoothCursor', { fg = '#c6c8d1'})
# require('smoothcursor').setup({
#     autostart = true,
#     cursor = "▶",              -- cursor shape (need nerd font)
#     texthl = "SmoothCursor",   -- highlight group, default is { bg = nil, fg = "#FFD400" }
#     linehl = nil,              -- highlight sub-cursor line like 'cursorline', "CursorLine" recommended
#     type = "default",          -- define cursor movement calculate function, "default" or "exp" (exponential).
#     flyin_effect = "bottom",        -- "bottom" or "top"
#     speed = 100,                -- max is 100 to stick to your current position
#     intervals = 20,            -- tick interval
#     priority = 1,             -- set marker priority
#     timeout = 3000,            -- timout for animation
#     threshold = 3,             -- animate if threshold lines jump
#     disable_float_win = false, -- disable on float window
#     enabled_filetypes = nil,   -- example: { "lua", "vim" }
#     disabled_filetypes = {'ddu-ff', 'ddu-filer', 'help'},  -- this option will be skipped if enabled_filetypes is set. example: { "TelescopePrompt", "NvimTree" }
# })
# vim.api.nvim_set_hl(0, 'SmoothCursor', { fg = '#c6c8d1' })
# local autocmd = vim.api.nvim_create_autocmd
# local augroup = vim.api.nvim_create_augroup
# autocmd({ 'ModeChanged' }, {
#   group = 'dein',
#   callback = function()
#     local current_mode = vim.fn.mode()
#     if current_mode == 'n' then
#       vim.api.nvim_set_hl(0, 'SmoothCursor', { fg = '#c6c8d1' })
#       -- vim.fn.sign_define('smoothcursor', { text = 'V' }) -- you can also change the cursor shape.
#     elseif current_mode == 'v' or current_mode == 'V' then
#       vim.api.nvim_set_hl(0, 'SmoothCursor', { fg = '#b4be82' })
#     elseif current_mode == 'i' then
#       vim.api.nvim_set_hl(0, 'SmoothCursor', { fg = '#84a0c6' })
#     end
#   end,
# })
# autocmd({ 'User' }, {
#   pattern = 'skkeleton-mode-changed',
#   group = 'dein',
#   callback = function()
#     local current_mode = vim.api.nvim_eval('g:skkeleton#mode')
#     if current_mode == 'hira' then
#       vim.api.nvim_set_hl(0, 'SmoothCursor', { fg = '#84a0c6' })
#       -- vim.fn.sign_define('smoothcursor', { text = 'V' }) -- you can also change the cursor shape.
#     elseif current_mode == 'kata' then
#       vim.api.nvim_set_hl(0, 'SmoothCursor', { fg = '#DF81A2' })
#     elseif current_mode == 'abbrev' then
#       vim.api.nvim_set_hl(0, 'SmoothCursor', { fg = '#149116' })
#     end
#   end,
# })
# '''

# [[plugins]]
# repo = 'cshuaimin/ssr.nvim'
# on_lua = ["ssr"]
# lua_add = '''
# vim.keymap.set({ "n", "x" }, "<space>r", function() require("ssr").open() end)
# '''
# lua_post_source = '''
# require("ssr").setup {
#       border = "rounded",
#       min_width = 50,
#       min_height = 5,
#       max_width = 120,
#       max_height = 25,
#       keymaps = {
#         close = "q",
#         next_match = "n",
#         prev_match = "N",
#         replace_confirm = "<cr>",
#         replace_all = "<leader><cr>",
#         help = "?",
#       },
#     }
# '''

# [[plugins]]
# repo = 'kensleDev/persistent-macros.nvim'
# on_lua = ["persistent-macros"]
# lua_post_source = '''
#   require('persistent-macros').setup(".config/macros.json")
#     vim.keymap.set("n", "<leader>m", function()
#         vim.cmd([[:ShowMacros()]])
#     end, { noremap = true, silent = true })
# '''

# [[plugins]]
# repo = 'uga-rosa/ugaterm.nvim'
# on_cmd = ['UgatermOpen']
# lua_add = '''
# vim.keymap.set("n", "<leader>t", function()
#     vim.cmd([[:UgatermOpen]])
# end, { noremap = true, silent = true })
# '''
# lua_source = '''
# require("ugaterm").setup({
#   ---@type string The terminal buffer name prefix.
#   prefix = "terminal://",
#   ---@type string The filetype for a terminal buffer.
#   filetype = "ugaterm",
#   ---@type string|function The command/function to open a teminal window.
#   open_cmd = "botright 15sp",
# })
# '''

[[plugins]]
repo = 'hrsh7th/nvim-insx'
on_event = ['InsertEnter', 'CmdlineEnter']
lua_source = '''
require('insx.preset.standard').setup({
  cmdline = {enabled = true},
  fast_wrap = {enabled = true},
})

local insx = require('insx')
insx.add(
  "（",
  insx.with(require('insx.recipe.auto_pair')({
    open = "（",
    close = "）"
  }), {
    insx.with.in_string(true),
    insx.with.in_comment(true),
  })
)
'''

# [[plugins]]
# lazy = 0
# repo = 'Bekaboo/dropbar.nvim'
# lua_post_source = '''
# '''

# [[plugins]]
# lazy = 0
# repo = "epwalsh/obsidian.nvim"
# lua_post_source = '''
# local opts = {
#     dir = "~/GoogleDrive/obsidian_memo",
# }
# require("obsidian").setup(opts)

# vim.keymap.set("n", "gf", function()
#   if require("obsidian").util.cursor_on_markdown_link() then
#     return "<cmd>ObsidianFollowLink<CR>"
#   else
#     return "gf"
#   end
# end, { noremap = false, expr = true })
# '''

# [[plugins]]
# repo = "rcarriga/nvim-notify"

# [[plugins]]
# repo = "IwasakiYuuki/ai-assistant.nvim"
# lua_add = '''
# vim.keymap.set('n', '<leader>c', "<cmd>AIAssistantToggle<cr>")
# '''

# [[plugins]]
# repo = 'tzachar/highlight-undo.nvim'
# on_event = ['BufRead','BufNew']
# lua_post_source = '''
# require('highlight-undo').setup({
#     hlgroup = 'HighlightUndo',
#     duration = 200,
#     keymaps = {
#       {'n', 'u', 'undo', {}},
#       {'n', '<C-r>', 'redo', {}},
#     }
# })
# '''
# [[plugins]]
# on_event = ['BufRead','BufNew']
# repo = 'lewis6991/satellite.nvim'
# lua_source = '''
# require('satellite').setup {
#   current_only = true,
#   winblend = 50,
#   zindex = 40,
#   excluded_filetypes = {},
#   width = 2,
#   handlers = {
#     cursor = {
#       enable = true,
#       -- Supports any number of symbols
#       symbols = { '⎺', '⎻', '⎼', '⎽' }
#       -- symbols = { '⎻', '⎼' }
#       -- Highlights:
#       -- - SatelliteCursor (default links to NonText
#     },
#     search = {
#       enable = true,
#       -- Highlights:
#       -- - SatelliteSearch (default links to Search)
#       -- - SatelliteSearchCurrent (default links to SearchCurrent)
#     },
#     diagnostic = {
#       enable = false,
#       signs = {'-', '=', '≡'},
#       min_severity = vim.diagnostic.severity.HINT,
#       -- Highlights:
#       -- - SatelliteDiagnosticError (default links to DiagnosticError)
#       -- - SatelliteDiagnosticWarn (default links to DiagnosticWarn)
#       -- - SatelliteDiagnosticInfo (default links to DiagnosticInfo)
#       -- - SatelliteDiagnosticHint (default links to DiagnosticHint)
#     },
#     gitsigns = {
#       enable = false,
#       signs = { -- can only be a single character (multibyte is okay)
#         add = "│",
#         change = "│",
#         delete = "-",
#       },
#       -- Highlights:
#       -- SatelliteGitSignsAdd (default links to GitSignsAdd)
#       -- SatelliteGitSignsChange (default links to GitSignsChange)
#       -- SatelliteGitSignsDelete (default links to GitSignsDelete)
#     },
#     marks = {
#       enable = true,
#       show_builtins = false, -- shows the builtin marks like [ ] < >
#       key = 'm'
#       -- Highlights:
#       -- SatelliteMark (default links to Normal)
#     },
#     quickfix = {
#       signs = { '-', '=', '≡' },
#       -- Highlights:
#       -- SatelliteQuickfix (default links to WarningMsg)
#     }
#   },
# }
# '''
# [[plugins]]
# repo = 'uga-rosa/ddc-nvim-lsp-setup'
# on_source = ['ddc.vim']
# lua_source = '''
# require("ddc_nvim_lsp_setup").setup()
# require("lspconfig").denols.setup()

[[plugins]]
repo = 'akinsho/toggleterm.nvim'
lazy = 0
hook_add = '''
" autocmd vimrc TermOpen term://* setlocal nonumber scrolloff=0 signcolumn=no nobuflisted winfixheight winfixwidth
" autocmd vimrc TermOpen * startinsert
autocmd vimrc TermOpen term://* nnoremap <buffer><silent> q <Cmd>ToggleTermToggleAll<CR>
autocmd vimrc TermOpen term://* nnoremap <buffer><silent> i I
autocmd vimrc TermOpen term://* nnoremap <buffer><silent> <tab> <cmd>lua vim.api.nvim_win_set_height(0, vim.api.nvim_win_get_height(0) == 12 and math.floor(vim.o.lines / 2) or 12)<CR>
nnoremap <silent> <leader>t <cmd>1ToggleTerm<CR>
nnoremap <silent> <leader>T <cmd>ToggleTermToggleAll<CR>
nnoremap <silent> # <Cmd>call execute('99TermExec cmd="' .. input('TermExec: ') .. '" dir=' .. expand('%:p:h') )<CR>
'''
lua_post_source = '''
require("toggleterm").setup({})
'''

# [[plugins]]
# lazy = 1
# repo = 'rebelot/terminal.nvim'
# on_lua = ["terminal"]
# # on_cmd = ["TermToggle", "TermRun"]
# hook_add = '''
# autocmd vimrc TermOpen term://* setlocal nonumber scrolloff=0 signcolumn=no nobuflisted winfixheight winfixwidth
# autocmd vimrc TermOpen * startinsert
# autocmd vimrc TermOpen term://* nnoremap <buffer><silent> q <Cmd>TermClose<CR>
# '''
# lua_add = '''
# local term_map = require("terminal.mappings")
# vim.keymap.set({ "n", "x" }, "<leader>ts", term_map.operator_send, { expr = true })
# vim.keymap.set("n", "<leader>to", term_map.toggle)
# vim.keymap.set("n", "<leader>tO", term_map.toggle({ open_cmd = "enew" }))
# vim.keymap.set("n", "<leader>tr", term_map.run)
# vim.keymap.set("n", "<leader>tR", term_map.run(nil, { layout = { open_cmd = "enew" } }))
# vim.keymap.set("n", "<leader>tk", term_map.kill)
# vim.keymap.set("n", "<leader>t]", term_map.cycle_next)
# vim.keymap.set("n", "<leader>t[", term_map.cycle_prev)
# vim.keymap.set("n", "<leader>tl", term_map.move({ open_cmd = "belowright vnew" }))
# vim.keymap.set("n", "<leader>tL", term_map.move({ open_cmd = "botright vnew" }))
# vim.keymap.set("n", "<leader>th", term_map.move({ open_cmd = "belowright new" }))
# vim.keymap.set("n", "<leader>tH", term_map.move({ open_cmd = "botright new" }))
# vim.keymap.set("n", "<leader>tf", term_map.move({ open_cmd = "float" }))
# '''

# lua_source = '''
# require('terminal').setup(
#   {
#     layout = { open_cmd = "belowright15 new" },
#     cmd = { vim.o.shell },
#     autoclose = true,
#   }
# )
# '''
# '''

# [[plugins]]
# repo = 'dstein64/nvim-scrollview'
# on_event = ['BufRead','BufNew']
# lua_post_source = '''
# require('scrollview').setup({
#   signs_on_startup = {'conflicts', 'marks', 'search', 'trail'},
# })
# '''

[[plugins]]
repo = 'm00qek/baleia.nvim'
on_source = ['quickrun.vim']
hook_source = '''
let s:baleia = luaeval("require('baleia').setup { }")
command! BaleiaColorize call s:baleia.once(bufnr('%'))
autocmd! BufEnter * if &ft ==# 'quickrun' | silent call s:baleia.once(bufnr('%')) | endif
'''

# [[plugins]]
# repo = 'mvllow/modes.nvim'
# lua_post_source = '''
# require('modes').setup()
# '''

[[plugins]]
repo = 'folke/zen-mode.nvim'
on_cmd = ['ZenMode']

# [[plugins]]
# repo = 'pwntester/octo.nvim'
# on_event = ["BufRead"]
# lua_source = '''
# require"octo".setup({
#   use_local_fs = false,                    -- use local files on right side of reviews
#   enable_builtin = false,                  -- shows a list of builtin actions when no action is provided
#   default_remote = {"upstream", "origin"}; -- order to try remotes
#   default_merge_method = "commit",         -- default merge method which should be used for both `Octo pr merge` and merging from picker, could be `commit`, `rebase` or `squash`
#   default_delete_branch = false,           -- whether to delete branch when merging pull request with either `Octo pr merge` or from picker (can be overridden with `delete`/`nodelete` argument to `Octo pr merge`)
#   ssh_aliases = {},                        -- SSH aliases. e.g. `ssh_aliases = {["github.com-work"] = "github.com"}`. The key part will be interpreted as an anchored Lua pattern.
#   picker = "telescope",                    -- or "fzf-lua"
#   picker_config = {
#     use_emojis = false,                    -- only used by "fzf-lua" picker for now
#     mappings = {                           -- mappings for the pickers
#       open_in_browser = { lhs = "<C-b>", desc = "open issue in browser" },
#       copy_url = { lhs = "<C-y>", desc = "copy url to system clipboard" },
#       checkout_pr = { lhs = "<C-o>", desc = "checkout pull request" },
#       merge_pr = { lhs = "<C-r>", desc = "merge pull request" },
#     },
#   },
#   comment_icon = "?",                      -- comment marker
#   outdated_icon = "!",                    -- outdated indicator
#   resolved_icon = "x",                    -- resolved indicator
#   reaction_viewer_hint_icon = "*";        -- marker for user reactions
#   users = "search",                        -- Users for assignees or reviewers. Values: "search" | "mentionable" | "assignable"
#   user_icon = "Y";                        -- user icon
#   timeline_marker = "→";                  -- timeline marker
#   timeline_indent = "2";                   -- timeline indentation
#   right_bubble_delimiter = ")";            -- bubble delimiter
#   left_bubble_delimiter = "(";             -- bubble delimiter
#   github_hostname = "";                    -- GitHub Enterprise host
#   snippet_context_lines = 4;               -- number or lines around commented lines
#   gh_cmd = "gh",                           -- Command to use when calling Github CLI
#   gh_env = {},                             -- extra environment variables to pass on to GitHub CLI, can be a table or function returning a table
#   timeout = 5000,                          -- timeout for requests between the remote server
#   default_to_projects_v2 = false,          -- use projects v2 for the `Octo card ...` command by default. Both legacy and v2 commands are available under `Octo cardlegacy ...` and `Octo cardv2 ...` respectively.
#   ui = {
#     use_signcolumn = false,                -- show "modified" marks on the sign column
#     use_signstatus = true,                 -- show "modified" marks on the status column
#   },
#   issues = {
#     order_by = {                           -- criteria to sort results of `Octo issue list`
#       field = "CREATED_AT",                -- either COMMENTS, CREATED_AT or UPDATED_AT (https://docs.github.com/en/graphql/reference/enums#issueorderfield)
#       direction = "DESC"                   -- either DESC or ASC (https://docs.github.com/en/graphql/reference/enums#orderdirection)
#     }
#   },
#   reviews = {
#     auto_show_threads = true,              -- automatically show comment threads on cursor move
#     focus             = "right",           -- focus right buffer on diff open
#   },
#   pull_requests = {
#     order_by = {                           -- criteria to sort the results of `Octo pr list`
#       field = "CREATED_AT",                -- either COMMENTS, CREATED_AT or UPDATED_AT (https://docs.github.com/en/graphql/reference/enums#issueorderfield)
#       direction = "DESC"                   -- either DESC or ASC (https://docs.github.com/en/graphql/reference/enums#orderdirection)
#     },
#     always_select_remote_on_create = false -- always give prompt to select base remote repo when creating PRs
#   },
#   file_panel = {
#     size = 10,                             -- changed files panel rows
#     use_icons = true                       -- use web-devicons in file panel (if false, nvim-web-devicons does not need to be installed)
#   },
#   mappings_disable_default = false,        -- disable default mappings if true, but will still adapt user mappings
# })
# '''

# [[plugins]]
# repo = 'nvim-telescope/telescope.nvim'


# [[plugins]]
# repo = 'nvim-tree/nvim-web-devicons'
