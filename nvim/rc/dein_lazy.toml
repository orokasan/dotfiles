[[plugins]]
# repo =  'Shougo/denite.nvim'
repo =  'orokasan/denite.nvim'
on_cmd = ['Denite']
hook_add = 'source ~/dotfiles/nvim/rc/config/denite.mapping.rc.vim'
hook_source = 'source ~/dotfiles/nvim/rc/config/denite.rc.vim'
[plugins.ftplugin]
denite = '''
let g:my_denite_filter_winblend_config = 1
let g:my_denite_filter_winblend_config = b:denite.buffer_name !~# '\v(float|menu)' ? 1 : 0
if has('nvim')
    setlocal winblend=10
endif
setlocal signcolumn=yes
nnoremap <silent><buffer><expr> j
\ line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k
\ line('.') == 1 ? 'G' : 'k'
nnoremap <silent><buffer><expr> a
    \ denite#do_map('choose_action')
nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
nnoremap <silent><buffer><expr><nowait> s
    \ denite#do_map('do_action', 'splitswitch')
nnoremap <silent><buffer><expr> v
    \ denite#do_map('do_action', 'vsplitswitch')
nnoremap <silent><buffer><expr> h
    \ denite#do_map('move_up_path')
nnoremap <silent><buffer><expr><nowait> d
    \ denite#do_map('do_action', 'delete')
nnoremap <silent><buffer><expr> l
    \ denite#do_map('do_action')
if g:my_denite_filter_winblend_config
nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
else
nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'highlight')
endif
nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
nnoremap <silent><buffer><expr> t
    \ denite#do_map('toggle_select').'j'
nnoremap <silent><buffer><expr> A
    \ denite#do_map('toggle_select_all').'j'
nnoremap <silent><buffer><expr> r
    \ denite#do_map('toggle_matchers', 'matcher/regexp,matcher/fuzzy')
nnoremap <silent><buffer><expr> <C-r>
    \ denite#do_map('do_action','file/rec')
nnoremap <silent><buffer><expr> <C-e>
    \ denite#do_map('do_action','defx')
nnoremap <silent><buffer><expr> <C-d>
    \ denite#do_map('do_action','directory/rec')
nnoremap <silent><buffer><expr> <C-g>
    \ denite#do_map('do_action','grep')
nnoremap <silent><buffer><expr> <C-s>
    \ denite#do_map('change_sorters', 'sorter/rank,sorter/word')
'''
denite-filter = '''
if g:my_denite_filter_winblend_config ==# 1
    setlocal winblend=100
endif
inoremap <silent><buffer> <CR> <ESC><C-w>p
nnoremap <silent><buffer> j  <C-w>p:call cursor(line('.')+1,0)<CR><C-w>p
nnoremap <silent><buffer> k  <C-w>p:call cursor(line('.')-1,0)<CR><C-w>p
inoremap <silent><buffer> <C-j>  <ESC><C-w>p:call cursor(line('.')+1,0)<CR><C-w>pA
inoremap <silent><buffer> <C-k>  <ESC><C-w>p:call cursor(line('.')-1,0)<CR><C-w>pA
inoremap <silent><buffer><expr> <C-l> denite#do_map('do_action')
inoremap <silent><buffer><expr> <Tab> denite#do_map('choose_action')
imap <silent><buffer> <C-c> <Plug>(denite_filter_update)
imap <silent><buffer> <C-[> <Plug>(denite_filter_update)
imap <silent><buffer> <ESC> <Plug>(denite_filter_update)
imap <silent><buffer> <C-q> <Plug>(denite_filter_quit)q
nmap <silent><buffer> q <Plug>(denite_filter_quit)q
'''

[[plugins]]
repo =  'Shougo/defx.nvim'
on_cmd = 'Defx'
hook_add = '''
nmap <C-e> <Plug>(defx)
nmap <Leader>e <Plug>(defxbufferdir)
nmap <Leader>E <Plug>(defxprojectdir)
nnoremap <silent> <Plug>(defx) :<C-u>Defx -resume<CR>
nnoremap <silent> <Plug>(defxbufferdir) :<C-u>Defx `expand('%:p:h')` -search=`expand('%:p')`<CR>
nnoremap <silent> <Plug>(defxprojectdir) :<C-u>Defx ~/<CR>
'''
hook_source = '''
let s:defx_ignore_files =
    \ '.*,ntuser*,desktop.ini,__pycache__,' .
    \ '*.aux,*.dvi,*.bbl,*.out,*.fdb_latexmk,*.bst,*.blg,*.toc'

call defx#custom#option('_', {
    \ 'winwidth': 35,
    \ 'split': 'vertical',
    \ 'direction': 'topleft',
    \ 'columns':'mark:indent:icons:filename',
    \ 'sort': 'TIME',
    \ 'drives': [ expand('~/GoogleDrive'), expand('~')],
    \ 'ignored_files': s:defx_ignore_files
    \ })
function! s:get_defx_bufferdir(candidate) abort
    if line('.') == 1
        let path_mod  = 'h'
    else
        let path_mod = isdirectory(a:candidate) ? '' : 'h'
    endif
    return fnamemodify(a:candidate,'\":p:' . path_mod . '\"')
endfunction
function! Defx_to_denite_rec(context) abort
        let narrow_dir = '\"' . s:get_defx_bufferdir(a:context.targets[0]) . '\"'
        silent! execute('Denite
        \ -default-action=defx
        \ file/rec:' .  narrow_dir)
endfunction
'''
[plugins.ftplugin]
defx = '''
nmap <silent><buffer> [denite]d <Plug>(defx):<C-u>Denite
    \ -buffer-name=normal
    \ defx/dirmark<CR>
nmap <silent><buffer> [denite]h <Plug>(defx):<C-u>Denite
    \ -buffer-name=normal
    \ defx/history<CR>
setlocal signcolumn=no
" Define mappings
nnoremap <silent><buffer><expr> <CR>
\ defx#do_action('drop')
nnoremap <silent><buffer> <C-e> <C-w>p
nnoremap <silent><buffer><expr> c
\ defx#async_action('copy')
nnoremap <silent><buffer><expr> m
\ defx#async_action('move')
nnoremap <silent><buffer><expr> p
\ defx#async_action('paste')
nnoremap <silent><buffer><expr> l 
\ defx#is_directory() ?
\ defx#do_action('open') :
\ defx#do_action('drop')
nnoremap <silent><buffer><expr> E
\ defx#do_action('open', 'vsplit')
nnoremap <silent><buffer><expr> t
\ defx#do_action('multi', ['toggle_sort','filename','redraw'])
nnoremap <silent><buffer><expr> T
\ defx#do_action('multi', [['toggle_sort','TIME'],'redraw'])
nnoremap <silent><buffer><expr> P
\ defx#do_action('open', 'pedit')
nnoremap <silent><buffer><expr> K
\ defx#do_action('new_directory')
nnoremap <silent><buffer><expr> N
\ defx#do_action('new_file')
"need 'pip install Send2Trash'
nnoremap <silent><buffer><expr> d
\ defx#async_action('remove_trash')
nnoremap <silent><buffer><expr> r
\ defx#do_action('rename')
nnoremap <silent><buffer><expr> x
\ defx#async_action('execute_system')
nnoremap <silent><buffer><expr> f
\ defx#do_action('open_or_close_tree')
nnoremap <silent><buffer><expr> yy
\ defx#do_action('yank_path')
nnoremap <silent><buffer><expr> .
\ defx#do_action('toggle_ignored_files')
nnoremap <silent><buffer><expr> h
\ defx#do_action('cd', ['..'])
nnoremap <silent><buffer><expr> ~
\ defx#do_action('cd')
nnoremap <silent><buffer><expr> q
\ defx#do_action('quit')
nnoremap <silent><buffer><expr> i
\ defx#do_action('toggle_select') . 'j'
nnoremap <silent><buffer><expr> I
\ defx#do_action('clear_select_all')
nnoremap <silent><buffer><expr> *
\ defx#do_action('toggle_select_all')
nnoremap <silent><buffer><expr> j
\ line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k
\ line('.') == 1 ? 'G' : 'k'
nnoremap <silent><buffer><expr> <C-g>
\ defx#do_action('print')
nnoremap <silent><buffer><expr> cd
\ defx#do_action('change_vim_cwd')
nnoremap <silent><buffer><expr> <C-r>
\ defx#do_action('call','Defx_to_denite_rec')
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'
on_source = 'defx.nvim'
hook_source = '''
let g:defx_icons_enable_syntax_highlight = 1
let g:defx_icons_column_length = 2
let g:defx_icons_directory_icon = ''
let g:defx_icons_mark_icon = '*'
let g:defx_icons_parent_icon = ''
let g:defx_icons_default_icon = ''
let g:defx_icons_directory_symlink_icon = ''
" Options below are applicable only when using "tree" feature
let g:defx_icons_root_opened_tree_icon = ''
let g:defx_icons_nested_opened_tree_icon = ''
let g:defx_icons_nested_closed_tree_icon = ''
let s:colors = {
      \ 'brown': '905532',
      \ 'aqua': '3AFFDB',
      \ 'blue': '689FB6',
      \ 'darkBlue': '44788E',
      \ 'purple': '834F79',
      \ 'lightPurple': '834F79',
      \ 'red': 'AE403F',
      \ 'beige': 'F5C06F',
      \ 'yellow': 'F09F17',
      \ 'orange': 'D4843E',
      \ 'darkOrange': 'F16529',
      \ 'pink': 'CB6F6F',
      \ 'salmon': 'EE6E73',
      \ 'green': '8FAA54',
      \ 'lightGreen': '31B53E',
      \ 'white': 'C6C8D1'
      \ }
let g:defx_icons_extensions = {
    \'txt' : { 'icon':'', 'color': s:colors.white},
    \'pdf' : { 'icon':'', 'color': s:colors.red},
    \'docx' : { 'icon':'', 'color': s:colors.blue},
    \'doc' : { 'icon':'', 'color': s:colors.blue},
    \'xlsx' : { 'icon':'', 'color': s:colors.green},
    \'pptx' : { 'icon':'', 'color': s:colors.orange},
    \'ppt' : { 'icon':'', 'color': s:colors.orange},
    \'tex' : { 'icon':'', 'color': s:colors.orange},
    \}
'''

[[plugins]]
repo =  'Shougo/neosnippet'
on_event = 'InsertEnter'
on_ft = 'snippet'
hook_source = '''
" let g:neosnippet#disable_runtime_snippets = {
" \   '_' : 1,
" \ }
" let g:neosnippet#enable_complete_done = 1
if has('conceal')
    set conceallevel=2 concealcursor=niv
endif
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''

[[plugins]]
repo =  'Shougo/deoplete.nvim'
on_if = 'has("nvim")'
on_event = 'InsertEnter'
hook_source = 'source ~/dotfiles/nvim/rc/config/deoplete.rc.vim'

[[plugins]]
# on_if = '!has("nvim")'
on_if = '!has("nvim")'
depends = ['async.vim']
on_event = 'InsertEnter'
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = ['Deol']
hook_add = '''
nnoremap <Leader>d :Deol -edit -split='vertical'<CR>
'''

[[plugins]]
repo =  'Shougo/neco-vim'
on_source = ['deoplete','neocomplete']
on_ft = 'vim'

[[plugins]]
repo =  'tyru/eskk.vim'
# repo =  'orokasan/eskk.vim'
on_map = {icrtn = '<Plug>(eskk:'}
hook_add = '''
"let g:eskk#marker_henkan = '' "''
let g:eskk#marker_okuri = '*'
let g:eskk#rom_input_style = 'msime'
let g:eskk#egg_like_newline = 1
let g:eskk#egg_like_newline_completion = 1
let g:eskk#tab_select_completion = 1
let g:eskk#start_completion_length = 2
let g:eskk#revert_henkan_style = 'okuri'
" backspaceで確定
let g:eskk#delete_implies_kakutei = 1
let g:eskk#dictionary = {
    \    'path': "~/GoogleDrive/rc/.skk-jisyo",
    \    'sorted': 0,
    \    'encoding': 'utf-8'
    \}
let g:eskk#set_undo_point = {
    \ 'sticky' : 0,
    \ 'kakutei' : 0
    \ }

let g:eskk#large_dictionary = {'path': '~/.skk/SKK-JISYO.L', 'sorted': 1, 'encoding': 'euc-jp', }
let g:eskk#dictionary_save_count = 5
let g:eskk#cursor_color = {
    \   'ascii': '#b4be82',
    \   'hira': '#e28878',
    \   'kata': '#84a0c6',
    \   'abbrev': '#4169e1',
    \   'zenei': '#ffd700',
    \}
imap <C-j> <Plug>(eskk:toggle)
cmap <C-j> <Plug>(eskk:toggle)
'''
hook_source = 'source ~/dotfiles/nvim/rc/config/eskk.rc.vim'

[[plugins]]
repo =  'cohama/lexima.vim'
on_if = 'has("nvim")'
on_event = 'InsertEnter'
hook_add = '''
"let g:lexima_no_default_rules = 1
"call lexima#set_default_rules()

let g:lexima_no_default_rules = 0
let g:lexima_enable_basic_rules = 1
let g:lexima_enable_space_rules = 0
let g:lexima_nvim_accept_pum_with_enter = 0
let g:lexima_ctrlh_as_backspace = 1
let g:lexima_map_escape = ''
'''
# hook_post_source = '''
# let s:lexima_default_rules = [
# \ {'char': '(', 'input_after': ')'},
# \ {'char': '(', 'at': '\\\%#'},
# \ {'char': ')', 'at': '\%#)', 'leave': 1},
# \ {'char': '<BS>', 'at': '(\%#)', 'delete': 1},
# \ {'char': '{', 'input_after': '}'},
# \ {'char': '}', 'at': '\%#}', 'leave': 1},
# \ {'char': '<BS>', 'at': '{\%#}', 'delete': 1},
# \ {'char': '[', 'input_after': ']'},
# \ {'char': '[', 'at': '\\\%#'},
# \ {'char': ']', 'at': '\%#]', 'leave': 1},
# \ {'char': '<BS>', 'at': '[\%#]', 'delete': 1},
# \ {'char': '"', 'input_after': '"'},
# \ {'char': '"', 'at': '\%#"', 'leave': 1},
# \ {'char': '"', 'at': '\\\%#'},
# \ {'char': '"', 'at': '^\s*\%#', 'filetype': 'vim'},
# \ {'char': '"', 'at': '\%#\s*$', 'filetype': 'vim'},
# \ {'char': "'", 'input_after': "'"},
# \ {'char': "'", 'at': '\w\%#''\@!'},
# \ {'char': "'", 'at': '\\\%#'},
# \ {'char': "'", 'at': '\\\%#', 'leave': 1, 'filetype': ['vim', 'sh', 'csh', 'ruby', 'tcsh', 'zsh']},
# \ {'char': "'", 'filetype': ['haskell', 'lisp', 'clojure', 'ocaml', 'reason', 'scala', 'rust']},
# \ {'char': '`', 'input_after': '`'},
# \ {'char': '`', 'at': '\%#`', 'leave': 1},
# \ {'char': '`', 'filetype': ['ocaml', 'reason']},
# \ {'char': '`', 'at': '``\%#', 'input_after': '```'},
# \ {'char': '`', 'at': '\%#```', 'leave': 3},
# \ ]

# for rule in s:lexima_default_rules
#   call lexima#add_rule(rule)
# endfor
# let s:lexima_my_rules = [
# \ {'char': 'z[', 'input': '「', 'input_after': '」'},
# \ {'char': 'z{', 'input': '『', 'input_after': '』'},
# \ {'char': 'z\', 'input': '【', 'input_after': '】'},
# \ {'char': 'z(', 'input': '（', 'input_after': '）'},
# \ {'char': '<BS>', 'at': '「\%#」', 'delete' : 1},
# \ {'char': '<BS>', 'at': '『\%#』', 'delete' : 1},
# \ {'char': '<BS>', 'at': '【\%#】', 'delete' : 1},
# \ {'char': '<BS>', 'at': '（\%#）', 'delete' : 1},
# \ ]
# for rule in s:lexima_my_rules
#   call lexima#add_rule(rule)
# endfor
# inoremap z] 」
# inoremap z} 』
# inoremap z) ）
# '''

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = {nv = '<Plug>(operator-replace'}
hook_add = '''
nmap _ <Plug>(operator-replace)
vmap _ <Plug>(operator-replace)
'''

[[plugins]]
repo =  'nathanaelkane/vim-indent-guides'
on_cmd = 'IndentGuideToggle'
hook_add = '''
nnoremap <silent><Leader>ig :IndentGuidesToggle<CR>
'''
hook_source ='''
let g:indent_guides_exclude_filetypes = ['help', 'defx']
'''

[[plugins]]
repo =  'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = ['denite.nvim']
hook_add = '''
let g:neoyank#save_registers = ['*']
'''

[[plugins]]
repo = 'glidenote/memolist.vim'
on_cmd = ['MemoNew', 'MemoGrep' , 'MemoList']
hook_add = '''
nnoremap <Leader>mn  :MemoNew<CR>
nnoremap <silent><Leader>ml  :<C-u>Denite 
    \ -buffer-name=normal
    \ file/rec:~/GoogleDrive/memo<CR>
nnoremap <silent><Leader>mg  :<C-u>Denite 
    \ -buffer-name=normal
    \ grep:~/GoogleDrive/memo::<CR>
" use denite (default 0)
let g:memolist_denite = 1
let g:memolist_path = "~/GoogleDrive/memo"
let g:memolist_template_dir_path = "~/GoogleDrive/memo/template"
let g:memolist_memo_suffix = "markdown"
let g:memolist_memo_date = "%Y-%m-%d[%H:%M]"
" categories prompt (default 0)
let g:memolist_prompt_categories = 1
'''

[[plugins]]
repo =  't9md/vim-choosewin'
#TODO:qitta
on_map = {n = '<Plug>(choosewin'}
hook_add = '''
nmap - <Plug>(choosewin)
nmap - <C-\><C-n><Plug>(choosewin)
" let g:choosewin_overlay_font_size = 'small'
" let g:choosewin_overlay_clear_multibyte = 1
" let g:choosewin_overlay_enable = 1
" let g:choosewin_color_overlay = {
"    \ 'gui': ['#839496']
"    \ }
" let g:choosewin_color_overlay_current = {
"    \ 'gui': ['#859900']
"    \ }
let g:choosewin_color_label_current = {
      \ 'gui': ['#859900' , '#002b36', 'bold']
      \ }
let g:choosewin_color_label = {
      \ 'gui': [ '#073642', '#fdf6e3', 'bold']
      \ }
let g:choosewin_color_other = {
      \ 'gui': ['#002b36', '#657b83']
      \ }
let g:choosewin_tabline_replace = 0
let g:choosewin_statusline_replace = 1
let g:choosewin_label_padding = 8
let g:choosewin_return_on_single_win = 1
let s:keymap = {
      \ '0':     'tab_first',
      \ '[':     'tab_prev',
      \ ']':     'tab_next',
      \ '$':     'tab_last',
      \ 'x':     'tab_close',
      \ ';':     'win_land',
      \ '-':     'previous',
      \ 's':     'swap',
      \ 'S':     'swap_stay',
      \ "\<CR>": 'win_land',
      \ }
let g:choosewin_keymap = s:keymap
let g:choosewin_label = 'HJKLADFG'
let g:choosewin_blink_on_land = 0
'''

[[plugins]]
repo = 'previm/previm'
depends = 'open-browser.vim'
on_ft = ['markdown','md']
hook_add = '''
let g:previm_open_cmd = 'open -a Safari'
nnoremap <silent><Leader>mp :PrevimOpen<CR>
'''

[[plugins]]
repo =  'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = {nv= '<Plug>'}
hook_add = '''
map <silent>'a <Plug>(operator-surround-append)
map <silent>'d <Plug>(operator-surround-delete)
map <silent>'r <Plug>(operator-surround-replace)
" if you use vim-textobj-anyblock
nmap <silent>'dd <Plug>(operator-surround-delete)<Plug>(textobj-anyblock-a)
nmap <silent>'rr <Plug>(operator-surround-replace)<Plug>(textobj-anyblock-a)
'''
hook_source = '''
" let g:operator#surround#recognizes_both_ends_as_surround = v:false
" let g:operator#surround#uses_input_if_no_block = v:false
"2バイト括弧を追加
let g:operator#surround#blocks = {}
let g:operator#surround#blocks['-'] = [
\   { 'block' : ['（', '）'], 'motionwise' : ['char', 'line', 'block'], 'keys' : ['B'] },
\   { 'block' : ['「', '」'], 'motionwise' : ['char', 'line', 'block'], 'keys' : ['K'] },
\   { 'block' : ['『', '』'], 'motionwise' : ['char', 'line', 'block'], 'keys' : ['D'] },
\ ]
'''

[[plugins]]
repo = 'itchyny/vim-cursorword'
on_map = {nv='<Plug>'}
hook_add = '''
let g:cursorword = 0
function! s:toggle_vim_cursorword() abort
  let g:cursorword = g:cursorword ? 0 : 1
  call cursorword#matchadd()
endfunction
nnoremap <silent> <Plug>(cursorword-toggle)
      \ :<C-u>call <SID>toggle_vim_cursorword()<CR>
nmap <C-g>c     <Plug>(cursorword-toggle)
nmap <C-g><C-c> <Plug>(cursorword-toggle)
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_ft = 'toml'
hook_source = '''
" カーソル移動時の自動切り替えを無効化
" このオプションは filetype ごとに設定可能
" "*" は全ての filetype に影響する
let g:precious_enable_switch_CursorMoved = {
\   "*" : 0
\}
let g:precious_enable_switch_CursorMoved_i = {
\   "*" : 0
\}
" insert に入った時にスイッチし、抜けた時に元に戻す
augroup test
    autocmd!
    autocmd InsertEnter * :PreciousSwitch
augroup END
'''

[[plugins]]
repo = 'mattn/benchvimrc-vim'
on_cmd = 'BenchVimrc'

[[plugins]]
repo = 'junegunn/goyo.vim'
on_cmd = 'Goyo'
hook_add = '''
nnoremap <F4> :Goyo<CR>
let g:goyo_width = 80
let g:goyo_height = '60%'
function! s:goyo_enter()
  set scrolloff=999
  Limelight
endfunction
function! s:goyo_leave()
  set scrolloff=3
  Limelight!
endfunction
autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyAlign)'
hook_add = '''
vmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo =  'tyru/open-browser.vim'
on_map = {nx = '<Plug>(openbrowser-'}
hook_add ='''
nmap <Leader>o <Plug>(openbrowser-smart-search)
vmap <Leader>o <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'haya14busa/incsearch-migemo.vim'
depends = 'incsearch.vim'
on_map = { nx = '<Plug>(incsearch-migemo-' }
hook_add = '''
map g/ <Plug>(incsearch-migemo-/)
map g? <Plug>(incsearch-migemo-?)
'''

[[plugins]]
on_source = 'incsearch=migemo.vim'
repo = 'haya14busa/incsearch.vim'
hook_add = 'let g:incsearch#auto_nohlsearch = 1'
# TODO vimproc依存をなくす

[[plugins]]
repo = 'orokasan/clever-f.vim'
on_map = { nx = '<Plug>(clever-f' }
hook_add = '''
let g:clever_f_not_overwrites_standard_mappings = 1
nmap f <Plug>(clever-f-f)
xmap f <Plug>(clever-f-f)
omap f <Plug>(clever-f-f)
nmap F <Plug>(clever-f-F)
xmap F <Plug>(clever-f-F)
omap F <Plug>(clever-f-F)
nmap t <Plug>(clever-f-t)
xmap t <Plug>(clever-f-t)
omap t <Plug>(clever-f-t)
nmap T <Plug>(clever-f-T)
xmap T <Plug>(clever-f-T)
omap T <Plug>(clever-f-T)
let g:clever_f_mark_cursor = 0
let g:clever_f_mark_char_color = "Underlined"
let g:clever_f_hide_cursor_on_cmdline = 0
let g:clever_f_smart_case = 1
let g:clever_f_across_no_line = 1
let g:clever_f_chars_match_any_signs = ':;'
let g:clever_f_use_migemo = 1
let g:clever_f_sings_match_any_signs =
    \ '\[!"#$%&''()=~|\-^\\@`[\]{};:+*<>,.?_/、。「」（）『』！？]'
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = { nx = '<Plug>(asterisk'}
depends = 'is.vim'
hook_add = '''
"let g:asterisk#keeppos = 1
map <silent> *  <Plug>(asterisk-z*)<Plug>(is-nohl-1):<C-u>silent AnzuUpdateSearchStatus<CR>
map <silent> g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1):<C-u>silent AnzuUpdateSearchStatus<CR>
map <silent> #  <Plug>(asterisk-z#)<Plug>(is-nohl-1):<C-u>silent AnzuUpdateSearchStatus<CR>
map <silent> g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1):<C-u>silent AnzuUpdateSearchStatus<CR>
'''

[[plugins]]
on_map = { nxi = '<Plug>(easymotion'}
repo = 'easymotion/vim-easymotion'
hook_add = '''
let g:EasyMotion_do_mapping = 0
nmap m <Plug>(easymotion-s2)
nmap M <Plug>(easymotion-overwin-f2)
imap <C-z> <ESC><Plug>(easymotion-s2)
xmap m <Plug>(easymotion-s2)
omap m <Plug>(easymotion-s2)
map gj <Plug>(easymotion-sol-j)
map gk <Plug>(easymotion-sol-k)

" Jump to first match with enter & space
let g:EasyMotion_use_upper = 1
let g:EasyMotion_keys = 'ASDFGHJKLQWERTYUIOPZXCVBNM'
let g:EasyMotion_smartcase = 1
let g:EasyMotion_space_jump_first = 1
let g:EasyMotion_use_migemo = 1
let g:EasyMotion_prompt = '{n}>>> '
let g:EasyMotion_verbose = 0
hi link EasyMotionTarget Type
hi link EasyMotionShade  Comment
hi link EasyMotionTarget2First MatchParen
hi link EasyMotionTarget2Second MatchParen
hi link EasyMotionMoveHL Search
hi link EasyMotionIncSearch Search
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = ['QuickRun']
on_map = { n = '<Plug>(quickrun' }
hook_add = '''
nmap <Leader>q <Plug>(quickrun)
let g:quickrun_config = {'_': {}}
let g:quickrun_config = {
    \ "_" : {
        \ "hook/close_unite_quickfix/enable_hook_loaded" : 1,
        \ "hook/unite_quickfix/enable_failure" : 1,
        \ "hook/close_quickfix/enable_exit" : 1,
        \ "hook/close_buffer/enable_failure" : 1,
        \ "hook/close_buffer/enable_empty_data" : 1,
        \ "outputter/buffer/split" : "botright8",
        \ "outputter/buffer/close_on_empty" : 1
    \ }
\ }
let g:quickrun_config['python'] = {
    \ 'command': 'python3'
    \ }
if has('nvim')
  " Use 'neovim_job' in Neovim
  let g:quickrun_config._.runner = 'neovim_job'
elseif exists('*ch_close_in')
  " Use 'job' in Vim which support job feature
  let g:quickrun_config._.runner = 'job'
endif
let g:quickrun_config['tex'] = {
            \   'command' : 'latexmk',
            \   'outputter' : 'error',
            \   'outputter/error/error' : 'quickfix',
            \   'cmdopt': '',
            \   'exec': ['%c %o %s']
            \ }
'''

[[plugins]]
repo = 'mbbill/undotree'
#TODO:qitta
on_cmd = ['UndotreeToggle']
hook_add = '''
nnoremap U :<C-u>UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle = 1
'''

[[plugins]]
repo = 't9md/vim-textmanip'
on_map = { x = '<Plug>(textmanip'}
hook_add = '''
xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-l> <Plug>(textmanip-move-right)
" toggle insert/replace with <F10>
" nmap <F10> <Plug>(textmanip-toggle-mode)
" xmap <F10> <Plug>(textmanip-toggle-mode)
'''

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = ['Tagbar']

[[plugins]]
repo = 'cocopon/colorswatch.vim'
on_cmd = ['ColorSwatchGenerate']

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
on_cmd = ['ColorizerToggle']

[[plugins]]
on_cmd = ['Clap']
repo = 'liuchengxu/vim-clap'

[[plugins]]
repo = 'voldikss/vim-translate-me'
#TODO:qitta
on_map = { nx = '<Plug>Translate' }
hook_add = '''
  nmap <silent> <Leader>t <Plug>TranslateW
  vmap <silent> <Leader>t <Plug>TranslateWV
  let g:vtm_target_lang = 'ja'
  let g:vtm_default_engines = ['google']
  let g:vtm_default_mapping = 0
'''

# [[plugins]]
# repo = 'lervag/vimtex'
# on_ft = ['tex']
# hook_source = '''
# let g:vimtex_quickfix_open_on_warning = 1
# let g:vimtex_view_method = 'skim'
# let g:tex_flavor = 'latex'
# let g:vimtex_matchparen_enabled = 0
# let g:vimtex_compiler_latexmk = {
#       \ 'options': [
#       \    '-pdfdvi',
#       \],
#       \}

# # call deoplete#custom#var('omni', 'input_patterns', {
# #     \ 'tex': g:vimtex#re#deoplete
# #     \})
# '''

[[plugins]]
repo =  'lambdalisue/gina.vim'
on_cmd = ['Gina']
hook_add = '''
nnoremap <silent> <Leader>gg :<C-u>Gina status<CR>
nnoremap <silent> <Leader>gA :<C-u>Gina changes HEAD<CR>
nnoremap <silent> <Leader>gc :<C-u>Gina commit<CR>
nnoremap <silent> <Leader>gC :<C-u>Gina commit --amend<CR>
nnoremap <silent> <Leader>gb :<C-u>Gina branch -av<CR>
nnoremap <silent> <Leader>gt :<C-u>Gina tag<CR>
nnoremap <silent> <Leader>gq :<C-u>Gina qrep<CR>
nnoremap <silent> <Leader>gd :<C-u>Gina diff<CR>
nnoremap <silent> <Leader>gs :<C-u>Gina df<CR>
nnoremap <silent> <Leader>gD :<C-u>Gina changes origin/HEAD...<CR>
nnoremap <silent> <Leader>gl :<C-u>Gina log<CR>
nnoremap <silent> <Leader>gL :<C-u>Gina log %<CR>
nnoremap <silent> <Leader>gf :<C-u>Gina ls<CR>
nnoremap <silent> <Leader>gp :<C-u>Gina!! add -p<CR>
let g:gina#core#spinner#delaytime = 10
'''
hook_source = '''
call gina#custom#command#alias('branch', 'br')
call gina#custom#command#alias('diff', 'df')
call gina#custom#command#option('df', '--stat')
call gina#custom#command#option(
    \ '/\%(log\|reflog\|diff\)',
    \ '--opener', 'vsplit'
    \)
call gina#custom#command#option(
    \ '/\%(status\|branch\|ls\|grep\|changes\|tag\|df\)',
    \ '--opener' , 'botright 10split'
    \)
call gina#custom#command#option('commit', '--opener' , 'split')
call gina#custom#command#option('log', '--group', 'log-viewer')
call gina#custom#command#option('status', '--group', 'status-viewer')
call gina#custom#command#option('reflog', '--group', 'reflog-viewer')
call gina#custom#command#option('commit', '-v|--verbose')
call gina#custom#command#option('branch', '-v', 'v')
call gina#custom#command#option('status', '--short')
call gina#custom#command#option('status', '--branch')
call gina#custom#command#option('/\%(status\|commit\)', '-u|--untracked-files')
"call gina#custom#command#option(
"\ '/\%(status\|changes\)',
"\ '--ignore-submodules'
"\)

"call gina#custom#action#alias(
"\ 'branch', 'track',
"\ 'checkout:track'
"\)
call gina#custom#action#alias( 'branch', 'merge', 'commit:merge')
call gina#custom#action#alias( 'branch', 'rebase', 'commit:rebase')
call gina#custom#mapping#nmap(
    \ '/.*', 'q',
    \ ':close<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'diff', 'q',
    \ ':bdelete<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'compare', 'q',
    \ ':close<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'status', '<C-^>',
    \ ':<C-u>Gina commit<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'commit', '<C-^>',
    \ ':<C-u>Gina status<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'status', '<C-6>',
    \ ':<C-u>Gina commit<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'commit', '<C-6>',
    \ ':<C-u>Gina status<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'commit', 'I',
    \ 'ggI',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#action#alias(
      \ '/\%(blame\|log\|reflog\)',
      \ 'preview',
      \ 'topleft show:commit:preview',
      \)
call gina#custom#mapping#nmap(
      \ '/\%(blame\|log\|reflog\)',
      \ 'p',
      \ ':<C-u>call gina#action#call(''preview'')<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)
call gina#custom#action#alias(
      \ '/\%(blame\|log\|reflog\)',
      \ 'changes',
      \ 'topleft changes:of:preview',
      \)
call gina#custom#mapping#nmap(
      \ '/\%(blame\|log\|reflog\)',
      \ 'c',
      \ ':<C-u>call gina#action#call(''changes'')<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)
call gina#custom#execute(
      \ '/\%(ls\|log\|reflog\|grep\)',
      \ 'setlocal noautoread',
      \)
call gina#custom#execute(
      \ '/\%(status\|branch\|ls\|log\|reflog\|grep\)',
      \ 'setlocal cursorline',
      \)
'''

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {x = '<Plug>(niceblock-'}
hook_add = '''
  xmap I  <Plug>(niceblock-I)
  xmap A  <Plug>(niceblock-A)
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
on_cmd = ['Vista']
hook_add ='''
let g:vista_icon_indent = ["▸ ", ""]
let g:vista_echo_cursor = 1
let g:vista_cursor_delay = 200
let g:vista_echo_cursor_strategy = 'floating_win'
let g:vista_finder_alternative_executives = ['vim_lsp']
let g:vista#renderer#enable_icon = 0
'''

[[plugins]]
on_map = {nxo = '<Plug>Commentary'}
repo = 'tpope/vim-commentary'
hook_add = '''
if !hasmapto('<Plug>Commentary') || maparg('gc','n') ==# ''
  xmap gc  <Plug>Commentary
  nmap gc  <Plug>Commentary
  omap gc  <Plug>Commentary
  nmap gcc <Plug>CommentaryLine
  if maparg('c','n') ==# '' && !exists('v:operator')
    nmap cgc <Plug>ChangeCommentary
  endif
  nmap gcu <Plug>Commentary<Plug>Commentary
endif
'''

# [[plugins]]
# on_ft = 'go'
# repo = 'mattn/vim-goimports'

# [[plugins]]
# repo = 'fatih/vim-go'
# on_ft = ['go']
# hook_add = '''
# let g:go_snippet_engine = "neosnippet"
# let g:go_gopls_enabled = 0
# " highlight
# let g:go_highlight_functions = 1
# let g:go_highlight_function_parameters = 1
# let g:go_highlight_types = 1
# " let g:go_highlight_fields = 1
# " let g:go_highlight_build_constraints = 1
# let g:go_highlight_generate_tags = 1
# let g:go_highlight_variable_declarations = 1
# '''

# vim:set foldmethod=marker:
