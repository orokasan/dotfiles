[[plugins]]
lazy = 1
repo =  'itchyny/lightline.vim'
hook_add = '''
if v:vim_did_enter
  set laststatus=0
endif
autocmd vimrc VimEnter * call timer_start(0, { -> dein#source('lightline.vim') })
autocmd vimrc VimEnter * call timer_start(0, { -> dein#source('lightline.vim') })
'''
hook_source = '''
source ~/dotfiles/nvim/rc/config/lightline.rc.vim
let &laststatus = has('nvim') ? 2 : 2
'''

[[plugins]]
depends = ['lightline.vim', 'nvim-lspconfig']
on_source = ['nvim-lspconfig']
lazy = 1
if = 'has("nvim")'
repo = 'josa42/nvim-lightline-lsp'
hook_source = '''
    "autocmd DiagnosticChanged * call lightline#update()
    let g:lightline#lsp#indicator_warnings = ' '
    let g:lightline#lsp#indicator_errors = ' '
    let g:lightline#lsp#indicator_hints = ' '
    call lightline#lsp#register()
'''

[[plugins]]
lazy = 1
repo =  'itchyny/vim-gitbranch'
on_source = ['lightline.vim']
depends = ['lightline.vim']

[[plugins]]
repo = 'glidenote/memolist.vim'
on_cmd = ['MemoNew', 'MemoGrep' , 'MemoList']
hook_add = '''
nnoremap <Leader>mn <Cmd>MemoNew<CR>
nnoremap <silent> sl <cmd>call ddu#start({'sources': [{'name': 'file_external', 'params': {'path': expand('~/GoogleDrive/memo')}}]})<CR>
nnoremap <silent> ml <cmd>call ddu#start({'sources': [{'name': 'file_external', 'params': {'path': expand('~/GoogleDrive/memo')}}]})<CR>
nnoremap <silent><Leader>mg  <Cmd>Denite 
    \ -buffer-name=default
    \ grep:~/GoogleDrive/memo::<CR>
" use denite (default 0)
let g:memolist_denite = 1
let g:memolist_memo_suffix = 'md'
let g:memolist_path = "~/GoogleDrive/memo"
let g:memolist_template_dir_path = "~/GoogleDrive/template/memolist"
let g:memolist_memo_date = "%Y%m%d[%H:%M]"
let g:memolist_filename_date = "%y%m%d"

let g:memolist_prompt_categories = 0
'''

[[plugins]]
repo =  'cohama/lexima.vim'
if = 'has("nvim")'
on_event = ['InsertEnter', 'CmdlineEnter']
hook_source = '''
let g:lexima_ctrlh_as_backspace = v:true
let g:lexima_enable_endwise_rules = v:false
let g:lexima_accept_pum_with_enter = v:false
let g:lexima_no_default_rules = v:true

call lexima#set_default_rules()

let s:lexima_my_rules = [
\ { 'char': '"', 'input': '"', 'filetype': 'toml' },
\ { 'char': '"', 'input': '"', 'filetype': 'toml' },
\ { 'char': '[', 'at': '^\s*[\*-]\%#', 'input': ' [ ] ', 'filetype': 'markdown' },
\ { 'char': '[', 'at': '[\*-]\s\%#', 'input': '[ ] ', 'filetype': 'markdown' },
\ { 'char': "'", 'at': "\%#'", 'input': "'",'input_after': "'", 'syntax': 'String' },
\ ]

for rule in s:lexima_my_rules
  call lexima#add_rule(rule)
endfor

"qqq Simple usage
LeximaAlterCommand ee e!
LeximaAlterCommand ee e!

" With atom ( Read `:h \%[]` )
LeximaAlterCommand cap\%[ture] Capture
LeximaAlterCommand r\%[un]     QuickRun
LeximaAlterCommand s\%[et] set
cnoremap <CR> <Plug>(kensaku-search-replace)<CR>
'''
[[plugins]]
lazy = 1
repo = 'yuki-yano/lexima-alter-command.vim'
hook_source = '''
'''

[[plugins]]
repo = 'rhysd/clever-f.vim'
on_map = { nxo = '<Plug>(clever-f' }
hook_add = '''
"mapping for lazy load
nmap f <Plug>(clever-f-f)
xmap f <Plug>(clever-f-f)
omap f <Plug>(clever-f-f)
nmap F <Plug>(clever-f-F)
xmap F <Plug>(clever-f-F)
omap F <Plug>(clever-f-F)
nmap t <Plug>(clever-f-t)
xmap t <Plug>(clever-f-t)
omap t <Plug>(clever-f-t)
nmap T <Plug>(clever-f-T)
xmap T <Plug>(clever-f-T)
omap T <Plug>(clever-f-T)
" let g:clever_f_show_prompt = 1
let g:clever_f_mark_cursor = 1
" let g:clever_f_mark_char = 1
" let g:clever_f_mark_char_color = "Underlined"
let g:clever_f_chars_match_any_signs = ';:'
let g:clever_f_hide_cursor_on_cmdline = 1
let g:clever_f_smart_case = 1
let g:clever_f_across_no_line = 1
let g:clever_f_use_migemo = 1
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
depends = 'vim-quickrun-neovim-job'
on_cmd = ['QuickRun']
on_map = { nx = '<Plug>(quickrun' }
hook_add = '''
nmap <Leader>q <Plug>(quickrun)
xmap <Leader>q <Plug>(quickrun)
let g:quickrun_config = {'_': {}}
let g:quickrun_config = {
    \ "_" : {
        \ 'outputter' : 'error',
        \ 'outputter/error/error' : 'quickfix',
        \ "hook/close_unite_quickfix/enable_hook_loaded" : 1,
        \ "hook/unite_quickfix/enable_failure" : 1,
        \ "hook/close_quickfix/enable_exit" : 1,
        \ "hook/close_buffer/enable_failure" : 1,
        \ 'hook/output_encode/encoding': 'utf-8',
        \ "hook/close_buffer/enable_empty_data" : 1,
        \ "outputter/buffer/split" : "botright8",
        \ "outputter/buffer/close_on_empty" : 1
    \ },
    \ 'java': {
        \   'exec': ['javac %o -d %s:p:h %s', '%c -cp %s:p:h %s:t:r %a'],
        \   'hook/sweep/files': '%s:p:r.class',
        \ },
    \ 'vim': {
        \ "outputter/buffer/close_on_empty" : 1
        \ }
\ }

if has('win32') || has('win64')
    let g:quickrun_config['python'] = { 
    \   "hook/output_encode/enable" : 1,
    \   "hook/output_encode/encoding" : "cp932",
    \}
else
let g:quickrun_config['python'] = {
    \   "hook/output_encode/enable" : 1,
    \   'hook/output_encode/encoding': 'utf-8',
    \ }
endif
let g:quickrun_config['cpp'] = {'type': 'cpp/clang++zz'}

let g:quickrun_config['tex'] = {
            \   'command' : 'lualatex',
            \ 'runner' : 'shell',
            \   'outputter' : 'error',
            \   'outputter/error/error' : 'quickfix',
            \   'cmdopt': '',
            \   'exec': ['%c %o %s']
            \ }
let s:pandoc_option = '--pdf-engine=lualatex -V documentclass=jlreq -s --wrap=preserve'
if executable('lualatex')
    let s:pandoc_option = '--pdf-engine=lualatex -V documentclass=jlreq -s --wrap=preserve --template=./templates/latex_template.tex --lua-filter=./templates/filter.lua'
    "let s:pandoc_option =+ filereadable('./templates/latex_template.tex') ? ' --template=./templates/latex_template.tex' : ''
    "let s:pandoc_option =+ filereadable('./templates/filter.lua') ? ' --lua-filter=./templates/filter.lua' : ''
else
    let s:pandoc_option = ''
endif
if has('win32')
    let s:quickrun_open = 'cmd.exe /c start'
else
    let s:quickrun_open = 'open'
endif
let g:quickrun_config['markdown'] = {
            \   'command' : 'pandoc',
            \   'outputter' : 'error',
            \   'outputter/error/error' : 'quickfix',
            \   'exec': ['%c %s --pdf-engine=lualatex -V -s --wrap=preserve --template=%s:.:h/templates/latex_template.tex --lua-filter=%s:.:h/templates/filter.lua -o %s:p:h/out/%s:t:r.pdf ']
            \ }

let g:quickrun_config._ = {
  \ 'runner': 'neovim_job',
  \ }
let g:quickrun_config['text'] = {
            \   'command' : 'npx',
            \   'outputter' : 'message',
            \   'cmdopt': 'textlint',
            \   'exec': ['%c %o %s']
            \ }
let g:quickrun_config['typescript'] = {
            \   'command' : 'deno',
            \   'outputter' : 'buffer',
            \   'cmdopt': 'run --allow-read',
            \   'exec': ['%c %o %s']
            \ }
'''

[[plugins]]
repo = 'mbbill/undotree'
on_cmd = ['UndotreeToggle']
hook_add = '''
nnoremap U <Cmd>UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle = 1
let g:undotree_DiffAutoOpen = v:false
let g:undotree_WindowLayout = 2
'''

[[plugins]]
repo = 't9md/vim-textmanip'
on_map = { x = '<Plug>(textmanip'}
hook_add = '''
xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-l> <Plug>(textmanip-move-right)
" toggle insert/replace with <F10>
" nmap <F10> <Plug>(textmanip-toggle-mode)
" xmap <F10> <Plug>(textmanip-toggle-mode)
'''

[[plugins]]
on_map = {nxo = '<Plug>Commentary'}
repo = 'tpope/vim-commentary'
hook_add = '''
if !hasmapto('<Plug>Commentary') || maparg('gc','n') ==# ''
  xmap gc  <Plug>Commentary
  nmap gc  <Plug>Commentary
  omap gc  <Plug>Commentary
  nmap gcc <Plug>CommentaryLine
  if maparg('c','n') ==# '' && !exists('v:operator')
    nmap cgc <Plug>ChangeCommentary
  endif
  nmap gcu <Plug>Commentary<Plug>Commentary
endif
'''

[[plugins]]
repo = 'previm/previm'
depends = 'open-browser.vim'
on_cmd = ['PrevimOpen']
hook_add = '''
" let g:previm_open_cmd = 'open -a FireFox\ Nightly'
nnoremap <silent><Leader>mp <Cmd>PrevimOpen<CR>
let g:previm_enable_realtime = 1
'''

[[plugins]]
on_cmd = ['Gina']
repo =  'lambdalisue/gina.vim'
hook_add = '''
autocmd BufReadPre gina://* set noswapfile
let g:gina#command#status#use_default_mappings=0
function! s:make_abbrev_rule(rules)
  let keys = uniq(sort(map(copy(a:rules), "v:val['from']")))
  for key in keys
    let rules_with_key = filter(copy(a:rules), "v:val['from'] ==# '" .. key .. "'")
    let dict = {}
    for val in rules_with_key
      if has_key(val, 'prepose')
        let dict[val['prepose'] .. ' ' .. key] = (val['to'])
      else
        let dict[key] = val['to']
      endif
    endfor
    exec 'cnoreabbrev <expr> ' .. key .. ' '
        \ .. '(getcmdtype() !=# ":")? "' .. key .. '" : '
        \ .. 'get(' .. string(dict) .. ', getcmdline(), "' .. key .. '")'
  endfor
endfunction
call s:make_abbrev_rule([
    \   {'from': 'gi', 'to': 'Gina'},
    \   {'from': 'gc', 'to': 'Gina! commit -am'},
    \   {'from': 'gf', 'to': 'Gina! commit --fixup HEAD'},
    \   {'from': 'gp', 'to': 'Gina push'},
    \   {'prepose': 'Gina commit', 'from': 'a', 'to': '--amend'},
    \ ])
nnoremap <silent> <Leader>gg <Cmd>Gina status<CR>
nnoremap <silent> ` <Cmd>Gina status<CR>
nnoremap <silent> <Leader>gA <Cmd>Gina changes HEAD<CR>
nnoremap <silent> <Leader>ga <Cmd>Gina add %<CR>
nnoremap <silent> <Leader>gc <Cmd>Gina commit<CR>
nnoremap <silent> <Leader>gC <Cmd>Gina commit --amend<CR>
nnoremap <silent> <Leader>gb <Cmd>Gina branch -av<CR>
nnoremap <silent> <Leader>gB <Cmd>nos Gina blame<CR>
nnoremap <silent> <Leader>gt <Cmd>Gina tag<CR>
nnoremap <silent> <Leader>gq <Cmd>Gina qrep<CR>
nnoremap <silent> <Leader>gd <Cmd>nos Gina compare<CR>zz
nnoremap <silent> <Leader>gs <Cmd>Gina df<CR>
nnoremap <silent> <Leader>gl <Cmd>Gina log<CR>
nnoremap <silent> <Leader>gL <Cmd>Gina log :<CR>
nnoremap <silent> <Leader>gr <Cmd>Gina reflog<CR>
nnoremap <silent> <Leader>gf <Cmd>Gina ls<CR>
nnoremap <silent> <Leader>gp <Cmd>Gina!! add -p<CR>
let g:gina#core#spinner#delaytime = 10
'''

hook_source = '''
call gina#custom#command#alias('branch', 'br')
call gina#custom#command#alias('diff', 'df')
call gina#custom#command#option('df', '--stat')
call gina#custom#command#option(
    \ '/\%(log\|reflog\|diff\)',
    \ '--opener', 'vsplit'
    \)
call gina#custom#command#option(
    \ '/\%(status\|branch\|ls\|grep\|changes\|tag\|df\)',
    \ '--opener' , 'botright 10split'
    \)
call gina#custom#command#option('commit', '--opener' , 'split')
call gina#custom#command#option('log', '--group', 'log-viewer')
call gina#custom#command#option('diff', '--group', 'log-viewer')
call gina#custom#command#option('status', '--group', 'status-viewer')
call gina#custom#command#option('reflog', '--group', 'reflog-viewer')
call gina#custom#command#option('commit', '-v|--verbose')
call gina#custom#command#option('commit', '--group', 'status-viewer')
" call gina#custom#command#option('diff', '-U0')
call gina#custom#command#option('compare', '-R')
call gina#custom#command#option('branch', '-v', 'v')
call gina#custom#command#option('status', '--short')
call gina#custom#command#option('status', '--branch')
call gina#custom#command#option('log', '--graph')
call gina#custom#command#option('/\%(status\|commit\)', '-u|--untracked-files')
"call gina#custom#command#option(
"\ '/\%(status\|changes\)',
"\ '--ignore-submodules'
"\)
"call gina#custom#action#alias(
"\ 'branch', 'track',
"\ 'checkout:track'
"\)
call gina#custom#action#alias( 'branch', 'merge', 'commit:merge')
call gina#custom#action#alias( 'branch', 'rebase', 'commit:rebase')
call gina#custom#mapping#nmap(
    \ '/.*', 'q',
    \ ':close<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ '/.*', '<TAB>',
      \ ':call gina#action#call(''builtin:choice'')<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'status', '<C-^>',
    \ '<Cmd>Gina commit<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'commit', '<C-^>',
    \ '<Cmd>Gina status<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'status', '<C-6>',
    \ '<Cmd>Gina commit<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
      \ 'status', 'a',
      \ ':call gina#action#call(''toggle'')<CR>',
      \ {'noremap': 1, 'silent': 1},
      \)
call gina#custom#mapping#vmap(
    \ 'status', '-',
      \ ':call gina#action#call(''toggle'')<CR>',
    \ { 'noremap':1, 'silent': 1, 'nowait': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'status', 'c',
    \ '<Cmd>Gina commit<CR>',
    \ {'noremap': 1, 'silent': 1, 'nowait':1}
    \)
call gina#custom#mapping#nmap(
    \ 'commit', '<C-6>',
    \ '<Cmd>Gina status<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'commit', 'I',
    \ 'ggI',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#action#alias(
      \ '/\%(blame\|log\|reflog\)',
      \ 'preview',
      \ 'topleft show:commit:preview',
      \)
call gina#custom#action#alias(
      \ '/\%(blame\|log\|reflog\)',
      \ 'preview',
      \ 'show:commit:above',
      \)
call gina#custom#mapping#nmap(
      \ '/\%(blame\|log\|reflog\)',
      \ 'yy',
      \ '<Cmd>call gina#action#call(''yank:rev'')<CR>',
      \ {'noremap': 1}
      \)
call gina#custom#mapping#nmap(
      \ '/\%(blame\|log\|reflog\)',
      \ 'yy',
      \ '<Cmd>call gina#action#call(''yank:rev'')<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)
call gina#custom#mapping#nmap(
      \ '/\%(change\)',
      \ 'c',
      \ '<Cmd>call gina#action#call(''compare'')<CR>',
      \ {'noremap': 1, 'silent': 1, 'nowait': 1}
      \)
call gina#custom#action#alias(
      \ '/\%(blame\|log\|reflog\)',
      \ 'changes',
      \ 'changes:of:split',
      \)
call gina#custom#mapping#nmap(
      \ '/\%(blame\|log\|reflog\)',
      \ 'c',
      \ '<Cmd>call gina#action#call(''changes'')<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)
"call gina#custom#execute(
"      \ '/\%(ls\|log\|reflog\|grep\)',
"      \ 'setlocal noautoread',
"      \)
call gina#custom#execute(
      \ '/\%(status\|branch\|ls\|log\|reflog\|grep\)',
      \ 'setlocal cursorline',
      \)
call gina#custom#execute(
      \ '/\%(status\|branch\|ls\|log\|reflog\|grep\)',
      \ 'setlocal winfixheight',
      \)
'''

[[plugins]]
on_cmd = 'GitMessenger'
on_map = '<Plug>(git-messenger'
repo = 'rhysd/git-messenger.vim'
hook_add = '''
nmap <Leader>gm <Plug>(git-messenger)
let g:git_messenger_always_into_popup = v:true
'''

[[plugins]]
on_event = ['InsertEnter']
on_source = ['ddc.nvim']
repo = 'hrsh7th/vim-vsnip'
hook_add = '''
let g:vsnip_snippet_dir = expand('~/GoogleDrive/config/.vsnip')
let g:vsnip_choice_delay = 10
let g:popup_preview_config = {
    \ 'supportVsnip' : v:true
      \ }
'''

[[plugins]]
on_event = ['InsertEnter']
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
on_source = ['vim-vsnip-integ']
repo = 'rafamadriz/friendly-snippets'

[[plugins]]
repo = 'mattn/vim-maketable'
on_cmd = ['MakeTable']

[[plugins]]
on_ft = ['vim']
repo = 'rbtnn/vim-vimscript_indentexpr'

[[plugins]]
repo =  'mattn/vim-sonictemplate'
on_cmd = ['Template']
on_event = ['InsertEnter']
hook_add = '''
let g:sonictemplate_vim_template_dir = '~/GoogleDrive/config/template/'
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = { nx = '<Plug>(asterisk-' }
lua_add = '''
local kopts = { noremap = true, silent = true }

vim.api.nvim_set_keymap('n', 'n',
  [[<Cmd>execute('normal! ' . v:count1 . 'n')<CR><Cmd>lua require('hlslens').start()<CR>zz]],
  kopts)
vim.api.nvim_set_keymap('n', 'N',
  [[<Cmd>execute('normal! ' . v:count1 . 'N')<CR><Cmd>lua require('hlslens').start()<CR>zz]],
  kopts)

vim.api.nvim_set_keymap('x', '*', [[<Plug>(asterisk-z*)<Cmd>lua require('hlslens').start()<CR>]], {})
vim.api.nvim_set_keymap('x', '#', [[<Plug>(asterisk-z#)<Cmd>lua require('hlslens').start()<CR>]], {})
vim.api.nvim_set_keymap('x', 'g*', [[<Plug>(asterisk-gz*)<Cmd>lua require('hlslens').start()<CR>]], {})
vim.api.nvim_set_keymap('x', 'g#', [[<Plug>(asterisk-gz#)<Cmd>lua require('hlslens').start()<CR>]], {})
vim.api.nvim_set_keymap('n', '*', [[<Plug>(asterisk-z*)<Cmd>lua require('hlslens').start()<CR>]], {})
vim.api.nvim_set_keymap('n', '#', [[<Plug>(asterisk-z#)<Cmd>lua require('hlslens').start()<CR>]], {})
vim.api.nvim_set_keymap('n', 'g*', [[<Plug>(asterisk-gz*)<Cmd>lua require('hlslens').start()<CR>]], {})
vim.api.nvim_set_keymap('n', 'g#', [[<Plug>(asterisk-gz#)<Cmd>lua require('hlslens').start()<CR>]], {})
'''

[[plugins]]
repo =  'kana/vim-operator-user'
on_event = ["BufRead"]

[[plugins]]
repo = 'kana/vim-textobj-user'
on_event = ["BufRead"]
hook_source = '''
" https://github.com/todesking/dotfiles/blob/master/nvim/plug/plugins.vim
call textobj#user#plugin('lastmofified', {
\   'lastmodified': {
\     'select-a': 'ag',
\     'select-a-function': 'g:Vimrc_select_a_last_modified',
\   },
\ })
'''

[[plugins]]
depends = ['vim-textobj-user']
# on_event = ["BufRead"]
on_map = { ox = '<Plug>(textobj-entire' }
# ae, ie
repo = 'kana/vim-textobj-entire'
hook_add = '''
xmap ae <Plug>(textobj-entire-a)
omap ae <Plug>(textobj-entire-a)
xmap ie <Plug>(textobj-entire-i)
omap ie <Plug>(textobj-entire-i)
'''

[[plugins]]
depends = ['vim-textobj-user']
on_event = ["BufRead"]
# gb
repo = 'saaguero/vim-textobj-pastedtext'
hook_add = '''
let g:pastedtext_select_key = 'gb'
'''

[[plugins]]
# ay, iy
depends = ['vim-textobj-user']
on_map = { ox = '<Plug>(textobj-syntax' }
repo = 'kana/vim-textobj-syntax'
hook_add = '''
xmap ay <Plug>(textobj-syntax-a)
omap ay <Plug>(textobj-syntax-a)
xmap iy <Plug>(textobj-syntax-i)
omap iy <Plug>(textobj-syntax-i)
'''

[[plugins]]
# al, il
depends = ['vim-textobj-user']
on_map = { ox = '<Plug>(textobj-line' }
repo = 'kana/vim-textobj-line'
hook_add = '''
xmap al <Plug>(textobj-line-a)
omap al <Plug>(textobj-line-a)
xmap il <Plug>(textobj-line-i)
omap il <Plug>(textobj-line-i)
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
on_map = { nox = '<Plug>(operator-replace' }
depends = 'vim-operator-user'
hook_add = '''
nmap _ <Plug>(operator-replace)
vmap _ <Plug>(operator-replace)
omap _ <Plug>(operator-replace)
'''

# [[plugins]]
# # av, iv
# # aV, iV
# depends = ['vim-textobj-user']
# repo = 'rhysd/vim-textobj-word-column'
# hook_add = '''
# xmap av <Plug>(textobj-wordcolumn-w-a)
# omap av <Plug>(textobj-wordcolumn-w-a)
# xmap iv <Plug>(textobj-wordcolumn-w-i)
# omap iv <Plug>(textobj-wordcolumn-w-i)
# xmap aV <Plug>(textobj-wordcolumn-W-a)
# omap aV <Plug>(textobj-wordcolumn-W-a)
# xmap iV <Plug>(textobj-wordcolumn-W-i)
# omap iV <Plug>(textobj-wordcolumn-W-i)
# '''

[[plugins]]
repo =  'machakann/vim-sandwich'
lazy = 1
on_map = { nox = ['<Plug>(operator-sandwich-', '<Plug>(textobj-sandwich-']}
hook_add = '''
let g:sandwich_no_default_key_mappings = 1
let g:operator_sandwich_no_default_key_mappings = 1

nnoremap <silent> 'd <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)
nnoremap <silent> 'r <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-query-a)
nnoremap <silent> 'db <Plug>(operator-sandwich-delete)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
nnoremap <silent> 'rb <Plug>(operator-sandwich-replace)<Plug>(operator-sandwich-release-count)<Plug>(textobj-sandwich-auto-a)
onoremap  ib <Plug>(textobj-sandwich-auto-i)
xnoremap  ib <Plug>(textobj-sandwich-auto-i)
onoremap  ab <Plug>(textobj-sandwich-auto-a)
xnoremap  ab <Plug>(textobj-sandwich-auto-a)
onoremap  i' <Plug>(textobj-sandwich-query-i)
xnoremap  i' <Plug>(textobj-sandwich-query-i)
onoremap  a' <Plug>(textobj-sandwich-query-a)
xnoremap  a' <Plug>(textobj-sandwich-query-a)

" add
nnoremap  'a <Plug>(operator-sandwich-add)
xnoremap  'a <Plug>(operator-sandwich-add)
onoremap  'a <Plug>(operator-sandwich-g@)

" delete
xnoremap  'd <Plug>(operator-sandwich-delete)
"replace
xnoremap  'r <Plug>(operator-sandwich-replace)
nmap 'dd 'db
nmap 'rr vab'r
'''
hook_source = '''
let g:textobj#sandwich#stimeoutlen = 100
let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)
let g:sandwich#recipes += [{'buns' : ['「', '」'], 'nesting':1, 'input':['b']}]
let g:sandwich#recipes += [{'buns' : ['【', '】'], 'nesting':1, 'input':['k']}]
let g:sandwich#recipes += [{'buns' : ['（', '）'], 'nesting':1, 'input':['p']}]
let g:sandwich#recipes += [{'buns' : ['『', '』'], 'nesting':1, 'input':['d']}]
let g:sandwich#recipes += [{'buns' : ['「', '」'], 'nesting':1, 'input':['B']}]
let g:sandwich#recipes += [{'buns' : ['【', '】'], 'nesting':1, 'input':['K']}]
let g:sandwich#recipes += [{'buns' : ['（', '）'], 'nesting':1, 'input':['P']}]
let g:sandwich#recipes += [{'buns' : ['『', '』'], 'nesting':1, 'input':['D']}]
let g:sandwich#recipes += [{'buns' : ['［', '］'], 'nesting':1, 'input':['U']}]
let g:sandwich#recipes += [{'buns' : ['“', '”'], 'nesting':1, 'input':['q']}]
let g:sandwich#recipes += [{'buns' : ['〓赤〓', '〓/赤〓'], 'nesting':1, 'input':['1']}]
let g:sandwich#recipes += [{'buns' : ['〓等幅〓', '〓/等幅〓'], 'nesting':1, 'input':['2']}]
let g:sandwich#recipes += [{'buns' : ['〓太〓', '〓/太〓'], 'nesting':1, 'input':['3']}]
let g:sandwich#recipes += [{'buns' : ['〓下〓', '〓/下〓'], 'nesting':1, 'input':['4']}]
let g:sandwich#recipes += [{'buns' : ['〓リ/〓', '〓/リ〓'], 'nesting':1, 'input':['5']}]
let g:sandwich#recipes += [{'buns' : ['〓リ注白〓', '〓/リ注白〓'], 'nesting':1, 'input':['6']}]
let g:sandwich#recipes += [{'buns' : ['〓リ白/〓', '〓/リ白〓'], 'nesting':1, 'input':['7']}]
let g:sandwich#recipes += [{'buns' : ['〓リ注黒〓', '〓/リ注黒〓'], 'nesting':1, 'input':['8']}]
let g:sandwich#recipes += [{'buns' : ['〓箇条中〓', ''], 'nesting':1, 'input':['9']}]
let g:sandwich#recipes += [{'buns' : ['〓斜〓', '〓/斜〓'], 'nesting':1, 'input':['0']}]
" let g:sandwich#recipes += [{'buns' : ['●', '●'], 'nesting':1, 'input':['1']}]
" let g:sandwich#recipes += [{'buns' : ['◆', '◆'], 'nesting':1, 'input':['2']}]
" let g:sandwich#recipes += [{'buns' : ['▲', '▲'], 'nesting':1, 'input':['3']}]
" let g:sandwich#recipes += [{'buns' : ['▼', '▼'], 'nesting':1, 'input':['4']}]
" let g:sandwich#recipes += [{'buns' : ['▽', '▽'], 'nesting':1, 'input':['5']}]
" let g:sandwich#recipes += [{'buns' : ['★', '★'], 'nesting':1, 'input':['6']}]
" let g:sandwich#recipes += [{'buns' : ['☆', '☆'], 'nesting':1, 'input':['7']}]
" let g:sandwich#recipes += [{'buns' : ['◇', '◇'], 'nesting':1, 'input':['8']}]
" let g:sandwich#recipes += [{'buns' : ['<s>', '<\s>'], 'nesting':1, 'input':['s']}]
let g:sandwich#recipes += [{'buns' : ['□', '□'], 'nesting':1, 'input':['c']}]
let g:sandwich#recipes += [{'buns' : ['〓', '〓'], 'nesting':1, 'input':['n']}]
call operator#sandwich#set('all', 'all', 'highlight', 0)
autocmd dein FileType markdown call sandwich#util#addlocal([
  \   {'buns': ['**', '**'], 'nesting': 1, 'input': ['B']},
  \   {'buns': ['*', '*'], 'nesting': 1, 'input': ['I']},
  \ ])
'''
[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_cmd = ['Switch']
hook_add = '''
nnoremap ! <cmd>Switch<CR>
nnoremap gs <cmd>Switch<CR>
let g:switch_custom_definitions =
    \ [
    \ ['一' ,'1', '①'],
    \ ['二' ,'2', '②'],
    \ ['三' ,'3', '③'],
    \ ['四' ,'4', '④'],
    \ ['五' ,'5', '⑤'],
    \ ['六' ,'6', '⑥'],
    \ ['七' ,'7', '⑦'],
    \ ['八' ,'8', '⑧'],
    \ ['九' ,'9', '⑨'],
    \ ['零' ,'0', '⑩'],
    \ ]
'''

[[plugins]]
if = '!has("kaoriya")'
# repo = 'deton/jasentence.vim'
repo = 'orokasan/jasentence.vim'
on_map = { nox = '<Plug>JaSentence' }
hook_add = '''
let g:jasentence_endpat = '[、。，．？！$]\+'
let g:jasentence_no_default_key_mappings = 1
  nmap <silent> ) <Plug>JaSentenceMoveNF
  nmap <silent> ( <Plug>JaSentenceMoveNB
  omap <silent> ) <Plug>JaSentenceMoveOF
  omap <silent> ( <Plug>JaSentenceMoveOB
  xmap <silent> ) <Plug>JaSentenceMoveVF
  xmap <silent> ( <Plug>JaSentenceMoveVB
  omap <silent> as <Plug>JaSentenceTextObjA
  omap <silent> is <Plug>JaSentenceTextObjI
  xmap <silent> as <Plug>JaSentenceTextObjVA
  xmap <silent> is <Plug>JaSentenceTextObjVI
'''

[[plugins]]
on_source = ['vim-quickrun']
repo = 'itchyny/vim-quickrun-lightline-hooks'

[[plugins]]
if = 'has("nvim")'
on_source = ['vim-quickrun']
repo = 'lambdalisue/vim-quickrun-neovim-job'

# repo = 'airblade/vim-gitgutter'
# hook_add = '''
# let g:gitgutter_sign_added = '++'
# let g:gitgutter_sign_modified = '~~'
# let g:gitgutter_sign_removed = '--'
# let g:gitgutter_sign_removed_first_line = '__'
# let g:gitgutter_sign_modified_removed = '+-'
# let g:gitgutter_sign_priority = 0
# let g:gitgutter_preview_win_floating = 0
# autocmd dein ColorScheme * highlight link GitGutterAdd String
# autocmd dein ColorScheme * highlight link GitGutterChange Constant
# nmap <Leader>xp <Plug>(GitGutterPreviewHunk)
# nmap <Leader>xx <Plug>(GitGutterStageHunk)
# nmap <Leader>xu <Plug>(GitGutterUndoHunk)
# '''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_ft = ['qf']
[plugins.ftplugin]
qf = '''
  nnoremap <buffer> r <Cmd>Qfreplace<CR>
'''

[[plugins]]
on_event = 'BufRead'
repo = 'rhysd/conflict-marker.vim'
hook_add = '''
'''
# [[plugins]]
# repo = 'Milly/vim-migemo'
# on_map = { n = '<Plug>(migemo-migemosearch' }

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {x = '<Plug>(niceblock-'}
hook_add = '''
  xmap I  <Plug>(niceblock-I)
  xmap A  <Plug>(niceblock-A)
'''

[[plugins]]
repo = 'goerz/jupytext.vim'
on_ft = 'ipynb'
hook_add = '''
let g:jupytext_enable = 1
'''

[[plugins]]
repo = 'koron/nyancat-vim'
on_cmd = ['Nyancat','Nyancat2']

[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = ['Capture']

[[plugins]]
repo = 'dstein64/vim-win'
on_cmd = ["WinWin"]
hook_add='''
nmap <C-Space> <Plug>WinWin
" map <C-w> :Win 1<CR>
let g:win_disable_version_warning = 1
let g:win_ext_command_map = {
      \   'c': 'wincmd c',
      \   'C': 'close!',
      \   'q': 'Win#exit',
      \   'Q': 'quit',
      \   'V': 'wincmd v',
      \   'S': 'wincmd s',
      \   'n': 'bnext',
      \   'N': 'bnext!',
      \   'p': 'bprevious',
      \   'P': 'bprevious!',
      \   "\<c-n>": 'tabnext',
      \   "\<c-p>": 'tabprevious',
      \   '=': 'wincmd =',
      \   't': 'tabnew',
      \   'x': 'Win#exit',
      \   '\<C-Space>': 'Win#exit',
      \ }
'''

[[plugins]]
on_func = ['magic#expr()']
repo = 'kawarimidoll/magic.vim'
hook_add = '''
cnoremap <expr> <C-x> magic#expr()
'''

[[plugins]]
repo =  'tyru/open-browser.vim'
on_map = "<Plug>(openbrowser-"
hook_add ='''
nmap <Leader>o <Plug>(openbrowser-smart-search)
xmap <Leader>o <Plug>(openbrowser-smart-search)
omap <Leader>O <Plug>(openbrowser-smart-search)
let g:openbrowser_message_verbosity = 1
autocmd FileType php let b:openbrowser_default_search = 'php'
autocmd FileType python let b:openbrowser_default_search = 'python'
'''

[[plugins]]
on_cmd = ['Crunch']
on_map = { nx = ['<Plug>(crunch','<Plug>(visual-crunch']  }
repo = 'arecarn/vim-crunch'
hook_add = '''
nnoremap  g= <Plug>(crunch-operator)
xnoremap g= <Plug>(visual-crunch-operator)
nnoremap g== <Plug>(crunch-operator-line)
'''

[[plugins]]
on_source = ['vim-crunch']
repo = 'arecarn/vim-selection'

[[plugins]]
repo = 'andymass/vim-matchup'
on_event = ["BufRead", "BufNew"]
hook_add = '''
let g:matchup_matchparen_offscreen = { "method":"popup" }
let g:matchup_matchparen_enabled = 0
let g:matchup_surround_enabled = 0
let g:matchup_matchparen_deferred = 0
"lvim.builtin.treesitter.matchup.enable = true
'''
# vim:set foldmethod=marker:
