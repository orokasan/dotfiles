[[plugins]]
repo =  'Shougo/denite.nvim'
# repo =  'orokasan/denite.nvim'
on_cmd = ['Denite', 'DeniteProjectDir', 'DeniteCursorWord']
hook_add = 'source ~/dotfiles/nvim/rc/config/denite.mapping.rc.vim'
hook_source = 'source ~/dotfiles/nvim/rc/config/denite.rc.vim'
[plugins.ftplugin]
denite = '''
if has('nvim')
let g:my_denite_filter_winblend_config = 1
let g:my_denite_filter_winblend_config = b:denite.buffer_name !~#
\ '\v(float|menu|relative)' ? 1 : 0
setlocal winblend=0
endif
setlocal signcolumn=no
nnoremap <silent><buffer><expr> j
\ line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k
\ line('.') == 1 ? 'G' : 'k'
nnoremap <silent><buffer><expr> l
    \ denite#do_map('do_action')
nnoremap <silent><buffer><expr> <2-LeftMouse>
    \ denite#do_map('do_action')
nnoremap <silent><buffer><expr> a
    \ denite#do_map('choose_action')
nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
nnoremap <silent><buffer><expr><nowait> s
    \ denite#do_map('do_action', 'splitswitch')
nnoremap <silent><buffer><expr> v
    \ denite#do_map('do_action', 'vsplitswitch')
nnoremap <silent><buffer><expr> h
    \ denite#do_map('move_up_path')
nnoremap <silent><buffer><expr><nowait> d
    \ denite#do_map('do_action', 'delete')
nnoremap <silent><buffer><expr> l
    \ denite#do_map('do_action')
if g:my_denite_filter_winblend_config
nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
else
nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'highlight')
endif
nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
nnoremap <silent><buffer><expr> t
    \ denite#do_map('toggle_select').'j'
nnoremap <silent><buffer><expr> A
    \ denite#do_map('toggle_select_all').'j'
nnoremap <silent><buffer><expr> r
    \ denite#do_map('toggle_matchers', 'matcher/regexp, matcher/fuzzy')
nnoremap <silent><buffer><expr> <C-r>
    \ denite#do_map('do_action','file/rec')
nnoremap <silent><buffer><expr> <C-e>
    \ denite#do_map('do_action','defx')
nnoremap <silent><buffer><expr> <C-d>
    \ denite#do_map('do_action','directory/rec')
nnoremap <silent><buffer><expr> <C-g>
    \ denite#do_map('do_action','grep')
nnoremap <silent><buffer><expr> <C-s>
    \ denite#do_map('change_sorters', 'sorter/rank,sorter/word')

if b:denite.buffer_name ==# 'combo'
  nnoremap <silent><buffer><expr> a
\ denite#do_map('do_action', 'A')
  nnoremap <nowait><silent><buffer><expr> s
\ denite#do_map('do_action', 'B')
  nnoremap <nowait><silent><buffer><expr> d
\ denite#do_map('do_action', 'C')
  nnoremap <silent><buffer><expr> p
\ denite#do_map('do_action', 'prefix')
  nnoremap <silent><buffer><expr> b
\ denite#do_map('do_action', 'any')
  nnoremap <silent><buffer><expr> u
\ denite#do_map('do_action', 'undo')
endif
'''
denite-filter = '''
if g:my_denite_filter_winblend_config ==# 1
    setlocal winblend=100
else
    setlocal winblend=0
endif
inoremap <silent><buffer> <CR> <ESC><C-w>p
nnoremap <silent><buffer> j  <C-w>p:call cursor(line('.')+1,0)<CR><C-w>p
nnoremap <silent><buffer> k  <C-w>p:call cursor(line('.')-1,0)<CR><C-w>p
inoremap <silent><buffer> <C-j>  <ESC><C-w>p:call cursor(line('.')+1,0)<CR><C-w>pA
imap <buffer> <C-l> <Plug>(eskk:toggle)
inoremap <silent><buffer> <C-k>  <ESC><C-w>p:call cursor(line('.')-1,0)<CR><C-w>pA
inoremap <silent><buffer><expr> ; denite#do_map('do_action')
inoremap z; ;
inoremap <silent><buffer><expr> <S-Tab> denite#do_map('choose_action')
imap <silent><buffer> <C-[> <Plug>(denite_filter_update)
imap <silent><buffer> <ESC> <Plug>(denite_filter_update)
imap <silent><buffer> <C-c> <Plug>(denite_filter_quit)q
nmap <silent><buffer> q <Plug>(denite_filter_quit)q
'''

[[plugins]]
repo =  'orokasan/defx.nvim'
# repo =  'Shougo/defx.nvim'
on_cmd = 'Defx'
hook_add = '''
nmap <C-e> <Plug>(defx)
nmap <Leader>e <Plug>(defxbufferdir)
nmap <Leader>E <Plug>(defxprojectdir)
nnoremap <silent> <Plug>(defx) :<C-u>Defx -resume<CR>
nnoremap <silent> <Plug>(defxbufferdir) :<C-u>Defx `expand('%:p:h')` -search=`expand('%:p')`<CR>
nnoremap <silent> <Plug>(defxprojectdir) :<C-u>Defx ~/<CR>
'''
hook_source = '''
let s:defx_ignore_files =
    \ '.*,ntuser*,desktop.ini,__pycache__,' .
    \ '*.aux,*.dvi,*.bbl,*.out,*.fdb_latexmk,*.bst,*.blg,*.toc,Icon'

call defx#custom#option('_', {
    \ 'winwidth': 35,
    \ 'split': 'vertical',
    \ 'direction': 'botright',
    \ 'columns':'mark:indent:icons:filename:size:space:time',
    \ 'sort': 'filename',
    \ 'ignored_files': s:defx_ignore_files
    \ })
call defx#custom#column('filename', {
      \ 'max_width': 200,
      \ 'root_marker_highlight': 'Constant',
      \ })
call defx#custom#column('time', {
      \ 'format': '%y/%m/%d %H:%M',
      \ })
function! s:get_defx_bufferdir(candidate) abort
    let path_mod = ':~:h'
    let dir = denite#util#substitute_path_separator(a:candidate)
    let dir = fnamemodify(dir, path_mod)
    let fdir = '\"' . l:dir. '\"'
    return fdir
endfunction
function! s:get_defx_file_extension(candidate) abort
    let path_mod = ':e'
    let dir = defx#get_candidate()
    let dir = fnamemodify(a:candidate., path_mod)
    return dir
endfunction
function! Defx_to_denite_rec(context) abort
        let narrow_dir = s:get_defx_bufferdir(a:context.targets[0])
        silent! execute('Denite
        \ -default-action=defx
        \ -start-filter
        \ -path=' . narrow_dir .
        \ ' file/rec')
endfunction
function! Defx_to_denite_file(context) abort
        let narrow_dir = s:get_defx_bufferdir(a:context.targets[0])
        silent! execute('Denite
        \ -default-action=defx
        \ -start-filter
        \ -path='. narrow_dir . ' file')
endfunction

"https://github.com/Shougo/defx.nvim/issues/175
function! s:open_defx_if_directory()
  " This throws an error if the buffer name contains unusual characters like
  " [[buffergator]]. Desired behavior in those scenarios is to consider the
  " buffer not to be a directory.
  try
    let l:full_path = expand(expand('%:p'))
  catch
    return
  endtry

  " If the path is a directory, delete the (useless) buffer and open defx for
  " that directory instead.
  if isdirectory(l:full_path)
    silent! execute "Defx `expand('%:p')` | bd " . expand('%:p')
  endif
endfunction
autocmd dein BufEnter * call s:open_defx_if_directory()
'''
[plugins.ftplugin]
defx = '''
nmap <silent><buffer> [denite]d <Plug>(defx):<C-u>Denite
    \ -buffer-name=relative
    \ defx/dirmark<CR>
nmap <silent><buffer> [denite]h <Plug>(defx):<C-u>Denite
    \ -buffer-name=relative
    \ defx/history<CR>
setlocal signcolumn=no
" Define mappings
nnoremap <silent><buffer><expr> <CR> defx#is_directory() ? defx#do_action('open') : <SID>defx_is_plaintxt() ? defx#do_action('drop') :defx#do_action('execute_system')
nnoremap <silent><buffer><expr> S defx#async_action('drop', 'split')
nnoremap <silent><buffer> <C-e> <C-w>p
nnoremap <silent><buffer><expr> c defx#async_action('multi', ['copy','redraw'])
nnoremap <silent><buffer><expr> m defx#async_action('multi', ['move','redraw'])
nnoremap <silent><buffer><expr> p defx#async_action('paste')
nnoremap <silent><buffer><expr> l defx#is_directory() ? defx#do_action('open') : defx#do_action('drop')
nnoremap <silent><buffer><expr> <2-LeftMouse> defx#is_directory() ? defx#do_action('open') : <SID>defx_is_plaintxt() ? defx#do_action('drop') :defx#do_action('execute_system')
nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
nnoremap <silent><buffer><expr> t defx#do_action('multi', ['toggle_sort','filename','redraw'])
nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
nnoremap <silent><buffer><expr> N defx#do_action('new_file')
nnoremap <silent><buffer><expr> F defx#do_action('new_multiple_files')
"need 'pip install Send2Trash'
nnoremap <silent><buffer><expr><nowait> d defx#async_action('remove_trash')
nnoremap <silent><buffer><expr> r defx#do_action('rename')
nnoremap <silent><buffer><expr> x defx#async_action('execute_system')
nnoremap <silent><buffer><expr> f defx#async_action('open_tree', 'nested', 'toggle')
nnoremap <silent><buffer><expr> <MiddleMouse> defx#async_action('open_tree', 'nested', 'toggle')
nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
nnoremap <silent><buffer><expr> <RightMouse> defx#do_action('cd', ['..'])
nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
nnoremap <silent><buffer><expr> q defx#do_action('quit')
nnoremap <silent><buffer><expr> i defx#do_action('toggle_select') . 'j'
nnoremap <silent><buffer><expr> e defx#async_action('toggle_select')
nnoremap <silent><buffer><expr> I defx#do_action('clear_select_all')
nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
nnoremap <silent><buffer><expr><nowait> <C-g> defx#do_action('print')
nnoremap <silent><buffer><expr> \ defx#do_action('change_vim_cwd','print')
nnoremap <silent><buffer><expr> ss defx#do_action('call','Defx_to_denite_rec')
nnoremap <silent><buffer><expr> sf defx#do_action('call','Defx_to_denite_file')
nnoremap <silent><buffer> sa :split<CR>:Defx -new -split=no<CR>
xnoremap <silent><buffer><expr> i defx#do_action('toggle_select_visual')
xnoremap <silent><buffer><expr> e defx#async_action('toggle_select_visual')
function! s:defx_is_plaintxt()
    let file = defx#get_candidate()['action__path']
    let extension = fnamemodify(file, ':e')
    let ex = '\v(png|xlsm|jpg|docx|docs|xlsx|pdf)'
    if ex !~# extension
    return 1
    else
    return
    endif
endfunction
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'
on_source = 'defx.nvim'
hook_source = '''
let g:defx_icons_enable_syntax_highlight = 1
let g:defx_icons_column_length = 2
let g:defx_icons_directory_icon = ''
let g:defx_icons_mark_icon = '*'
let g:defx_icons_copy_icon = ''
let g:defx_icons_move_icon = ''
let g:defx_icons_parent_icon = ''
let g:defx_icons_default_icon = ''
let g:defx_icons_directory_symlink_icon = ''
" Options below are applicable only when using "tree" feature
let g:defx_icons_root_opened_tree_icon = ''
let g:defx_icons_nested_opened_tree_icon = ''
let g:defx_icons_nested_closed_tree_icon = ''
let s:colors = {
      \ 'brown': '905532',
      \ 'aqua': '3AFFDB',
      \ 'blue': '689FB6',
      \ 'darkBlue': '44788E',
      \ 'purple': '834F79',
      \ 'lightPurple': '834F79',
      \ 'red': 'AE403F',
      \ 'beige': 'F5C06F',
      \ 'yellow': 'F09F17',
      \ 'orange': 'D4843E',
      \ 'darkOrange': 'F16529',
      \ 'pink': 'CB6F6F',
      \ 'salmon': 'EE6E73',
      \ 'green': '8FAA54',
      \ 'lightGreen': '31B53E',
      \ 'white': 'C6C8D1'
      \ }
let g:defx_icons_extensions = {
    \'txt' : { 'icon':'', 'color': s:colors.white},
    \'pdf' : { 'icon':'', 'color': s:colors.red},
    \'docx' : { 'icon':'', 'color': s:colors.blue},
    \'doc' : { 'icon':'', 'color': s:colors.blue},
    \'xlsx' : { 'icon':'', 'color': s:colors.green},
    \'xlsm' : { 'icon':'', 'color': s:colors.green},
    \'pptx' : { 'icon':'', 'color': s:colors.orange},
    \'ppt' : { 'icon':'', 'color': s:colors.orange},
    \'tex' : { 'icon':'', 'color': s:colors.orange},
    \}
hi default link DefxIconsCopyIcon Error
hi default link DefxIconsMoveIcon Constant
hi default link DefxIconsOpenedTreeIcon Title
hi default link DefxIconsNestedTreeIcon Constant
hi default link DefxIconsMarkIcon Error
hi default link DefxIconsParentDirectory Function

"NerdFont List{{{
"This list is useful for testing and choosing interesting symbols.
"Also it's more consistent with current fonts than codepoints shown in README.
"So, it may worth to add this to the wiki - I've opened issue just to ask is this appropriate. Probably it's better to put it on page with Nerd font loaded.
"
"IEC Power Symbols (23FB-23FE,2B58)
"⏻⏼⏽⏾⭘
"Font Awesome Extension (moved E000-E0A9 → E200-E2A9)
"
"
"
"
"
"Powerline Extra Symbols (E0A0-E0A3 E0B0-E0BF E0C0-E0C8 E0CC-E0CF E0D0-E0D2 E0D4)
"
"Devicons (moved E600-E6C5 → E700-E7C5)
"
"
"
"
"
"Font Awesome (F000-F2E0 with holes)
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"
"Octicons (2665,26A1, moved F000-F105 with holes → F400-F4A8, moved F27C → F67C)
"♥⚡
"

"
"
"
"
"Pomicons (E000-E00A)
"
"Font Linux (moved F100-F115 with holes → F300-F313)
"
"Seti-UI + Custom (E5FA-E62B)
"
"
" }}}
'''

[[plugins]]
repo =  'Shougo/deoplete.nvim'
# on_if = 'has("nvim")'
on_event = 'InsertEnter'
hook_source = 'source ~/dotfiles/nvim/rc/config/deoplete.rc.vim'

# [[plugins]]
# # on_if = '!has("nvim")'
# on_if = '!has("nvim")'
# depends = ['async.vim']
# on_event = 'InsertEnter'
# repo = 'prabirshrestha/asyncomplete.vim'

# [[plugins]]
# repo = 'Shougo/deol.nvim'
# on_cmd = ['Deol']
# hook_add = '''
# nnoremap <Leader>d :Deol -edit -split='vertical'<CR>
# '''

[[plugins]]
repo =  'Shougo/neco-vim'
on_source = ['deoplete','neocomplete']
on_ft = 'vim'

[[plugins]]
repo =  'orokasan/eskk.vim'
on_event = ['InsertEnter', 'CmdlineEnter']
# repo =  'orokasan/eskk.vim'
# on_map = {icrtn = '<Plug>(eskk:'}
hook_add = '''
let g:eskk#marker_okuri = '*'
let g:eskk#rom_input_style = 'msime'
let g:eskk#egg_like_newline = 1
let g:eskk#egg_like_newline_completion = 1
let g:eskk#tab_select_completion = 1
let g:eskk#start_completion_length = 2
let g:eskk#revert_henkan_style = 'okuri'
" backspaceで確定
let g:eskk#delete_implies_kakutei = 1
let g:eskk#dictionary = {
    \    'path': "~/.skk-jisyo",
    \    'sorted': 0,
    \    'encoding': 'utf-8'
    \ }
" let g:eskk#set_undo_point = {
"     \ 'sticky' : 0,
"     \ 'kakutei' : 0
"     \ }
let g:eskk#large_dictionary = {'path': '~/.skk/SKK-JISYO.L', 'sorted': 1, 'encoding': 'euc-jp', }
let g:eskk#cursor_color = {
    \   'ascii': '#b4be82',
    \   'hira': '#e28878',
    \   'kata': '#84a0c6',
    \   'abbrev': '#4169e1',
    \   'zenei': '#ffd700',
    \}
imap <C-j> <Plug>(eskk:toggle)
cmap <C-j> <Plug>(eskk:toggle)
'''
hook_source = 'source ~/dotfiles/nvim/rc/config/eskk.rc.vim'

[[plugins]]
repo =  'cohama/lexima.vim'
on_if = 'has("nvim")'
on_event = 'InsertEnter'
hook_add = '''
let g:lexima_no_default_rules = 1
" let g:lexima_no_default_rules = 1
" let g:lexima_enable_basic_rules = 1
" let g:lexima_enable_space_rules = 0
let g:lexima_ctrlh_as_backspace = 1
" let g:lexima_map_escape = ''
'''
hook_post_source = '''
call lexima#set_default_rules()
let s:lexima_my_rules = [
\ {'char': 'z[', 'input': '「', 'input_after': '」'},
\ {'char': 'z{', 'input': '『', 'input_after': '』'},
\ {'char': 'z\', 'input': '【', 'input_after': '】'},
\ {'char': 'z(', 'input': '（', 'input_after': '）'},
\ {'char': '<BS>', 'at': '「\%#」', 'delete' : 1},
\ {'char': '<BS>', 'at': '『\%#』', 'delete' : 1},
\ {'char': '<BS>', 'at': '【\%#】', 'delete' : 1},
\ {'char': '<BS>', 'at': '（\%#）', 'delete' : 1},
\ ]
" Markdown list and todolist
"call lexima#add_rule({'at': '^\s*\%#', 'char': '*', 'input': '*<Space>',         'filetype': 'markdown'})
"call lexima#add_rule({'at': '^\s*\%#', 'char': '-', 'input': '-<Space>',         'filetype': 'markdown'})
call lexima#add_rule({'at': '^\s*\*\s.*\%#$', 'char': '<CR>', 'input': '<CR>*<Space>',         'filetype': 'markdown'})
call lexima#add_rule({'at': '^\s*-\s.*\%#$', 'char': '<CR>', 'input': '<CR>-<Space>',         'filetype': 'markdown'})
call lexima#add_rule({'at': '- \%#',   'char': '[', 'input': '[<Space>]<Space>', 'filetype': 'markdown'})
for rule in s:lexima_my_rules
  call lexima#add_rule(rule)
endfor
inoremap z] 」
inoremap z} 』
inoremap z) ）
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>

function! s:my_cr_function() abort "{{{
  return pumvisible() ? deoplete#close_popup() : lexima#expand('<CR>', 'i')
endfunction "}}}
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
on_map = {nv = '<Plug>(operator-replace'}
hook_add = '''
nmap _ <Plug>(operator-replace)
vmap _ <Plug>(operator-replace)
'''

[[plugins]]
repo =  'nathanaelkane/vim-indent-guides'
on_cmd = 'IndentGuideToggle'
hook_add = '''
nnoremap <silent><Leader>ig :IndentGuidesToggle<CR>
'''
hook_source ='''
let g:indent_guides_exclude_filetypes = ['help', 'defx']
'''

[[plugins]]
repo = 'glidenote/memolist.vim'
# repo = 'orokasan/memolist.vim'
on_cmd = ['MemoNew', 'MemoGrep' , 'MemoList']
hook_add = '''
nnoremap <Leader>mn  :MemoNew<CR>
nnoremap <silent><Leader>mL  :<C-u>Denite 
    \ -buffer-name=normal
    \ -sorters=sorter/word,sorter/reverse
    \ file/rec:~/GoogleDrive/memo<CR>
nnoremap <silent><Leader>ml  :<C-u>Denite 
    \ -buffer-name=default
    \ -cursor-pos=+1
    \ -sorters=sorter/word,sorter/reverse
    \ file/rec:~/Dropbox/memo<CR>
nnoremap <silent><Leader>mg  :<C-u>Denite 
    \ -buffer-name=default
    \ grep:~/Dropbox/memo::<CR>
" use denite (default 0)
let g:memolist_denite = 1
let g:memolist_memo_suffix = 'md'
let g:memolist_path = "~/Dropbox/memo"
let g:memolist_template_dir_path = "~/Dropbox/memo/template"
let g:memolist_memo_date = "%Y-%m-%d[%H:%M]"
 let g:memolist_filename_date = "%y%m%d_"

" categories prompt (default 0)
" let g:memolist_prompt_categories = 1
'''

[[plugins]]
repo =  't9md/vim-choosewin'
#TODO:qitta
on_map = {n = '<Plug>(choosewin'}
hook_add = '''
nmap - <Plug>(choosewin)
nmap - <C-\><C-n><Plug>(choosewin)
" let g:choosewin_overlay_font_size = 'small'
" let g:choosewin_overlay_clear_multibyte = 1
" let g:choosewin_overlay_enable = 1
" let g:choosewin_color_overlay = {
"    \ 'gui': ['#839496']
"    \ }
" let g:choosewin_color_overlay_current = {
"    \ 'gui': ['#859900']
"    \ }
let g:choosewin_color_label_current = {
      \ 'gui': ['#859900' , '#002b36', 'bold']
      \ }
let g:choosewin_color_label = {
      \ 'gui': [ '#073642', '#fdf6e3', 'bold']
      \ }
let g:choosewin_color_other = {
      \ 'gui': ['#002b36', '#657b83']
      \ }
let g:choosewin_tabline_replace = 0
let g:choosewin_statusline_replace = 1
let g:choosewin_label_padding = 8
let g:choosewin_return_on_single_win = 1
let s:keymap = {
      \ '0':     'tab_first',
      \ '[':     'tab_prev',
      \ ']':     'tab_next',
      \ '$':     'tab_last',
      \ 'x':     'tab_close',
      \ ';':     'win_land',
      \ '-':     'previous',
      \ 's':     'swap',
      \ 'S':     'swap_stay',
      \ "\<CR>": 'win_land',
      \ }
let g:choosewin_keymap = s:keymap
let g:choosewin_label = 'HJKLADFG'
let g:choosewin_blink_on_land = 0
'''

[[plugins]]
repo =  'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = {nv= '<Plug>'}
hook_add = '''
map <silent>'a <Plug>(operator-surround-append)
map <silent>'d <Plug>(operator-surround-delete)
map <silent>'r <Plug>(operator-surround-replace)
" if you use vim-textobj-anyblock
nmap <silent>'dd <Plug>(operator-surround-delete)<Plug>(textobj-anyblock-a)
nmap <silent>'rr <Plug>(operator-surround-replace)<Plug>(textobj-anyblock-a)
'''
hook_source = '''
" let g:operator#surround#recognizes_both_ends_as_surround = v:false
" let g:operator#surround#uses_input_if_no_block = v:false
"2バイト括弧を追加
let g:operator#surround#blocks = {}
let g:operator#surround#blocks['-'] = [
\   { 'block' : ['（', '）'], 'motionwise' : ['char', 'line', 'block'], 'keys' : ['P'] },
\   { 'block' : ['「', '」'], 'motionwise' : ['char', 'line', 'block'], 'keys' : ['B'] },
\   { 'block' : ['『', '』'], 'motionwise' : ['char', 'line', 'block'], 'keys' : ['D'] },
\ ]
'''

# [[plugins]]
# repo = 'thinca/vim-ambicmd'
# on_event = ['CmdwinEnter', 'CmdlineEnter']
# hook_add = '''
# set wildcharm=<TAB>
# let g:ambicmd#show_completion_menu = 1
# augroup init_ambicmd
#   autocmd!
#   autocmd CmdwinEnter * call s:init_cmdwin()
# augroup END
# function! s:init_cmdwin()
#   inoremap <buffer> <expr> <Space> ambicmd#expand("\<Space>")
#   inoremap <buffer> <expr> <CR>    ambicmd#expand("\<CR>")
# endfunction
# '''
# hook_source = '''
# " sourceできた時のみマップする
# " `ambicmd#expand`が無いときcmdlineでまともに入力できなくなる
# cnoremap <expr> <Space> ambicmd#expand("\<Space>")
# cnoremap <expr> <CR>    ambicmd#expand("\<CR>")
# '''

[[plugins]]
repo = 'itchyny/vim-cursorword'
on_map = {nv='<Plug>'}
hook_add = '''
let g:cursorword = 0
function! s:toggle_vim_cursorword() abort
  let g:cursorword = g:cursorword ? 0 : 1
  call cursorword#matchadd()
endfunction
nnoremap <silent> <Plug>(cursorword-toggle)
      \ :<C-u>call <SID>toggle_vim_cursorword()<CR>
nmap <C-g>c     <Plug>(cursorword-toggle)
nmap <C-g><C-c> <Plug>(cursorword-toggle)
'''

[[plugins]]
repo = 'mattn/benchvimrc-vim'
on_cmd = 'BenchVimrc'

[[plugins]]
repo = 'junegunn/goyo.vim'
on_cmd = 'Goyo'
hook_add = '''
nnoremap <F4> :Goyo<CR>
let g:goyo_width = 80
let g:goyo_height = '60%'
function! s:goyo_enter()
  set scrolloff=999
  Limelight
endfunction
function! s:goyo_leave()
  set scrolloff=3
  Limelight!
endfunction
autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyAlign)'
hook_add = '''
vmap <Leader>ga <Plug>(EasyAlign)
nmap <Leader>ga <Plug>(EasyAlign)
'''

[[plugins]]
repo =  'tyru/open-browser.vim'
on_map = {nx = '<Plug>(openbrowser'}
hook_add ='''
nmap <Leader>o <Plug>(openbrowser-smart-search)
xmap <Leader>o <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'orokasan/clever-f.vim'
on_map = { nxo = '<Plug>(clever-f' }
hook_add = '''
"mapping for lazy load
nmap f <Plug>(clever-f-f)
xmap f <Plug>(clever-f-f)
omap f <Plug>(clever-f-f)
nmap F <Plug>(clever-f-F)
xmap F <Plug>(clever-f-F)
omap F <Plug>(clever-f-F)
nmap t <Plug>(clever-f-t)
xmap t <Plug>(clever-f-t)
omap t <Plug>(clever-f-t)
nmap T <Plug>(clever-f-T)
xmap T <Plug>(clever-f-T)
omap T <Plug>(clever-f-T)

let g:clever_f_show_prompt = 1
let g:clever_f_mark_cursor = 1
let g:clever_f_mark_char_color = "Underlined"
let g:clever_f_hide_cursor_on_cmdline = 1
let g:clever_f_smart_case = 1
let g:clever_f_across_no_line = 1
let g:clever_f_chars_match_any_signs = ':;'
let g:clever_f_use_migemo = 1
let g:clever_f_sings_match_any_signs =
    \ '\[!"#$%&''()=~|\-^\\@`[\]{};:+*<>,.?_/、。「」（）『』！？]'
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = { nx = '<Plug>(asterisk'}
depends = 'is.vim'
hook_add = '''
"let g:asterisk#keeppos = 1
"map <silent> *  <Plug>(asterisk-z*)<Plug>(is-nohl-1):<C-u>silent AnzuUpdateSearchStatus<CR>
"map <silent> g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1):<C-u>silent AnzuUpdateSearchStatus<CR>
"map <silent> #  <Plug>(asterisk-z#)<Plug>(is-nohl-1):<C-u>silent AnzuUpdateSearchStatus<CR>
"map <silent> g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1):<C-u>silent AnzuUpdateSearchStatus<CR>
map <silent> *  <Plug>(asterisk-z*)<Plug>(is-nohl-1)
map <silent> g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1)
map <silent> #  <Plug>(asterisk-z#)<Plug>(is-nohl-1)
map <silent> g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1)
'''

[[plugins]]
on_map = { nxi = '<Plug>(easymotion'}
repo = 'easymotion/vim-easymotion'
hook_add = '''
let g:EasyMotion_do_mapping = 0
" nmap m <Plug>(easymotion-overwin-f2)
nmap m <Plug>(easymotion-s2)
imap <C-z> <ESC><Plug>(easymotion-s2)
xmap m <Plug>(easymotion-s2)
omap m <Plug>(easymotion-s2)
map gj <Plug>(easymotion-sol-j)
map gk <Plug>(easymotion-sol-k)

" Jump to first match with enter & space
let g:EasyMotion_use_upper = 1
let g:EasyMotion_keys = 'ASDFGHJKLQWERTYUIOPZXCVBNM'
let g:EasyMotion_smartcase = 1
let g:EasyMotion_space_jump_first = 1
let g:EasyMotion_use_migemo = 1
let g:EasyMotion_prompt = '{n}>>> '
let g:EasyMotion_verbose = 0
hi link EasyMotionTarget Type
hi link EasyMotionShade  Comment
hi link EasyMotionTarget2First MatchParen
hi link EasyMotionTarget2Second MatchParen
hi link EasyMotionMoveHL Search
hi link EasyMotionIncSearch Search
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
depends = 'vim-quickrun-neovim-job'
on_cmd = ['QuickRun']
on_map = { nx = '<Plug>(quickrun' }
hook_add = '''
nmap <Leader>q <Plug>(quickrun)
xmap <Leader>q <Plug>(quickrun)
let g:quickrun_config = {'_': {}}
let g:quickrun_config = {
    \ "_" : {
        \ "hook/close_unite_quickfix/enable_hook_loaded" : 1,
        \ "hook/unite_quickfix/enable_failure" : 1,
        \ "hook/close_quickfix/enable_exit" : 1,
        \ "hook/close_buffer/enable_failure" : 1,
        \ "hook/close_buffer/enable_empty_data" : 1,
        \ "outputter/buffer/split" : "botright8",
        \ "outputter/buffer/close_on_empty" : 1
    \ }
\ }
let g:quickrun_config['python'] = {
    \ 'command': 'python3'
    \ }
if has('nvim')
  " Use 'neovim_job' in Neovim
  let g:quickrun_config._.runner = 'neovim_job'
elseif exists('*ch_close_in')
  " Use 'job' in Vim which support job feature
  let g:quickrun_config._.runner = 'job'
endif
let g:quickrun_config['tex'] = {
            \   'command' : 'latexmk',
            \   'outputter' : 'error',
            \   'outputter/error/error' : 'quickfix',
            \   'cmdopt': '',
            \   'exec': ['%c %o %s']
            \ }
let g:quickrun_config['text'] = {
            \   'command' : 'npx',
            \   'outputter' : 'message',
            \   'cmdopt': 'textlint',
            \   'exec': ['%c %o %s']
            \ }
'''

[[plugins]]
repo = 'mbbill/undotree'
#TODO:qitta
on_cmd = ['UndotreeToggle']
hook_add = '''
nnoremap U :<C-u>UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle = 1
let g:undotree_WindowLayout = 2
'''

[[plugins]]
repo = 't9md/vim-textmanip'
on_map = { x = '<Plug>(textmanip'}
hook_add = '''
xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-l> <Plug>(textmanip-move-right)
" toggle insert/replace with <F10>
" nmap <F10> <Plug>(textmanip-toggle-mode)
" xmap <F10> <Plug>(textmanip-toggle-mode)
'''

# [[plugins]]
# repo = 'kassio/neoterm'
# on_cmd = ['T', 'Ttoggle']
# hook_add = '''
# '''
# hook_source = '''
# tnoremap <C-d> <C-\><C-n>:<C-u>Tclose<CR>'
# nnoremap '' :<C-u>Ttoggle<CR>
# let g:neoterm_repl_python = ''
# let g:neoterm_auto_repl_cmd = v:false
# let g:neoterm_default_mod='aboveleft'
# let g:neoterm_autoscroll = v:true
# let g:neoterm_size=15
# let g:neoterm_autoinsert = v:false
# let g:neoterm_autojump = v:true
# '''

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = ['Tagbar']

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
on_cmd = ['ColorizerToggle']

[[plugins]]
on_cmd = ['Clap']
repo = 'liuchengxu/vim-clap'

[[plugins]]
repo = 'voldikss/vim-translator'
#TODO:qitta
on_map = { nx = '<Plug>Translate' }
on_cmd = ['Translate', 'TranslateV']
hook_add = '''
" コマンドが-rangeに対応してないため<Plug>側で:Translate!を実装
nmap <silent> <Plug>TranslateB   :call translator#translate('-w ' . expand('<cword>'), 'echo', v:false, '!')<CR>
vmap <silent> <Plug>TranslateBV  :<C-U>call translator#translate('', 'echo', v:true, '!')<CR>
nmap <silent> <Leader>t <Plug>Translate
vmap <silent> <Leader>t <Plug>TranslateV
nmap <silent> <Leader>T <Plug>TranslateB
vmap <silent> <Leader>T <Plug>TranslateBV
" nmap <silent> <Leader>T :Translate -tl 'en'<CR>
" vmap <silent> <Leader>T :TranslateV -tl 'en'<CR>
let g:translator_target_lang = 'ja'
let g:translator_source_lang = 'en'
let g:translator_default_engines = ['google']
let g:translator_window_borderchars = v:null
'''

# [[plugins]]
# repo = 'lervag/vimtex'
# on_ft = ['tex']
# hook_source = '''
# let g:vimtex_quickfix_open_on_warning = 1
# let g:vimtex_view_method = 'skim'
# let g:tex_flavor = 'latex'
# let g:vimtex_matchparen_enabled = 0
# let g:vimtex_compiler_latexmk = {
#       \ 'options': [
#       \    '-pdfdvi',
#       \],
#       \}

# # call deoplete#custom#var('omni', 'input_patterns', {
# #     \ 'tex': g:vimtex#re#deoplete
# #     \})
# '''

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {x = '<Plug>(niceblock-'}
hook_add = '''
  xmap I  <Plug>(niceblock-I)
  xmap A  <Plug>(niceblock-A)
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
on_cmd = ['Vista']
hook_add ='''
let g:vista_icon_indent = ["▸ ", ""]
let g:vista_echo_cursor = 1
let g:vista_cursor_delay = 200
let g:vista_echo_cursor_strategy = 'floating_win'
let g:vista_finder_alternative_executives = ['vim_lsp']
let g:vista#renderer#enable_icon = 0
'''

[[plugins]]
on_map = {nxo = '<Plug>Commentary'}
repo = 'tpope/vim-commentary'
hook_add = '''
if !hasmapto('<Plug>Commentary') || maparg('gc','n') ==# ''
  xmap gc  <Plug>Commentary
  nmap gc  <Plug>Commentary
  omap gc  <Plug>Commentary
  nmap gcc <Plug>CommentaryLine
  if maparg('c','n') ==# '' && !exists('v:operator')
    nmap cgc <Plug>ChangeCommentary
  endif
  nmap gcu <Plug>Commentary<Plug>Commentary
endif
'''

# [[plugins]]
# on_ft = 'go'
# repo = 'mattn/vim-goimports'

# [[plugins]]
# repo = 'fatih/vim-go'
# on_ft = ['go']
# hook_add = '''
# let g:go_snippet_engine = "neosnippet"
# let g:go_gopls_enabled = 0
# " highlight
# let g:go_highlight_functions = 1
# let g:go_highlight_function_parameters = 1
# let g:go_highlight_types = 1
# " let g:go_highlight_fields = 1
# " let g:go_highlight_build_constraints = 1
# let g:go_highlight_generate_tags = 1
# let g:go_highlight_variable_declarations = 1
# '''

[[plugins]]
repo =  'Shougo/unite.vim'
on_cmd = ['Unite']

[[plugins]]
repo = 'previm/previm'
depends = 'open-browser.vim'
on_cmd = ['PrevimOpen']
on_ft = 'markdown'
hook_add = '''
" let g:previm_open_cmd = 'open -a FireFox\ Nightly'
nnoremap <silent><Leader>mp :PrevimOpen<CR>
'''

[[plugins]]
repo =  'lambdalisue/gina.vim'
on_cmd = ['Gina']
hook_add = '''
nnoremap <silent> <Leader><Leader> :<C-u>Gina status<CR>
nnoremap <silent> <Leader>gA :<C-u>Gina changes HEAD<CR>
nnoremap <silent> <Leader>gc :<C-u>Gina commit<CR>
nnoremap <silent> <Leader>gC :<C-u>Gina commit --amend<CR>
nnoremap <silent> <Leader>gb :<C-u>Gina branch -av<CR>
nnoremap <silent> <Leader>gt :<C-u>Gina tag<CR>
nnoremap <silent> <Leader>gq :<C-u>Gina qrep<CR>
nnoremap <silent> <Leader>gd :<C-u>nos Gina compare<CR>zz
nnoremap <silent> <Leader>gg :<C-u>Gina diff<CR>
nnoremap <silent> <Leader>gs :<C-u>Gina df<CR>
nnoremap <silent> <Leader>gD :<C-u>Gina changes origin/HEAD...<CR>
nnoremap <silent> <Leader>gl :<C-u>Gina log<CR>
nnoremap <silent> <Leader>gL :<C-u>Gina log %<CR>
nnoremap <silent> <Leader>gf :<C-u>Gina ls<CR>
nnoremap <silent> <Leader>gp :<C-u>Gina!! add -p<CR>
let g:gina#core#spinner#delaytime = 10
'''
hook_source = '''
call gina#custom#command#alias('branch', 'br')
call gina#custom#command#alias('diff', 'df')
call gina#custom#command#option('df', '--stat')
call gina#custom#command#option(
    \ '/\%(log\|reflog\|diff\)',
    \ '--opener', 'vsplit'
    \)
call gina#custom#command#option(
    \ '/\%(status\|branch\|ls\|grep\|changes\|tag\|df\)',
    \ '--opener' , 'botright 10split'
    \)
call gina#custom#command#option('commit', '--opener' , 'split')
call gina#custom#command#option('log', '--group', 'log-viewer')
call gina#custom#command#option('status', '--group', 'status-viewer')
call gina#custom#command#option('reflog', '--group', 'reflog-viewer')
call gina#custom#command#option('commit', '-v|--verbose')
call gina#custom#command#option('commit', '--group', 'status-viewer')
call gina#custom#command#option('diff', '-U0')
call gina#custom#command#option('compare', '-R')
call gina#custom#command#option('branch', '-v', 'v')
call gina#custom#command#option('status', '--short')
call gina#custom#command#option('status', '--branch')
call gina#custom#command#option('log', '--graph')
call gina#custom#command#option('/\%(status\|commit\)', '-u|--untracked-files')
"call gina#custom#command#option(
"\ '/\%(status\|changes\)',
"\ '--ignore-submodules'
"\)
"call gina#custom#action#alias(
"\ 'branch', 'track',
"\ 'checkout:track'
"\)
call gina#custom#action#alias( 'branch', 'merge', 'commit:merge')
call gina#custom#action#alias( 'branch', 'rebase', 'commit:rebase')
call gina#custom#mapping#nmap(
    \ '/.*', 'gq',
    \ ':tabclose<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ '/.*', 'q',
    \ ':close<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'status', '<C-^>',
    \ ':<C-u>Gina commit<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'commit', '<C-^>',
    \ ':<C-u>Gina status<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'status', '<C-6>',
    \ ':<C-u>Gina commit<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'status', '-',
    \ '<Plug>(gina-index-toggle)',
    \ { 'silent': 1, 'nowait': 1}
    \)
call gina#custom#mapping#vmap(
    \ 'status', '-',
    \ '<Plug>(gina-index-toggle)',
    \ { 'silent': 1, 'nowait': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'status', 'c',
    \ ':<C-u>Gina commit<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'status', 'C',
    \ ':<C-u>Gina compare<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'commit', '<C-6>',
    \ ':<C-u>Gina status<CR>',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#mapping#nmap(
    \ 'commit', 'I',
    \ 'ggI',
    \ {'noremap': 1, 'silent': 1}
    \)
call gina#custom#action#alias(
      \ '/\%(blame\|log\|reflog\)',
      \ 'preview',
      \ 'topleft show:commit:preview',
      \)
call gina#custom#action#alias(
      \ '/\%(blame\|log\|reflog\)',
      \ 'preview',
      \ 'show:commit:above',
      \)
call gina#custom#mapping#nmap(
      \ '/\%(blame\|log\|reflog\)',
      \ 'p',
      \ ':<C-u>call gina#action#call(''preview'')<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)
call gina#custom#action#alias(
      \ '/\%(blame\|log\|reflog\)',
      \ 'changes',
      \ 'topleft changes:of:preview',
      \)
call gina#custom#action#alias(
      \ '/\%(blame\|log\|reflog\)',
      \ 'changes',
      \ 'changes:of:preview',
      \)
call gina#custom#mapping#nmap(
      \ '/\%(blame\|log\|reflog\)',
      \ 'c',
      \ ':<C-u>call gina#action#call(''changes'')<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)
call gina#custom#execute(
      \ '/\%(ls\|log\|reflog\|grep\)',
      \ 'setlocal noautoread',
      \)
call gina#custom#execute(
      \ '/\%(status\|branch\|ls\|log\|reflog\|grep\)',
      \ 'setlocal cursorline',
      \)
'''

[[plugins]]
repo =  'mattn/vim-sonictemplate' 
on_cmd = ['Template']

[[plugins]]
repo = 'tpope/vim-fugitive'
on_cmd = ['Git', 'G']
hook_add = '''
'''

[[plugins]]
on_map = {n = '<Plug>(vigemo-'}
repo =  'orokasan/vim-vigemo' 
hook_add = '''
nmap g/ <Plug>(vigemo-search)
nmap g? <Plug>(vigemo-search)
'''

[[plugins]]
on_map = {xo = '<Plug>(textobj-'}
depends = ['vim-textobj-user']
# ae, ie
repo = 'kana/vim-textobj-entire'
hook_add = '''
xmap ae <Plug>(textobj-entire-a)
omap ae <Plug>(textobj-entire-a)
xmap ie <Plug>(textobj-entire-i)
omap ie <Plug>(textobj-entire-i)
'''

[[plugins]]
on_map = {xo = '<Plug>(textobj-pastedtext'}
depends = ['vim-textobj-user']
# gb
repo = 'saaguero/vim-textobj-pastedtext'
hook_add = '''
xmap gb <Plug>(textobj-pastedtext-text)
omap gb <Plug>(textobj-pastedtext-text)
'''

[[plugins]]
# ab, ib
on_map = {xo = '<Plug>(textobj-anyblock'}

depends = ['vim-textobj-user']
repo = 'rhysd/vim-textobj-anyblock'
hook_add = '''
let g:textobj#anyblock#blocks = ['(', '{', '[', '"', "'", '<' , 'f`']
xmap ab <Plug>(textobj-anyblock-a)
omap ab <Plug>(textobj-anyblock-a)
xmap ib <Plug>(textobj-anyblock-i)
omap ib <Plug>(textobj-anyblock-i)
'''

[[plugins]]
# ay, iy
on_map = {xo = '<Plug>(textobj-syntax'}
depends = ['vim-textobj-user']
repo = 'kana/vim-textobj-syntax'
hook_add = '''
xmap ay <Plug>(textobj-syntax-a)
omap ay <Plug>(textobj-syntax-a)
xmap iy <Plug>(textobj-syntax-i)
omap iy <Plug>(textobj-syntax-i)
'''

[[plugins]]
# al, il
depends = ['vim-textobj-user']
on_map = {xo = '<Plug>(textobj-line'}
repo = 'kana/vim-textobj-line'
hook_add = '''
xmap al <Plug>(textobj-line-a)
omap al <Plug>(textobj-line-a)
xmap il <Plug>(textobj-line-i)
omap il <Plug>(textobj-line-i)
'''

[[plugins]]
# av, iv
# aV, iV
depends = ['vim-textobj-user']
on_map = {xo = '<Plug>(textobj-wordcolumn'}
repo = 'rhysd/vim-textobj-word-column'
hook_add = '''
xmap av <Plug>(textobj-wordcolumn-w-a)
omap av <Plug>(textobj-wordcolumn-w-a)
xmap iv <Plug>(textobj-wordcolumn-w-i)
omap iv <Plug>(textobj-wordcolumn-w-i)
xmap aV <Plug>(textobj-wordcolumn-W-a)
omap aV <Plug>(textobj-wordcolumn-W-a)
xmap iV <Plug>(textobj-wordcolumn-W-i)
omap iV <Plug>(textobj-wordcolumn-W-i)
'''
# vim:set foldmethod=marker:
