# ============================================================================
# FILE: grep.py
# AUTHOR: Shougo Matsushita <Shougo.Matsu at gmail.com>
# License: MIT license
# ============================================================================

import shlex
import typing
from os.path import relpath

from denite import util, process
from denite.base.source import Base
from denite.util import Nvim, UserContext, Candidates, Candidate, truncate


def _candidate(result: typing.List[typing.Any], path: str) -> Candidate:
    return {
        'word': result[3],
        'abbr': '{}:{}{} {}'.format(
            path,
            result[1],
            (':' + result[2] if result[2] != '0' else ''),
            result[3]),
        'action__path': result[0],
        'action__line': result[1],
        'action__col': result[2],
        'action__text': result[3],
    }


class Source(Base):

    def __init__(self, vim: Nvim) -> None:
        super().__init__(vim)

        self.name = 'textlint'
        self.kind = 'file'
        self.vars = {
            'command': ['grep'],
            'default_opts': ['-inH'],
            'final_opts': [],
            'max_path_length': 50,
            'min_interactive_length': 3,
            'pattern_opt': ['-e'],
            'recursive_opts': ['-r'],
            'separator': ['--'],
        }
        self.matchers = ['matcher/ignore_globs', 'matcher/regexp']
        self.is_volatile = True

    def on_init(self, context: UserContext) -> None:
        context['__proc'] = None

        context['path'] = self.vim.call('expand', '%')
        # args = dict(enumerate(context['args']))

        # paths
        # context['__paths'] = self._init_paths(context, args)

        # # arguments
        # context['__arguments'] = self._init_arguments(context, args)

        # # patterns
        # context['__patterns'] = self._init_patterns(context, args)

    def on_close(self, context: UserContext) -> None:
        if context['__proc']:
            context['__proc'].kill()
            context['__proc'] = None

    def highlight(self) -> None:
        self.vim.command(GREP_HEADER_SYNTAX)
        self.vim.command(GREP_FILE_SYNTAX)
        self.vim.command(GREP_FILE_HIGHLIGHT)
        self.vim.command(GREP_LINE_SYNTAX)
        self.vim.command(GREP_LINE_HIGHLIGHT)
        self.vim.command(GREP_PATTERNS_HIGHLIGHT)

    def define_syntax(self) -> None:
        self.vim.command(
            'syntax region ' + self.syntax_name + ' start=// end=/$/ '
            'contains=deniteSource_grepHeader,deniteMatchedRange contained')
        if self.context['__patterns']:
            self.vim.command(
                'syntax match deniteGrepPatterns ' +
                r'/%s/ ' % r'\|'.join(
                    util.regex_convert_str_vim(pattern)
                    for pattern in self.context['__patterns']) +
                'contained containedin=' + self.syntax_name)

    def gather_candidates(self, context: UserContext) -> Candidates:

        if context['__proc']:
            return self._async_gather_candidates(
                context, context['async_timeout'])

        # path = self.vim.call('fnamemodify', context['path'], ':h')
        path = context['path']
        args = ['npx', 'textlint', '--format=unix', path, ]
        candidate = self.vim.call('system', 'npx textlint --format=unix ', self.vim.call('expand', '%'))
        self.print_message(context, args)

        context['__proc'] = process.Process(args, context, context['path'])
        return self._async_gather_candidates(context, 0.5)

    def _async_gather_candidates(self, context: UserContext,
                                 timeout: float) -> Candidates:
        outs, errs = context['__proc'].communicate(timeout=timeout)
        if errs:
            self.error_message(context, errs)
        context['is_async'] = not context['__proc'].eof()
        if context['__proc'].eof():
            context['__proc'] = None

        candidates = []

        for line in outs:
            result = util.parse_jump_line(context['path'], line)
            if not result:
                continue
            path = truncate(self.vim,
                            relpath(result[0], start=context['path']),
                            self.vars['max_path_length'])
            candidates.append(_candidate(result, path))
        return candidates

